(* mips - generated by L<3> - Fri Oct 31 13:13:34 2014 *)

structure mips :> mips =
struct

structure Map = MutableMap

(* -------------------------------------------------------------------------
   Type declarations
   ------------------------------------------------------------------------- *)

type EntryLo =
  { C: BitsN.nbit, D: bool, G: bool, PFN: BitsN.nbit, V: bool,
    entrylo'rst: BitsN.nbit }

type TLBEntry =
  { ASID: BitsN.nbit, C0: BitsN.nbit, C1: BitsN.nbit, D0: bool, D1: bool,
    G: bool, Mask: BitsN.nbit, PFN0: BitsN.nbit, PFN1: BitsN.nbit,
    R: BitsN.nbit, V0: bool, V1: bool, VPN2: BitsN.nbit }

datatype IorD = INSTRUCTION | DATA

datatype AccessType = LOAD | STORE

type Index = { Index: BitsN.nbit, P: bool, index'rst: BitsN.nbit }

type Random = { Random: BitsN.nbit, random'rst: BitsN.nbit }

type Wired = { Wired: BitsN.nbit, wired'rst: BitsN.nbit }

type PageMask = { Mask: BitsN.nbit, pagemask'rst: BitsN.nbit }

type EntryHi =
  { ASID: BitsN.nbit, R: BitsN.nbit, VPN2: BitsN.nbit,
    entryhi'rst: BitsN.nbit }

type StatusRegister =
  { BEV: bool, CU0: bool, CU1: bool, CU2: bool, CU3: bool, ERL: bool,
    EXL: bool, FR: bool, IE: bool, IM: BitsN.nbit, KSU: BitsN.nbit,
    KX: bool, RE: bool, SX: bool, UX: bool, statusregister'rst: BitsN.nbit
    }

type ConfigRegister =
  { AR: BitsN.nbit, AT: BitsN.nbit, BE: bool, K0: BitsN.nbit, M: bool,
    MT: BitsN.nbit, configregister'rst: BitsN.nbit }

type ConfigRegister1 =
  { C2: bool, CA: bool, DA: BitsN.nbit, DL: BitsN.nbit, DS: BitsN.nbit,
    EP: bool, FP: bool, IA: BitsN.nbit, IL: BitsN.nbit, IS: BitsN.nbit,
    M: bool, MD: bool, MMUSize: BitsN.nbit, PCR: bool, WR: bool }

type ConfigRegister2 =
  { M: bool, SA: BitsN.nbit, SL: BitsN.nbit, SS: BitsN.nbit,
    SU: BitsN.nbit, TA: BitsN.nbit, TL: BitsN.nbit, TS: BitsN.nbit,
    TU: BitsN.nbit }

type ConfigRegister3 =
  { DSPP: bool, LPA: bool, M: bool, MT: bool, SM: bool, SP: bool,
    TL: bool, ULRI: bool, VEIC: bool, VInt: bool,
    configregister3'rst: BitsN.nbit }

type ConfigRegister6 =
  { LTLB: bool, TLBSize: BitsN.nbit, configregister6'rst: BitsN.nbit }

type CauseRegister =
  { BD: bool, CE: BitsN.nbit, ExcCode: BitsN.nbit, IP: BitsN.nbit,
    TI: bool, causeregister'rst: BitsN.nbit }

type Context =
  { BadVPN2: BitsN.nbit, PTEBase: BitsN.nbit, context'rst: BitsN.nbit }

type XContext =
  { BadVPN2: BitsN.nbit, PTEBase: BitsN.nbit, R: BitsN.nbit,
    xcontext'rst: BitsN.nbit }

type HWREna =
  { CC: bool, CCRes: bool, CPUNum: bool, UL: bool, hwrena'rst: BitsN.nbit
    }

type CP0 =
  { BadVAddr: BitsN.nbit, Cause: CauseRegister, Compare: BitsN.nbit,
    Config: ConfigRegister, Config1: ConfigRegister1,
    Config2: ConfigRegister2, Config3: ConfigRegister3,
    Config6: ConfigRegister6, Context: Context, Count: BitsN.nbit,
    Debug: BitsN.nbit, EPC: BitsN.nbit, EntryHi: EntryHi,
    EntryLo0: EntryLo, EntryLo1: EntryLo, ErrCtl: BitsN.nbit,
    ErrorEPC: BitsN.nbit, HWREna: HWREna, Index: Index,
    LLAddr: BitsN.nbit, PRId: BitsN.nbit, PageMask: PageMask,
    Random: Random, Status: StatusRegister, UsrLocal: BitsN.nbit,
    Wired: Wired, XContext: XContext }

type PIC_Config_Reg =
  { EN: bool, IRQ: BitsN.nbit, pic_config_reg'rst: BitsN.nbit }

type JTAG_UART_data =
  { RAVAIL: BitsN.nbit, RVALID: bool, RW_DATA: BitsN.nbit,
    jtag_uart_data'rst: BitsN.nbit }

type JTAG_UART_control =
  { AC: bool, RE: bool, RI: bool, WE: bool, WI: bool, WSPACE: BitsN.nbit,
    jtag_uart_control'rst: BitsN.nbit }

type JTAG_UART =
  { base_address: BitsN.nbit, control: JTAG_UART_control,
    data: JTAG_UART_data, read_fifo: BitsN.nbit list,
    read_threshold: Nat.nat, write_fifo: BitsN.nbit list,
    write_threshold: Nat.nat }

datatype ExceptionType =
    Int | Mod | TLBL | TLBS | AdEL | AdES | Sys | Bp | ResI | CpU | Ov
  | Tr | C2E | XTLBRefillL | XTLBRefillS

datatype Branch =
    BEQ of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | BEQL of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | BGEZ of BitsN.nbit * BitsN.nbit
  | BGEZAL of BitsN.nbit * BitsN.nbit
  | BGEZALL of BitsN.nbit * BitsN.nbit
  | BGEZL of BitsN.nbit * BitsN.nbit
  | BGTZ of BitsN.nbit * BitsN.nbit
  | BGTZL of BitsN.nbit * BitsN.nbit
  | BLEZ of BitsN.nbit * BitsN.nbit
  | BLEZL of BitsN.nbit * BitsN.nbit
  | BLTZ of BitsN.nbit * BitsN.nbit
  | BLTZAL of BitsN.nbit * BitsN.nbit
  | BLTZALL of BitsN.nbit * BitsN.nbit
  | BLTZL of BitsN.nbit * BitsN.nbit
  | BNE of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | BNEL of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | J of BitsN.nbit
  | JAL of BitsN.nbit
  | JALR of BitsN.nbit * BitsN.nbit
  | JR of BitsN.nbit

datatype CP =
    DMFC0 of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | DMTC0 of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | MFC0 of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | MTC0 of BitsN.nbit * (BitsN.nbit * BitsN.nbit)

datatype Store =
    SB of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SC of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SCD of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SD of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SDL of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SDR of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SH of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SW of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SWL of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SWR of BitsN.nbit * (BitsN.nbit * BitsN.nbit)

datatype Load =
    LB of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | LBU of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | LD of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | LDL of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | LDR of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | LH of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | LHU of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | LL of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | LLD of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | LW of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | LWL of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | LWR of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | LWU of BitsN.nbit * (BitsN.nbit * BitsN.nbit)

datatype Trap =
    TEQ of BitsN.nbit * BitsN.nbit
  | TEQI of BitsN.nbit * BitsN.nbit
  | TGE of BitsN.nbit * BitsN.nbit
  | TGEI of BitsN.nbit * BitsN.nbit
  | TGEIU of BitsN.nbit * BitsN.nbit
  | TGEU of BitsN.nbit * BitsN.nbit
  | TLT of BitsN.nbit * BitsN.nbit
  | TLTI of BitsN.nbit * BitsN.nbit
  | TLTIU of BitsN.nbit * BitsN.nbit
  | TLTU of BitsN.nbit * BitsN.nbit
  | TNE of BitsN.nbit * BitsN.nbit
  | TNEI of BitsN.nbit * BitsN.nbit

datatype Shift =
    DSLL of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | DSLL32 of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | DSLLV of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | DSRA of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | DSRA32 of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | DSRAV of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | DSRL of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | DSRL32 of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | DSRLV of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SLL of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SLLV of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SRA of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SRAV of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SRL of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SRLV of BitsN.nbit * (BitsN.nbit * BitsN.nbit)

datatype MultDiv =
    DDIV of BitsN.nbit * BitsN.nbit
  | DDIVU of BitsN.nbit * BitsN.nbit
  | DIV of BitsN.nbit * BitsN.nbit
  | DIVU of BitsN.nbit * BitsN.nbit
  | DMULT of BitsN.nbit * BitsN.nbit
  | DMULTU of BitsN.nbit * BitsN.nbit
  | MADD of BitsN.nbit * BitsN.nbit
  | MADDU of BitsN.nbit * BitsN.nbit
  | MFHI of BitsN.nbit
  | MFLO of BitsN.nbit
  | MSUB of BitsN.nbit * BitsN.nbit
  | MSUBU of BitsN.nbit * BitsN.nbit
  | MTHI of BitsN.nbit
  | MTLO of BitsN.nbit
  | MUL of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | MULT of BitsN.nbit * BitsN.nbit
  | MULTU of BitsN.nbit * BitsN.nbit

datatype ArithR =
    ADD of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | ADDU of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | AND of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | DADD of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | DADDU of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | DSUB of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | DSUBU of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | MOVN of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | MOVZ of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | NOR of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | OR of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SLT of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SLTU of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SUB of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SUBU of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | XOR of BitsN.nbit * (BitsN.nbit * BitsN.nbit)

datatype ArithI =
    ADDI of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | ADDIU of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | ANDI of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | DADDI of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | DADDIU of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | LUI of BitsN.nbit * BitsN.nbit
  | ORI of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SLTI of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SLTIU of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | XORI of BitsN.nbit * (BitsN.nbit * BitsN.nbit)

datatype instruction =
    ArithI of ArithI
  | ArithR of ArithR
  | BREAK
  | Branch of Branch
  | CACHE of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | COP2 of BitsN.nbit
  | CP of CP
  | ERET
  | LDC2 of BitsN.nbit
  | LWC2 of BitsN.nbit
  | Load of Load
  | MultDiv of MultDiv
  | RDHWR of BitsN.nbit * BitsN.nbit
  | ReservedInstruction
  | SDC2 of BitsN.nbit
  | SWC2 of BitsN.nbit
  | SYNC of BitsN.nbit
  | SYSCALL
  | Shift of Shift
  | Store of Store
  | TLBP
  | TLBR
  | TLBWI
  | TLBWR
  | Trap of Trap
  | Unpredictable
  | WAIT

(* -------------------------------------------------------------------------
   Casting maps (for enumerated types)
   ------------------------------------------------------------------------- *)

structure Cast =
struct
fun natToIorD x =
  case Nat.toInt x of
     0 => INSTRUCTION | 1 => DATA | _ => raise Fail "natToIorD"

fun natToAccessType x =
  case Nat.toInt x of
     0 => LOAD | 1 => STORE | _ => raise Fail "natToAccessType"

fun natToExceptionType x =
  case Nat.toInt x of
     0 => Int
   | 1 => Mod
   | 2 => TLBL
   | 3 => TLBS
   | 4 => AdEL
   | 5 => AdES
   | 6 => Sys
   | 7 => Bp
   | 8 => ResI
   | 9 => CpU
   | 10 => Ov
   | 11 => Tr
   | 12 => C2E
   | 13 => XTLBRefillL
   | 14 => XTLBRefillS
   | _ => raise Fail "natToExceptionType"

fun IorDToNat x =
  case x of
     INSTRUCTION => 0 | DATA => 1

fun AccessTypeToNat x =
  case x of
     LOAD => 0 | STORE => 1

fun ExceptionTypeToNat x =
  case x of
     Int => 0
   | Mod => 1
   | TLBL => 2
   | TLBS => 3
   | AdEL => 4
   | AdES => 5
   | Sys => 6
   | Bp => 7
   | ResI => 8
   | CpU => 9
   | Ov => 10
   | Tr => 11
   | C2E => 12
   | XTLBRefillL => 13
   | XTLBRefillS => 14

fun IorDToString x =
  case x of
     INSTRUCTION => "INSTRUCTION" | DATA => "DATA"

fun AccessTypeToString x =
  case x of
     LOAD => "LOAD" | STORE => "STORE"

fun ExceptionTypeToString x =
  case x of
     Int => "Int"
   | Mod => "Mod"
   | TLBL => "TLBL"
   | TLBS => "TLBS"
   | AdEL => "AdEL"
   | AdES => "AdES"
   | Sys => "Sys"
   | Bp => "Bp"
   | ResI => "ResI"
   | CpU => "CpU"
   | Ov => "Ov"
   | Tr => "Tr"
   | C2E => "C2E"
   | XTLBRefillL => "XTLBRefillL"
   | XTLBRefillS => "XTLBRefillS"

fun stringToIorD x =
  case x of
     "INSTRUCTION" => INSTRUCTION
   | "DATA" => DATA
   | _ => raise Fail "stringToIorD"

fun stringToAccessType x =
  case x of
     "LOAD" => LOAD
   | "STORE" => STORE
   | _ => raise Fail "stringToAccessType"

fun stringToExceptionType x =
  case x of
     "Int" => Int
   | "Mod" => Mod
   | "TLBL" => TLBL
   | "TLBS" => TLBS
   | "AdEL" => AdEL
   | "AdES" => AdES
   | "Sys" => Sys
   | "Bp" => Bp
   | "ResI" => ResI
   | "CpU" => CpU
   | "Ov" => Ov
   | "Tr" => Tr
   | "C2E" => C2E
   | "XTLBRefillL" => XTLBRefillL
   | "XTLBRefillS" => XTLBRefillS
   | _ => raise Fail "stringToExceptionType"
end

(* -------------------------------------------------------------------------
   Record update functions
   ------------------------------------------------------------------------- *)

fun EntryLo_C_rupd ({C, D, G, PFN, V, entrylo'rst}: EntryLo, x') =
  {C = x', D = D, G = G, PFN = PFN, V = V, entrylo'rst = entrylo'rst}
  : EntryLo

fun EntryLo_D_rupd ({C, D, G, PFN, V, entrylo'rst}: EntryLo, x') =
  {C = C, D = x', G = G, PFN = PFN, V = V, entrylo'rst = entrylo'rst}
  : EntryLo

fun EntryLo_G_rupd ({C, D, G, PFN, V, entrylo'rst}: EntryLo, x') =
  {C = C, D = D, G = x', PFN = PFN, V = V, entrylo'rst = entrylo'rst}
  : EntryLo

fun EntryLo_PFN_rupd ({C, D, G, PFN, V, entrylo'rst}: EntryLo, x') =
  {C = C, D = D, G = G, PFN = x', V = V, entrylo'rst = entrylo'rst}
  : EntryLo

fun EntryLo_V_rupd ({C, D, G, PFN, V, entrylo'rst}: EntryLo, x') =
  {C = C, D = D, G = G, PFN = PFN, V = x', entrylo'rst = entrylo'rst}
  : EntryLo

fun EntryLo_entrylo'rst_rupd ({C, D, G, PFN, V, entrylo'rst}
  : EntryLo, x') =
  {C = C, D = D, G = G, PFN = PFN, V = V, entrylo'rst = x'}: EntryLo

fun TLBEntry_ASID_rupd ({ASID, C0, C1, D0, D1, G, Mask, PFN0, PFN1, R, V0,
   V1, VPN2}: TLBEntry, x') =
  {ASID = x', C0 = C0, C1 = C1, D0 = D0, D1 = D1, G = G, Mask = Mask,
   PFN0 = PFN0, PFN1 = PFN1, R = R, V0 = V0, V1 = V1, VPN2 = VPN2}
  : TLBEntry

fun TLBEntry_C0_rupd ({ASID, C0, C1, D0, D1, G, Mask, PFN0, PFN1, R, V0,
   V1, VPN2}: TLBEntry, x') =
  {ASID = ASID, C0 = x', C1 = C1, D0 = D0, D1 = D1, G = G, Mask = Mask,
   PFN0 = PFN0, PFN1 = PFN1, R = R, V0 = V0, V1 = V1, VPN2 = VPN2}
  : TLBEntry

fun TLBEntry_C1_rupd ({ASID, C0, C1, D0, D1, G, Mask, PFN0, PFN1, R, V0,
   V1, VPN2}: TLBEntry, x') =
  {ASID = ASID, C0 = C0, C1 = x', D0 = D0, D1 = D1, G = G, Mask = Mask,
   PFN0 = PFN0, PFN1 = PFN1, R = R, V0 = V0, V1 = V1, VPN2 = VPN2}
  : TLBEntry

fun TLBEntry_D0_rupd ({ASID, C0, C1, D0, D1, G, Mask, PFN0, PFN1, R, V0,
   V1, VPN2}: TLBEntry, x') =
  {ASID = ASID, C0 = C0, C1 = C1, D0 = x', D1 = D1, G = G, Mask = Mask,
   PFN0 = PFN0, PFN1 = PFN1, R = R, V0 = V0, V1 = V1, VPN2 = VPN2}
  : TLBEntry

fun TLBEntry_D1_rupd ({ASID, C0, C1, D0, D1, G, Mask, PFN0, PFN1, R, V0,
   V1, VPN2}: TLBEntry, x') =
  {ASID = ASID, C0 = C0, C1 = C1, D0 = D0, D1 = x', G = G, Mask = Mask,
   PFN0 = PFN0, PFN1 = PFN1, R = R, V0 = V0, V1 = V1, VPN2 = VPN2}
  : TLBEntry

fun TLBEntry_G_rupd ({ASID, C0, C1, D0, D1, G, Mask, PFN0, PFN1, R, V0,
   V1, VPN2}: TLBEntry, x') =
  {ASID = ASID, C0 = C0, C1 = C1, D0 = D0, D1 = D1, G = x', Mask = Mask,
   PFN0 = PFN0, PFN1 = PFN1, R = R, V0 = V0, V1 = V1, VPN2 = VPN2}
  : TLBEntry

fun TLBEntry_Mask_rupd ({ASID, C0, C1, D0, D1, G, Mask, PFN0, PFN1, R, V0,
   V1, VPN2}: TLBEntry, x') =
  {ASID = ASID, C0 = C0, C1 = C1, D0 = D0, D1 = D1, G = G, Mask = x',
   PFN0 = PFN0, PFN1 = PFN1, R = R, V0 = V0, V1 = V1, VPN2 = VPN2}
  : TLBEntry

fun TLBEntry_PFN0_rupd ({ASID, C0, C1, D0, D1, G, Mask, PFN0, PFN1, R, V0,
   V1, VPN2}: TLBEntry, x') =
  {ASID = ASID, C0 = C0, C1 = C1, D0 = D0, D1 = D1, G = G, Mask = Mask,
   PFN0 = x', PFN1 = PFN1, R = R, V0 = V0, V1 = V1, VPN2 = VPN2}: TLBEntry

fun TLBEntry_PFN1_rupd ({ASID, C0, C1, D0, D1, G, Mask, PFN0, PFN1, R, V0,
   V1, VPN2}: TLBEntry, x') =
  {ASID = ASID, C0 = C0, C1 = C1, D0 = D0, D1 = D1, G = G, Mask = Mask,
   PFN0 = PFN0, PFN1 = x', R = R, V0 = V0, V1 = V1, VPN2 = VPN2}: TLBEntry

fun TLBEntry_R_rupd ({ASID, C0, C1, D0, D1, G, Mask, PFN0, PFN1, R, V0,
   V1, VPN2}: TLBEntry, x') =
  {ASID = ASID, C0 = C0, C1 = C1, D0 = D0, D1 = D1, G = G, Mask = Mask,
   PFN0 = PFN0, PFN1 = PFN1, R = x', V0 = V0, V1 = V1, VPN2 = VPN2}
  : TLBEntry

fun TLBEntry_V0_rupd ({ASID, C0, C1, D0, D1, G, Mask, PFN0, PFN1, R, V0,
   V1, VPN2}: TLBEntry, x') =
  {ASID = ASID, C0 = C0, C1 = C1, D0 = D0, D1 = D1, G = G, Mask = Mask,
   PFN0 = PFN0, PFN1 = PFN1, R = R, V0 = x', V1 = V1, VPN2 = VPN2}
  : TLBEntry

fun TLBEntry_V1_rupd ({ASID, C0, C1, D0, D1, G, Mask, PFN0, PFN1, R, V0,
   V1, VPN2}: TLBEntry, x') =
  {ASID = ASID, C0 = C0, C1 = C1, D0 = D0, D1 = D1, G = G, Mask = Mask,
   PFN0 = PFN0, PFN1 = PFN1, R = R, V0 = V0, V1 = x', VPN2 = VPN2}
  : TLBEntry

fun TLBEntry_VPN2_rupd ({ASID, C0, C1, D0, D1, G, Mask, PFN0, PFN1, R, V0,
   V1, VPN2}: TLBEntry, x') =
  {ASID = ASID, C0 = C0, C1 = C1, D0 = D0, D1 = D1, G = G, Mask = Mask,
   PFN0 = PFN0, PFN1 = PFN1, R = R, V0 = V0, V1 = V1, VPN2 = x'}: TLBEntry

fun Index_Index_rupd ({Index, P, index'rst}: Index, x') =
  {Index = x', P = P, index'rst = index'rst}: Index

fun Index_P_rupd ({Index, P, index'rst}: Index, x') =
  {Index = Index, P = x', index'rst = index'rst}: Index

fun Index_index'rst_rupd ({Index, P, index'rst}: Index, x') =
  {Index = Index, P = P, index'rst = x'}: Index

fun Random_Random_rupd ({Random, random'rst}: Random, x') =
  {Random = x', random'rst = random'rst}: Random

fun Random_random'rst_rupd ({Random, random'rst}: Random, x') =
  {Random = Random, random'rst = x'}: Random

fun Wired_Wired_rupd ({Wired, wired'rst}: Wired, x') =
  {Wired = x', wired'rst = wired'rst}: Wired

fun Wired_wired'rst_rupd ({Wired, wired'rst}: Wired, x') =
  {Wired = Wired, wired'rst = x'}: Wired

fun PageMask_Mask_rupd ({Mask, pagemask'rst}: PageMask, x') =
  {Mask = x', pagemask'rst = pagemask'rst}: PageMask

fun PageMask_pagemask'rst_rupd ({Mask, pagemask'rst}: PageMask, x') =
  {Mask = Mask, pagemask'rst = x'}: PageMask

fun EntryHi_ASID_rupd ({ASID, R, VPN2, entryhi'rst}: EntryHi, x') =
  {ASID = x', R = R, VPN2 = VPN2, entryhi'rst = entryhi'rst}: EntryHi

fun EntryHi_R_rupd ({ASID, R, VPN2, entryhi'rst}: EntryHi, x') =
  {ASID = ASID, R = x', VPN2 = VPN2, entryhi'rst = entryhi'rst}: EntryHi

fun EntryHi_VPN2_rupd ({ASID, R, VPN2, entryhi'rst}: EntryHi, x') =
  {ASID = ASID, R = R, VPN2 = x', entryhi'rst = entryhi'rst}: EntryHi

fun EntryHi_entryhi'rst_rupd ({ASID, R, VPN2, entryhi'rst}: EntryHi, x') =
  {ASID = ASID, R = R, VPN2 = VPN2, entryhi'rst = x'}: EntryHi

fun StatusRegister_BEV_rupd ({BEV, CU0, CU1, CU2, CU3, ERL, EXL, FR, IE,
   IM, KSU, KX, RE, SX, UX, statusregister'rst}: StatusRegister, x') =
  {BEV = x', CU0 = CU0, CU1 = CU1, CU2 = CU2, CU3 = CU3, ERL = ERL,
   EXL = EXL, FR = FR, IE = IE, IM = IM, KSU = KSU, KX = KX, RE = RE,
   SX = SX, UX = UX, statusregister'rst = statusregister'rst}
  : StatusRegister

fun StatusRegister_CU0_rupd ({BEV, CU0, CU1, CU2, CU3, ERL, EXL, FR, IE,
   IM, KSU, KX, RE, SX, UX, statusregister'rst}: StatusRegister, x') =
  {BEV = BEV, CU0 = x', CU1 = CU1, CU2 = CU2, CU3 = CU3, ERL = ERL,
   EXL = EXL, FR = FR, IE = IE, IM = IM, KSU = KSU, KX = KX, RE = RE,
   SX = SX, UX = UX, statusregister'rst = statusregister'rst}
  : StatusRegister

fun StatusRegister_CU1_rupd ({BEV, CU0, CU1, CU2, CU3, ERL, EXL, FR, IE,
   IM, KSU, KX, RE, SX, UX, statusregister'rst}: StatusRegister, x') =
  {BEV = BEV, CU0 = CU0, CU1 = x', CU2 = CU2, CU3 = CU3, ERL = ERL,
   EXL = EXL, FR = FR, IE = IE, IM = IM, KSU = KSU, KX = KX, RE = RE,
   SX = SX, UX = UX, statusregister'rst = statusregister'rst}
  : StatusRegister

fun StatusRegister_CU2_rupd ({BEV, CU0, CU1, CU2, CU3, ERL, EXL, FR, IE,
   IM, KSU, KX, RE, SX, UX, statusregister'rst}: StatusRegister, x') =
  {BEV = BEV, CU0 = CU0, CU1 = CU1, CU2 = x', CU3 = CU3, ERL = ERL,
   EXL = EXL, FR = FR, IE = IE, IM = IM, KSU = KSU, KX = KX, RE = RE,
   SX = SX, UX = UX, statusregister'rst = statusregister'rst}
  : StatusRegister

fun StatusRegister_CU3_rupd ({BEV, CU0, CU1, CU2, CU3, ERL, EXL, FR, IE,
   IM, KSU, KX, RE, SX, UX, statusregister'rst}: StatusRegister, x') =
  {BEV = BEV, CU0 = CU0, CU1 = CU1, CU2 = CU2, CU3 = x', ERL = ERL,
   EXL = EXL, FR = FR, IE = IE, IM = IM, KSU = KSU, KX = KX, RE = RE,
   SX = SX, UX = UX, statusregister'rst = statusregister'rst}
  : StatusRegister

fun StatusRegister_ERL_rupd ({BEV, CU0, CU1, CU2, CU3, ERL, EXL, FR, IE,
   IM, KSU, KX, RE, SX, UX, statusregister'rst}: StatusRegister, x') =
  {BEV = BEV, CU0 = CU0, CU1 = CU1, CU2 = CU2, CU3 = CU3, ERL = x',
   EXL = EXL, FR = FR, IE = IE, IM = IM, KSU = KSU, KX = KX, RE = RE,
   SX = SX, UX = UX, statusregister'rst = statusregister'rst}
  : StatusRegister

fun StatusRegister_EXL_rupd ({BEV, CU0, CU1, CU2, CU3, ERL, EXL, FR, IE,
   IM, KSU, KX, RE, SX, UX, statusregister'rst}: StatusRegister, x') =
  {BEV = BEV, CU0 = CU0, CU1 = CU1, CU2 = CU2, CU3 = CU3, ERL = ERL,
   EXL = x', FR = FR, IE = IE, IM = IM, KSU = KSU, KX = KX, RE = RE,
   SX = SX, UX = UX, statusregister'rst = statusregister'rst}
  : StatusRegister

fun StatusRegister_FR_rupd ({BEV, CU0, CU1, CU2, CU3, ERL, EXL, FR, IE,
   IM, KSU, KX, RE, SX, UX, statusregister'rst}: StatusRegister, x') =
  {BEV = BEV, CU0 = CU0, CU1 = CU1, CU2 = CU2, CU3 = CU3, ERL = ERL,
   EXL = EXL, FR = x', IE = IE, IM = IM, KSU = KSU, KX = KX, RE = RE,
   SX = SX, UX = UX, statusregister'rst = statusregister'rst}
  : StatusRegister

fun StatusRegister_IE_rupd ({BEV, CU0, CU1, CU2, CU3, ERL, EXL, FR, IE,
   IM, KSU, KX, RE, SX, UX, statusregister'rst}: StatusRegister, x') =
  {BEV = BEV, CU0 = CU0, CU1 = CU1, CU2 = CU2, CU3 = CU3, ERL = ERL,
   EXL = EXL, FR = FR, IE = x', IM = IM, KSU = KSU, KX = KX, RE = RE,
   SX = SX, UX = UX, statusregister'rst = statusregister'rst}
  : StatusRegister

fun StatusRegister_IM_rupd ({BEV, CU0, CU1, CU2, CU3, ERL, EXL, FR, IE,
   IM, KSU, KX, RE, SX, UX, statusregister'rst}: StatusRegister, x') =
  {BEV = BEV, CU0 = CU0, CU1 = CU1, CU2 = CU2, CU3 = CU3, ERL = ERL,
   EXL = EXL, FR = FR, IE = IE, IM = x', KSU = KSU, KX = KX, RE = RE,
   SX = SX, UX = UX, statusregister'rst = statusregister'rst}
  : StatusRegister

fun StatusRegister_KSU_rupd ({BEV, CU0, CU1, CU2, CU3, ERL, EXL, FR, IE,
   IM, KSU, KX, RE, SX, UX, statusregister'rst}: StatusRegister, x') =
  {BEV = BEV, CU0 = CU0, CU1 = CU1, CU2 = CU2, CU3 = CU3, ERL = ERL,
   EXL = EXL, FR = FR, IE = IE, IM = IM, KSU = x', KX = KX, RE = RE,
   SX = SX, UX = UX, statusregister'rst = statusregister'rst}
  : StatusRegister

fun StatusRegister_KX_rupd ({BEV, CU0, CU1, CU2, CU3, ERL, EXL, FR, IE,
   IM, KSU, KX, RE, SX, UX, statusregister'rst}: StatusRegister, x') =
  {BEV = BEV, CU0 = CU0, CU1 = CU1, CU2 = CU2, CU3 = CU3, ERL = ERL,
   EXL = EXL, FR = FR, IE = IE, IM = IM, KSU = KSU, KX = x', RE = RE,
   SX = SX, UX = UX, statusregister'rst = statusregister'rst}
  : StatusRegister

fun StatusRegister_RE_rupd ({BEV, CU0, CU1, CU2, CU3, ERL, EXL, FR, IE,
   IM, KSU, KX, RE, SX, UX, statusregister'rst}: StatusRegister, x') =
  {BEV = BEV, CU0 = CU0, CU1 = CU1, CU2 = CU2, CU3 = CU3, ERL = ERL,
   EXL = EXL, FR = FR, IE = IE, IM = IM, KSU = KSU, KX = KX, RE = x',
   SX = SX, UX = UX, statusregister'rst = statusregister'rst}
  : StatusRegister

fun StatusRegister_SX_rupd ({BEV, CU0, CU1, CU2, CU3, ERL, EXL, FR, IE,
   IM, KSU, KX, RE, SX, UX, statusregister'rst}: StatusRegister, x') =
  {BEV = BEV, CU0 = CU0, CU1 = CU1, CU2 = CU2, CU3 = CU3, ERL = ERL,
   EXL = EXL, FR = FR, IE = IE, IM = IM, KSU = KSU, KX = KX, RE = RE,
   SX = x', UX = UX, statusregister'rst = statusregister'rst}
  : StatusRegister

fun StatusRegister_UX_rupd ({BEV, CU0, CU1, CU2, CU3, ERL, EXL, FR, IE,
   IM, KSU, KX, RE, SX, UX, statusregister'rst}: StatusRegister, x') =
  {BEV = BEV, CU0 = CU0, CU1 = CU1, CU2 = CU2, CU3 = CU3, ERL = ERL,
   EXL = EXL, FR = FR, IE = IE, IM = IM, KSU = KSU, KX = KX, RE = RE,
   SX = SX, UX = x', statusregister'rst = statusregister'rst}
  : StatusRegister

fun StatusRegister_statusregister'rst_rupd ({BEV, CU0, CU1, CU2, CU3, ERL,
   EXL, FR, IE, IM, KSU, KX, RE, SX, UX, statusregister'rst}
  : StatusRegister, x') =
  {BEV = BEV, CU0 = CU0, CU1 = CU1, CU2 = CU2, CU3 = CU3, ERL = ERL,
   EXL = EXL, FR = FR, IE = IE, IM = IM, KSU = KSU, KX = KX, RE = RE,
   SX = SX, UX = UX, statusregister'rst = x'}: StatusRegister

fun ConfigRegister_AR_rupd ({AR, AT, BE, K0, M, MT, configregister'rst}
  : ConfigRegister, x') =
  {AR = x', AT = AT, BE = BE, K0 = K0, M = M, MT = MT,
   configregister'rst = configregister'rst}: ConfigRegister

fun ConfigRegister_AT_rupd ({AR, AT, BE, K0, M, MT, configregister'rst}
  : ConfigRegister, x') =
  {AR = AR, AT = x', BE = BE, K0 = K0, M = M, MT = MT,
   configregister'rst = configregister'rst}: ConfigRegister

fun ConfigRegister_BE_rupd ({AR, AT, BE, K0, M, MT, configregister'rst}
  : ConfigRegister, x') =
  {AR = AR, AT = AT, BE = x', K0 = K0, M = M, MT = MT,
   configregister'rst = configregister'rst}: ConfigRegister

fun ConfigRegister_K0_rupd ({AR, AT, BE, K0, M, MT, configregister'rst}
  : ConfigRegister, x') =
  {AR = AR, AT = AT, BE = BE, K0 = x', M = M, MT = MT,
   configregister'rst = configregister'rst}: ConfigRegister

fun ConfigRegister_M_rupd ({AR, AT, BE, K0, M, MT, configregister'rst}
  : ConfigRegister, x') =
  {AR = AR, AT = AT, BE = BE, K0 = K0, M = x', MT = MT,
   configregister'rst = configregister'rst}: ConfigRegister

fun ConfigRegister_MT_rupd ({AR, AT, BE, K0, M, MT, configregister'rst}
  : ConfigRegister, x') =
  {AR = AR, AT = AT, BE = BE, K0 = K0, M = M, MT = x',
   configregister'rst = configregister'rst}: ConfigRegister

fun ConfigRegister_configregister'rst_rupd ({AR, AT, BE, K0, M, MT,
   configregister'rst}: ConfigRegister, x') =
  {AR = AR, AT = AT, BE = BE, K0 = K0, M = M, MT = MT,
   configregister'rst = x'}: ConfigRegister

fun ConfigRegister1_C2_rupd ({C2, CA, DA, DL, DS, EP, FP, IA, IL, IS, M,
   MD, MMUSize, PCR, WR}: ConfigRegister1, x') =
  {C2 = x', CA = CA, DA = DA, DL = DL, DS = DS, EP = EP, FP = FP, IA = IA,
   IL = IL, IS = IS, M = M, MD = MD, MMUSize = MMUSize, PCR = PCR, WR = WR}
  : ConfigRegister1

fun ConfigRegister1_CA_rupd ({C2, CA, DA, DL, DS, EP, FP, IA, IL, IS, M,
   MD, MMUSize, PCR, WR}: ConfigRegister1, x') =
  {C2 = C2, CA = x', DA = DA, DL = DL, DS = DS, EP = EP, FP = FP, IA = IA,
   IL = IL, IS = IS, M = M, MD = MD, MMUSize = MMUSize, PCR = PCR, WR = WR}
  : ConfigRegister1

fun ConfigRegister1_DA_rupd ({C2, CA, DA, DL, DS, EP, FP, IA, IL, IS, M,
   MD, MMUSize, PCR, WR}: ConfigRegister1, x') =
  {C2 = C2, CA = CA, DA = x', DL = DL, DS = DS, EP = EP, FP = FP, IA = IA,
   IL = IL, IS = IS, M = M, MD = MD, MMUSize = MMUSize, PCR = PCR, WR = WR}
  : ConfigRegister1

fun ConfigRegister1_DL_rupd ({C2, CA, DA, DL, DS, EP, FP, IA, IL, IS, M,
   MD, MMUSize, PCR, WR}: ConfigRegister1, x') =
  {C2 = C2, CA = CA, DA = DA, DL = x', DS = DS, EP = EP, FP = FP, IA = IA,
   IL = IL, IS = IS, M = M, MD = MD, MMUSize = MMUSize, PCR = PCR, WR = WR}
  : ConfigRegister1

fun ConfigRegister1_DS_rupd ({C2, CA, DA, DL, DS, EP, FP, IA, IL, IS, M,
   MD, MMUSize, PCR, WR}: ConfigRegister1, x') =
  {C2 = C2, CA = CA, DA = DA, DL = DL, DS = x', EP = EP, FP = FP, IA = IA,
   IL = IL, IS = IS, M = M, MD = MD, MMUSize = MMUSize, PCR = PCR, WR = WR}
  : ConfigRegister1

fun ConfigRegister1_EP_rupd ({C2, CA, DA, DL, DS, EP, FP, IA, IL, IS, M,
   MD, MMUSize, PCR, WR}: ConfigRegister1, x') =
  {C2 = C2, CA = CA, DA = DA, DL = DL, DS = DS, EP = x', FP = FP, IA = IA,
   IL = IL, IS = IS, M = M, MD = MD, MMUSize = MMUSize, PCR = PCR, WR = WR}
  : ConfigRegister1

fun ConfigRegister1_FP_rupd ({C2, CA, DA, DL, DS, EP, FP, IA, IL, IS, M,
   MD, MMUSize, PCR, WR}: ConfigRegister1, x') =
  {C2 = C2, CA = CA, DA = DA, DL = DL, DS = DS, EP = EP, FP = x', IA = IA,
   IL = IL, IS = IS, M = M, MD = MD, MMUSize = MMUSize, PCR = PCR, WR = WR}
  : ConfigRegister1

fun ConfigRegister1_IA_rupd ({C2, CA, DA, DL, DS, EP, FP, IA, IL, IS, M,
   MD, MMUSize, PCR, WR}: ConfigRegister1, x') =
  {C2 = C2, CA = CA, DA = DA, DL = DL, DS = DS, EP = EP, FP = FP, IA = x',
   IL = IL, IS = IS, M = M, MD = MD, MMUSize = MMUSize, PCR = PCR, WR = WR}
  : ConfigRegister1

fun ConfigRegister1_IL_rupd ({C2, CA, DA, DL, DS, EP, FP, IA, IL, IS, M,
   MD, MMUSize, PCR, WR}: ConfigRegister1, x') =
  {C2 = C2, CA = CA, DA = DA, DL = DL, DS = DS, EP = EP, FP = FP, IA = IA,
   IL = x', IS = IS, M = M, MD = MD, MMUSize = MMUSize, PCR = PCR, WR = WR}
  : ConfigRegister1

fun ConfigRegister1_IS_rupd ({C2, CA, DA, DL, DS, EP, FP, IA, IL, IS, M,
   MD, MMUSize, PCR, WR}: ConfigRegister1, x') =
  {C2 = C2, CA = CA, DA = DA, DL = DL, DS = DS, EP = EP, FP = FP, IA = IA,
   IL = IL, IS = x', M = M, MD = MD, MMUSize = MMUSize, PCR = PCR, WR = WR}
  : ConfigRegister1

fun ConfigRegister1_M_rupd ({C2, CA, DA, DL, DS, EP, FP, IA, IL, IS, M,
   MD, MMUSize, PCR, WR}: ConfigRegister1, x') =
  {C2 = C2, CA = CA, DA = DA, DL = DL, DS = DS, EP = EP, FP = FP, IA = IA,
   IL = IL, IS = IS, M = x', MD = MD, MMUSize = MMUSize, PCR = PCR,
   WR = WR}: ConfigRegister1

fun ConfigRegister1_MD_rupd ({C2, CA, DA, DL, DS, EP, FP, IA, IL, IS, M,
   MD, MMUSize, PCR, WR}: ConfigRegister1, x') =
  {C2 = C2, CA = CA, DA = DA, DL = DL, DS = DS, EP = EP, FP = FP, IA = IA,
   IL = IL, IS = IS, M = M, MD = x', MMUSize = MMUSize, PCR = PCR, WR = WR}
  : ConfigRegister1

fun ConfigRegister1_MMUSize_rupd ({C2, CA, DA, DL, DS, EP, FP, IA, IL, IS,
   M, MD, MMUSize, PCR, WR}: ConfigRegister1, x') =
  {C2 = C2, CA = CA, DA = DA, DL = DL, DS = DS, EP = EP, FP = FP, IA = IA,
   IL = IL, IS = IS, M = M, MD = MD, MMUSize = x', PCR = PCR, WR = WR}
  : ConfigRegister1

fun ConfigRegister1_PCR_rupd ({C2, CA, DA, DL, DS, EP, FP, IA, IL, IS, M,
   MD, MMUSize, PCR, WR}: ConfigRegister1, x') =
  {C2 = C2, CA = CA, DA = DA, DL = DL, DS = DS, EP = EP, FP = FP, IA = IA,
   IL = IL, IS = IS, M = M, MD = MD, MMUSize = MMUSize, PCR = x', WR = WR}
  : ConfigRegister1

fun ConfigRegister1_WR_rupd ({C2, CA, DA, DL, DS, EP, FP, IA, IL, IS, M,
   MD, MMUSize, PCR, WR}: ConfigRegister1, x') =
  {C2 = C2, CA = CA, DA = DA, DL = DL, DS = DS, EP = EP, FP = FP, IA = IA,
   IL = IL, IS = IS, M = M, MD = MD, MMUSize = MMUSize, PCR = PCR, WR = x'}
  : ConfigRegister1

fun ConfigRegister2_M_rupd ({M, SA, SL, SS, SU, TA, TL, TS, TU}
  : ConfigRegister2, x') =
  {M = x', SA = SA, SL = SL, SS = SS, SU = SU, TA = TA, TL = TL, TS = TS,
   TU = TU}: ConfigRegister2

fun ConfigRegister2_SA_rupd ({M, SA, SL, SS, SU, TA, TL, TS, TU}
  : ConfigRegister2, x') =
  {M = M, SA = x', SL = SL, SS = SS, SU = SU, TA = TA, TL = TL, TS = TS,
   TU = TU}: ConfigRegister2

fun ConfigRegister2_SL_rupd ({M, SA, SL, SS, SU, TA, TL, TS, TU}
  : ConfigRegister2, x') =
  {M = M, SA = SA, SL = x', SS = SS, SU = SU, TA = TA, TL = TL, TS = TS,
   TU = TU}: ConfigRegister2

fun ConfigRegister2_SS_rupd ({M, SA, SL, SS, SU, TA, TL, TS, TU}
  : ConfigRegister2, x') =
  {M = M, SA = SA, SL = SL, SS = x', SU = SU, TA = TA, TL = TL, TS = TS,
   TU = TU}: ConfigRegister2

fun ConfigRegister2_SU_rupd ({M, SA, SL, SS, SU, TA, TL, TS, TU}
  : ConfigRegister2, x') =
  {M = M, SA = SA, SL = SL, SS = SS, SU = x', TA = TA, TL = TL, TS = TS,
   TU = TU}: ConfigRegister2

fun ConfigRegister2_TA_rupd ({M, SA, SL, SS, SU, TA, TL, TS, TU}
  : ConfigRegister2, x') =
  {M = M, SA = SA, SL = SL, SS = SS, SU = SU, TA = x', TL = TL, TS = TS,
   TU = TU}: ConfigRegister2

fun ConfigRegister2_TL_rupd ({M, SA, SL, SS, SU, TA, TL, TS, TU}
  : ConfigRegister2, x') =
  {M = M, SA = SA, SL = SL, SS = SS, SU = SU, TA = TA, TL = x', TS = TS,
   TU = TU}: ConfigRegister2

fun ConfigRegister2_TS_rupd ({M, SA, SL, SS, SU, TA, TL, TS, TU}
  : ConfigRegister2, x') =
  {M = M, SA = SA, SL = SL, SS = SS, SU = SU, TA = TA, TL = TL, TS = x',
   TU = TU}: ConfigRegister2

fun ConfigRegister2_TU_rupd ({M, SA, SL, SS, SU, TA, TL, TS, TU}
  : ConfigRegister2, x') =
  {M = M, SA = SA, SL = SL, SS = SS, SU = SU, TA = TA, TL = TL, TS = TS,
   TU = x'}: ConfigRegister2

fun ConfigRegister3_DSPP_rupd ({DSPP, LPA, M, MT, SM, SP, TL, ULRI, VEIC,
   VInt, configregister3'rst}: ConfigRegister3, x') =
  {DSPP = x', LPA = LPA, M = M, MT = MT, SM = SM, SP = SP, TL = TL,
   ULRI = ULRI, VEIC = VEIC, VInt = VInt,
   configregister3'rst = configregister3'rst}: ConfigRegister3

fun ConfigRegister3_LPA_rupd ({DSPP, LPA, M, MT, SM, SP, TL, ULRI, VEIC,
   VInt, configregister3'rst}: ConfigRegister3, x') =
  {DSPP = DSPP, LPA = x', M = M, MT = MT, SM = SM, SP = SP, TL = TL,
   ULRI = ULRI, VEIC = VEIC, VInt = VInt,
   configregister3'rst = configregister3'rst}: ConfigRegister3

fun ConfigRegister3_M_rupd ({DSPP, LPA, M, MT, SM, SP, TL, ULRI, VEIC,
   VInt, configregister3'rst}: ConfigRegister3, x') =
  {DSPP = DSPP, LPA = LPA, M = x', MT = MT, SM = SM, SP = SP, TL = TL,
   ULRI = ULRI, VEIC = VEIC, VInt = VInt,
   configregister3'rst = configregister3'rst}: ConfigRegister3

fun ConfigRegister3_MT_rupd ({DSPP, LPA, M, MT, SM, SP, TL, ULRI, VEIC,
   VInt, configregister3'rst}: ConfigRegister3, x') =
  {DSPP = DSPP, LPA = LPA, M = M, MT = x', SM = SM, SP = SP, TL = TL,
   ULRI = ULRI, VEIC = VEIC, VInt = VInt,
   configregister3'rst = configregister3'rst}: ConfigRegister3

fun ConfigRegister3_SM_rupd ({DSPP, LPA, M, MT, SM, SP, TL, ULRI, VEIC,
   VInt, configregister3'rst}: ConfigRegister3, x') =
  {DSPP = DSPP, LPA = LPA, M = M, MT = MT, SM = x', SP = SP, TL = TL,
   ULRI = ULRI, VEIC = VEIC, VInt = VInt,
   configregister3'rst = configregister3'rst}: ConfigRegister3

fun ConfigRegister3_SP_rupd ({DSPP, LPA, M, MT, SM, SP, TL, ULRI, VEIC,
   VInt, configregister3'rst}: ConfigRegister3, x') =
  {DSPP = DSPP, LPA = LPA, M = M, MT = MT, SM = SM, SP = x', TL = TL,
   ULRI = ULRI, VEIC = VEIC, VInt = VInt,
   configregister3'rst = configregister3'rst}: ConfigRegister3

fun ConfigRegister3_TL_rupd ({DSPP, LPA, M, MT, SM, SP, TL, ULRI, VEIC,
   VInt, configregister3'rst}: ConfigRegister3, x') =
  {DSPP = DSPP, LPA = LPA, M = M, MT = MT, SM = SM, SP = SP, TL = x',
   ULRI = ULRI, VEIC = VEIC, VInt = VInt,
   configregister3'rst = configregister3'rst}: ConfigRegister3

fun ConfigRegister3_ULRI_rupd ({DSPP, LPA, M, MT, SM, SP, TL, ULRI, VEIC,
   VInt, configregister3'rst}: ConfigRegister3, x') =
  {DSPP = DSPP, LPA = LPA, M = M, MT = MT, SM = SM, SP = SP, TL = TL,
   ULRI = x', VEIC = VEIC, VInt = VInt,
   configregister3'rst = configregister3'rst}: ConfigRegister3

fun ConfigRegister3_VEIC_rupd ({DSPP, LPA, M, MT, SM, SP, TL, ULRI, VEIC,
   VInt, configregister3'rst}: ConfigRegister3, x') =
  {DSPP = DSPP, LPA = LPA, M = M, MT = MT, SM = SM, SP = SP, TL = TL,
   ULRI = ULRI, VEIC = x', VInt = VInt,
   configregister3'rst = configregister3'rst}: ConfigRegister3

fun ConfigRegister3_VInt_rupd ({DSPP, LPA, M, MT, SM, SP, TL, ULRI, VEIC,
   VInt, configregister3'rst}: ConfigRegister3, x') =
  {DSPP = DSPP, LPA = LPA, M = M, MT = MT, SM = SM, SP = SP, TL = TL,
   ULRI = ULRI, VEIC = VEIC, VInt = x',
   configregister3'rst = configregister3'rst}: ConfigRegister3

fun ConfigRegister3_configregister3'rst_rupd ({DSPP, LPA, M, MT, SM, SP,
   TL, ULRI, VEIC, VInt, configregister3'rst}: ConfigRegister3, x') =
  {DSPP = DSPP, LPA = LPA, M = M, MT = MT, SM = SM, SP = SP, TL = TL,
   ULRI = ULRI, VEIC = VEIC, VInt = VInt, configregister3'rst = x'}
  : ConfigRegister3

fun ConfigRegister6_LTLB_rupd ({LTLB, TLBSize, configregister6'rst}
  : ConfigRegister6, x') =
  {LTLB = x', TLBSize = TLBSize, configregister6'rst = configregister6'rst}
  : ConfigRegister6

fun ConfigRegister6_TLBSize_rupd ({LTLB, TLBSize, configregister6'rst}
  : ConfigRegister6, x') =
  {LTLB = LTLB, TLBSize = x', configregister6'rst = configregister6'rst}
  : ConfigRegister6

fun ConfigRegister6_configregister6'rst_rupd ({LTLB, TLBSize,
   configregister6'rst}: ConfigRegister6, x') =
  {LTLB = LTLB, TLBSize = TLBSize, configregister6'rst = x'}
  : ConfigRegister6

fun CauseRegister_BD_rupd ({BD, CE, ExcCode, IP, TI, causeregister'rst}
  : CauseRegister, x') =
  {BD = x', CE = CE, ExcCode = ExcCode, IP = IP, TI = TI,
   causeregister'rst = causeregister'rst}: CauseRegister

fun CauseRegister_CE_rupd ({BD, CE, ExcCode, IP, TI, causeregister'rst}
  : CauseRegister, x') =
  {BD = BD, CE = x', ExcCode = ExcCode, IP = IP, TI = TI,
   causeregister'rst = causeregister'rst}: CauseRegister

fun CauseRegister_ExcCode_rupd ({BD, CE, ExcCode, IP, TI,
   causeregister'rst}: CauseRegister, x') =
  {BD = BD, CE = CE, ExcCode = x', IP = IP, TI = TI,
   causeregister'rst = causeregister'rst}: CauseRegister

fun CauseRegister_IP_rupd ({BD, CE, ExcCode, IP, TI, causeregister'rst}
  : CauseRegister, x') =
  {BD = BD, CE = CE, ExcCode = ExcCode, IP = x', TI = TI,
   causeregister'rst = causeregister'rst}: CauseRegister

fun CauseRegister_TI_rupd ({BD, CE, ExcCode, IP, TI, causeregister'rst}
  : CauseRegister, x') =
  {BD = BD, CE = CE, ExcCode = ExcCode, IP = IP, TI = x',
   causeregister'rst = causeregister'rst}: CauseRegister

fun CauseRegister_causeregister'rst_rupd ({BD, CE, ExcCode, IP, TI,
   causeregister'rst}: CauseRegister, x') =
  {BD = BD, CE = CE, ExcCode = ExcCode, IP = IP, TI = TI,
   causeregister'rst = x'}: CauseRegister

fun Context_BadVPN2_rupd ({BadVPN2, PTEBase, context'rst}: Context, x') =
  {BadVPN2 = x', PTEBase = PTEBase, context'rst = context'rst}: Context

fun Context_PTEBase_rupd ({BadVPN2, PTEBase, context'rst}: Context, x') =
  {BadVPN2 = BadVPN2, PTEBase = x', context'rst = context'rst}: Context

fun Context_context'rst_rupd ({BadVPN2, PTEBase, context'rst}
  : Context, x') =
  {BadVPN2 = BadVPN2, PTEBase = PTEBase, context'rst = x'}: Context

fun XContext_BadVPN2_rupd ({BadVPN2, PTEBase, R, xcontext'rst}
  : XContext, x') =
  {BadVPN2 = x', PTEBase = PTEBase, R = R, xcontext'rst = xcontext'rst}
  : XContext

fun XContext_PTEBase_rupd ({BadVPN2, PTEBase, R, xcontext'rst}
  : XContext, x') =
  {BadVPN2 = BadVPN2, PTEBase = x', R = R, xcontext'rst = xcontext'rst}
  : XContext

fun XContext_R_rupd ({BadVPN2, PTEBase, R, xcontext'rst}: XContext, x') =
  {BadVPN2 = BadVPN2, PTEBase = PTEBase, R = x',
   xcontext'rst = xcontext'rst}: XContext

fun XContext_xcontext'rst_rupd ({BadVPN2, PTEBase, R, xcontext'rst}
  : XContext, x') =
  {BadVPN2 = BadVPN2, PTEBase = PTEBase, R = R, xcontext'rst = x'}
  : XContext

fun HWREna_CC_rupd ({CC, CCRes, CPUNum, UL, hwrena'rst}: HWREna, x') =
  {CC = x', CCRes = CCRes, CPUNum = CPUNum, UL = UL,
   hwrena'rst = hwrena'rst}: HWREna

fun HWREna_CCRes_rupd ({CC, CCRes, CPUNum, UL, hwrena'rst}: HWREna, x') =
  {CC = CC, CCRes = x', CPUNum = CPUNum, UL = UL, hwrena'rst = hwrena'rst}
  : HWREna

fun HWREna_CPUNum_rupd ({CC, CCRes, CPUNum, UL, hwrena'rst}: HWREna, x') =
  {CC = CC, CCRes = CCRes, CPUNum = x', UL = UL, hwrena'rst = hwrena'rst}
  : HWREna

fun HWREna_UL_rupd ({CC, CCRes, CPUNum, UL, hwrena'rst}: HWREna, x') =
  {CC = CC, CCRes = CCRes, CPUNum = CPUNum, UL = x',
   hwrena'rst = hwrena'rst}: HWREna

fun HWREna_hwrena'rst_rupd ({CC, CCRes, CPUNum, UL, hwrena'rst}
  : HWREna, x') =
  {CC = CC, CCRes = CCRes, CPUNum = CPUNum, UL = UL, hwrena'rst = x'}
  : HWREna

fun CP0_BadVAddr_rupd ({BadVAddr, Cause, Compare, Config, Config1,
   Config2, Config3, Config6, Context, Count, Debug, EPC, EntryHi,
   EntryLo0, EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId,
   PageMask, Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = x', Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_Cause_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = x', Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_Compare_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = x', Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_Config_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = x',
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_Config1_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = x', Config2 = Config2, Config3 = Config3, Config6 = Config6,
   Context = Context, Count = Count, Debug = Debug, EPC = EPC,
   EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_Config2_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = x', Config3 = Config3, Config6 = Config6,
   Context = Context, Count = Count, Debug = Debug, EPC = EPC,
   EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_Config3_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = x', Config6 = Config6,
   Context = Context, Count = Count, Debug = Debug, EPC = EPC,
   EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_Config6_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3, Config6 = x',
   Context = Context, Count = Count, Debug = Debug, EPC = EPC,
   EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_Context_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = x', Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_Count_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = x', Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_Debug_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = x',
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_EPC_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = x', EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_EntryHi_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = x', EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_EntryLo0_rupd ({BadVAddr, Cause, Compare, Config, Config1,
   Config2, Config3, Config6, Context, Count, Debug, EPC, EntryHi,
   EntryLo0, EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId,
   PageMask, Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = x', EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_EntryLo1_rupd ({BadVAddr, Cause, Compare, Config, Config1,
   Config2, Config3, Config6, Context, Count, Debug, EPC, EntryHi,
   EntryLo0, EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId,
   PageMask, Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = x',
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_ErrCtl_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = x', ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_ErrorEPC_rupd ({BadVAddr, Cause, Compare, Config, Config1,
   Config2, Config3, Config6, Context, Count, Debug, EPC, EntryHi,
   EntryLo0, EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId,
   PageMask, Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = x', HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_HWREna_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = x', Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_Index_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = x',
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_LLAddr_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = x', PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_PRId_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = x', PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_PageMask_rupd ({BadVAddr, Cause, Compare, Config, Config1,
   Config2, Config3, Config6, Context, Count, Debug, EPC, EntryHi,
   EntryLo0, EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId,
   PageMask, Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = x', Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_Random_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = x',
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_Status_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = x', UsrLocal = UsrLocal, Wired = Wired, XContext = XContext}
  : CP0

fun CP0_UsrLocal_rupd ({BadVAddr, Cause, Compare, Config, Config1,
   Config2, Config3, Config6, Context, Count, Debug, EPC, EntryHi,
   EntryLo0, EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId,
   PageMask, Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = x', Wired = Wired, XContext = XContext}
  : CP0

fun CP0_Wired_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = x', XContext = XContext}
  : CP0

fun CP0_XContext_rupd ({BadVAddr, Cause, Compare, Config, Config1,
   Config2, Config3, Config6, Context, Count, Debug, EPC, EntryHi,
   EntryLo0, EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId,
   PageMask, Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired, XContext = x'}
  : CP0

fun PIC_Config_Reg_EN_rupd ({EN, IRQ, pic_config_reg'rst}
  : PIC_Config_Reg, x') =
  {EN = x', IRQ = IRQ, pic_config_reg'rst = pic_config_reg'rst}
  : PIC_Config_Reg

fun PIC_Config_Reg_IRQ_rupd ({EN, IRQ, pic_config_reg'rst}
  : PIC_Config_Reg, x') =
  {EN = EN, IRQ = x', pic_config_reg'rst = pic_config_reg'rst}
  : PIC_Config_Reg

fun PIC_Config_Reg_pic_config_reg'rst_rupd ({EN, IRQ, pic_config_reg'rst}
  : PIC_Config_Reg, x') = {EN = EN, IRQ = IRQ, pic_config_reg'rst = x'}
  : PIC_Config_Reg

fun JTAG_UART_data_RAVAIL_rupd ({RAVAIL, RVALID, RW_DATA,
   jtag_uart_data'rst}: JTAG_UART_data, x') =
  {RAVAIL = x', RVALID = RVALID, RW_DATA = RW_DATA,
   jtag_uart_data'rst = jtag_uart_data'rst}: JTAG_UART_data

fun JTAG_UART_data_RVALID_rupd ({RAVAIL, RVALID, RW_DATA,
   jtag_uart_data'rst}: JTAG_UART_data, x') =
  {RAVAIL = RAVAIL, RVALID = x', RW_DATA = RW_DATA,
   jtag_uart_data'rst = jtag_uart_data'rst}: JTAG_UART_data

fun JTAG_UART_data_RW_DATA_rupd ({RAVAIL, RVALID, RW_DATA,
   jtag_uart_data'rst}: JTAG_UART_data, x') =
  {RAVAIL = RAVAIL, RVALID = RVALID, RW_DATA = x',
   jtag_uart_data'rst = jtag_uart_data'rst}: JTAG_UART_data

fun JTAG_UART_data_jtag_uart_data'rst_rupd ({RAVAIL, RVALID, RW_DATA,
   jtag_uart_data'rst}: JTAG_UART_data, x') =
  {RAVAIL = RAVAIL, RVALID = RVALID, RW_DATA = RW_DATA,
   jtag_uart_data'rst = x'}: JTAG_UART_data

fun JTAG_UART_control_AC_rupd ({AC, RE, RI, WE, WI, WSPACE,
   jtag_uart_control'rst}: JTAG_UART_control, x') =
  {AC = x', RE = RE, RI = RI, WE = WE, WI = WI, WSPACE = WSPACE,
   jtag_uart_control'rst = jtag_uart_control'rst}: JTAG_UART_control

fun JTAG_UART_control_RE_rupd ({AC, RE, RI, WE, WI, WSPACE,
   jtag_uart_control'rst}: JTAG_UART_control, x') =
  {AC = AC, RE = x', RI = RI, WE = WE, WI = WI, WSPACE = WSPACE,
   jtag_uart_control'rst = jtag_uart_control'rst}: JTAG_UART_control

fun JTAG_UART_control_RI_rupd ({AC, RE, RI, WE, WI, WSPACE,
   jtag_uart_control'rst}: JTAG_UART_control, x') =
  {AC = AC, RE = RE, RI = x', WE = WE, WI = WI, WSPACE = WSPACE,
   jtag_uart_control'rst = jtag_uart_control'rst}: JTAG_UART_control

fun JTAG_UART_control_WE_rupd ({AC, RE, RI, WE, WI, WSPACE,
   jtag_uart_control'rst}: JTAG_UART_control, x') =
  {AC = AC, RE = RE, RI = RI, WE = x', WI = WI, WSPACE = WSPACE,
   jtag_uart_control'rst = jtag_uart_control'rst}: JTAG_UART_control

fun JTAG_UART_control_WI_rupd ({AC, RE, RI, WE, WI, WSPACE,
   jtag_uart_control'rst}: JTAG_UART_control, x') =
  {AC = AC, RE = RE, RI = RI, WE = WE, WI = x', WSPACE = WSPACE,
   jtag_uart_control'rst = jtag_uart_control'rst}: JTAG_UART_control

fun JTAG_UART_control_WSPACE_rupd ({AC, RE, RI, WE, WI, WSPACE,
   jtag_uart_control'rst}: JTAG_UART_control, x') =
  {AC = AC, RE = RE, RI = RI, WE = WE, WI = WI, WSPACE = x',
   jtag_uart_control'rst = jtag_uart_control'rst}: JTAG_UART_control

fun JTAG_UART_control_jtag_uart_control'rst_rupd ({AC, RE, RI, WE, WI,
   WSPACE, jtag_uart_control'rst}: JTAG_UART_control, x') =
  {AC = AC, RE = RE, RI = RI, WE = WE, WI = WI, WSPACE = WSPACE,
   jtag_uart_control'rst = x'}: JTAG_UART_control

fun JTAG_UART_base_address_rupd ({base_address, control, data, read_fifo,
   read_threshold, write_fifo, write_threshold}: JTAG_UART, x') =
  {base_address = x', control = control, data = data,
   read_fifo = read_fifo, read_threshold = read_threshold,
   write_fifo = write_fifo, write_threshold = write_threshold}: JTAG_UART

fun JTAG_UART_control_rupd ({base_address, control, data, read_fifo,
   read_threshold, write_fifo, write_threshold}: JTAG_UART, x') =
  {base_address = base_address, control = x', data = data,
   read_fifo = read_fifo, read_threshold = read_threshold,
   write_fifo = write_fifo, write_threshold = write_threshold}: JTAG_UART

fun JTAG_UART_data_rupd ({base_address, control, data, read_fifo,
   read_threshold, write_fifo, write_threshold}: JTAG_UART, x') =
  {base_address = base_address, control = control, data = x',
   read_fifo = read_fifo, read_threshold = read_threshold,
   write_fifo = write_fifo, write_threshold = write_threshold}: JTAG_UART

fun JTAG_UART_read_fifo_rupd ({base_address, control, data, read_fifo,
   read_threshold, write_fifo, write_threshold}: JTAG_UART, x') =
  {base_address = base_address, control = control, data = data,
   read_fifo = x', read_threshold = read_threshold,
   write_fifo = write_fifo, write_threshold = write_threshold}: JTAG_UART

fun JTAG_UART_read_threshold_rupd ({base_address, control, data,
   read_fifo, read_threshold, write_fifo, write_threshold}
  : JTAG_UART, x') =
  {base_address = base_address, control = control, data = data,
   read_fifo = read_fifo, read_threshold = x', write_fifo = write_fifo,
   write_threshold = write_threshold}: JTAG_UART

fun JTAG_UART_write_fifo_rupd ({base_address, control, data, read_fifo,
   read_threshold, write_fifo, write_threshold}: JTAG_UART, x') =
  {base_address = base_address, control = control, data = data,
   read_fifo = read_fifo, read_threshold = read_threshold,
   write_fifo = x', write_threshold = write_threshold}: JTAG_UART

fun JTAG_UART_write_threshold_rupd ({base_address, control, data,
   read_fifo, read_threshold, write_fifo, write_threshold}
  : JTAG_UART, x') =
  {base_address = base_address, control = control, data = data,
   read_fifo = read_fifo, read_threshold = read_threshold,
   write_fifo = write_fifo, write_threshold = x'}: JTAG_UART

(* -------------------------------------------------------------------------
   Exceptions
   ------------------------------------------------------------------------- *)

exception UNPREDICTABLE of string

(* -------------------------------------------------------------------------
   Global variables (state)
   ------------------------------------------------------------------------- *)

val JTAG_UART = ref
  ({base_address = BitsN.B(0x0,37),
    control =
      {AC = false, RE = false, RI = false, WE = false, WI = false,
       WSPACE = BitsN.B(0x0,16), jtag_uart_control'rst = BitsN.B(0x0,11)},
    data =
      {RAVAIL = BitsN.B(0x0,16), RVALID = false, RW_DATA = BitsN.B(0x0,8),
       jtag_uart_data'rst = BitsN.B(0x0,7)}, read_fifo = [],
    read_threshold = 0, write_fifo = [], write_threshold = 0})
  : JTAG_UART ref

val MEM = ref (Map.mkMap(SOME 137438953472,BitsN.B(0x0,64)))
  : (BitsN.nbit Map.map) ref

val PIC_base_address = ref (Map.mkMap(SOME 256,BitsN.B(0x0,37)))
  : (BitsN.nbit Map.map) ref

val PIC_config_regs = ref
  (Map.mkMap
     (SOME 256,
      Map.mkMap
        (SOME 128,
         {EN = false, IRQ = BitsN.B(0x0,3),
          pic_config_reg'rst = BitsN.B(0x0,60)})))
  : (PIC_Config_Reg Map.map Map.map) ref

val PIC_external_intrs = ref (Map.mkMap(SOME 256,BitsN.B(0x0,64)))
  : (BitsN.nbit Map.map) ref

val PIC_ip_bits = ref (Map.mkMap(SOME 256,BitsN.B(0x0,128)))
  : (BitsN.nbit Map.map) ref

val UNPREDICTABLE_HI = ref (L3.K ()): (unit -> unit) ref

val UNPREDICTABLE_LO = ref (L3.K ()): (unit -> unit) ref

val c_BranchDelay = ref (Map.mkMap(SOME 256,NONE))
  : ((BitsN.nbit option) option Map.map) ref

val c_BranchTo = ref (Map.mkMap(SOME 256,NONE))
  : ((bool * BitsN.nbit) option Map.map) ref

val c_CP0 = ref
  (Map.mkMap
     (SOME 256,
      {BadVAddr = BitsN.B(0x0,64),
       Cause =
         {BD = false, CE = BitsN.B(0x0,2), ExcCode = BitsN.B(0x0,5),
          IP = BitsN.B(0x0,8), TI = false,
          causeregister'rst = BitsN.B(0x0,15)}, Compare = BitsN.B(0x0,32),
       Config =
         {AR = BitsN.B(0x0,3), AT = BitsN.B(0x0,2), BE = false,
          K0 = BitsN.B(0x0,3), M = false, MT = BitsN.B(0x0,3),
          configregister'rst = BitsN.B(0x0,19)},
       Config1 =
         {C2 = false, CA = false, DA = BitsN.B(0x0,3),
          DL = BitsN.B(0x0,3), DS = BitsN.B(0x0,3), EP = false,
          FP = false, IA = BitsN.B(0x0,3), IL = BitsN.B(0x0,3),
          IS = BitsN.B(0x0,3), M = false, MD = false,
          MMUSize = BitsN.B(0x0,6), PCR = false, WR = false},
       Config2 =
         {M = false, SA = BitsN.B(0x0,4), SL = BitsN.B(0x0,4),
          SS = BitsN.B(0x0,4), SU = BitsN.B(0x0,4), TA = BitsN.B(0x0,4),
          TL = BitsN.B(0x0,4), TS = BitsN.B(0x0,4), TU = BitsN.B(0x0,3)},
       Config3 =
         {DSPP = false, LPA = false, M = false, MT = false, SM = false,
          SP = false, TL = false, ULRI = false, VEIC = false,
          VInt = false, configregister3'rst = BitsN.B(0x0,22)},
       Config6 =
         {LTLB = false, TLBSize = BitsN.B(0x0,16),
          configregister6'rst = BitsN.B(0x0,15)},
       Context =
         {BadVPN2 = BitsN.B(0x0,19), PTEBase = BitsN.B(0x0,41),
          context'rst = BitsN.B(0x0,4)}, Count = BitsN.B(0x0,32),
       Debug = BitsN.B(0x0,32), EPC = BitsN.B(0x0,64),
       EntryHi =
         {ASID = BitsN.B(0x0,8), R = BitsN.B(0x0,2),
          VPN2 = BitsN.B(0x0,27), entryhi'rst = BitsN.B(0x0,27)},
       EntryLo0 =
         {C = BitsN.B(0x0,3), D = false, G = false, PFN = BitsN.B(0x0,28),
          V = false, entrylo'rst = BitsN.B(0x0,30)},
       EntryLo1 =
         {C = BitsN.B(0x0,3), D = false, G = false, PFN = BitsN.B(0x0,28),
          V = false, entrylo'rst = BitsN.B(0x0,30)},
       ErrCtl = BitsN.B(0x0,32), ErrorEPC = BitsN.B(0x0,64),
       HWREna =
         {CC = false, CCRes = false, CPUNum = false, UL = false,
          hwrena'rst = BitsN.B(0x0,28)},
       Index =
         {Index = BitsN.B(0x0,8), P = false, index'rst = BitsN.B(0x0,23)},
       LLAddr = BitsN.B(0x0,64), PRId = BitsN.B(0x0,32),
       PageMask = {Mask = BitsN.B(0x0,12), pagemask'rst = BitsN.B(0x0,20)},
       Random = {Random = BitsN.B(0x0,8), random'rst = BitsN.B(0x0,24)},
       Status =
         {BEV = false, CU0 = false, CU1 = false, CU2 = false, CU3 = false,
          ERL = false, EXL = false, FR = false, IE = false,
          IM = BitsN.B(0x0,8), KSU = BitsN.B(0x0,2), KX = false,
          RE = false, SX = false, UX = false,
          statusregister'rst = BitsN.B(0x0,9)},
       UsrLocal = BitsN.B(0x0,64),
       Wired = {Wired = BitsN.B(0x0,8), wired'rst = BitsN.B(0x0,24)},
       XContext =
         {BadVPN2 = BitsN.B(0x0,27), PTEBase = BitsN.B(0x0,31),
          R = BitsN.B(0x0,2), xcontext'rst = BitsN.B(0x0,4)}}))
  : (CP0 Map.map) ref

val c_LLbit = ref (Map.mkMap(SOME 256,NONE)): (bool option Map.map) ref

val c_PC = ref (Map.mkMap(SOME 256,BitsN.B(0x0,64)))
  : (BitsN.nbit Map.map) ref

val c_TLB_assoc = ref
  (Map.mkMap
     (SOME 256,
      Map.mkMap
        (SOME 16,
         {ASID = BitsN.B(0x0,8), C0 = BitsN.B(0x0,3), C1 = BitsN.B(0x0,3),
          D0 = false, D1 = false, G = false, Mask = BitsN.B(0x0,12),
          PFN0 = BitsN.B(0x0,28), PFN1 = BitsN.B(0x0,28),
          R = BitsN.B(0x0,2), V0 = false, V1 = false,
          VPN2 = BitsN.B(0x0,27)}))): (TLBEntry Map.map Map.map) ref

val c_TLB_direct = ref
  (Map.mkMap
     (SOME 256,
      Map.mkMap
        (SOME 128,
         {ASID = BitsN.B(0x0,8), C0 = BitsN.B(0x0,3), C1 = BitsN.B(0x0,3),
          D0 = false, D1 = false, G = false, Mask = BitsN.B(0x0,12),
          PFN0 = BitsN.B(0x0,28), PFN1 = BitsN.B(0x0,28),
          R = BitsN.B(0x0,2), V0 = false, V1 = false,
          VPN2 = BitsN.B(0x0,27)}))): (TLBEntry Map.map Map.map) ref

val c_exceptionSignalled = ref (Map.mkMap(SOME 256,false))
  : (bool Map.map) ref

val c_gpr = ref (Map.mkMap(SOME 256,Map.mkMap(SOME 32,BitsN.B(0x0,64))))
  : (BitsN.nbit Map.map Map.map) ref

val c_hi = ref (Map.mkMap(SOME 256,NONE)): (BitsN.nbit option Map.map) ref

val c_lo = ref (Map.mkMap(SOME 256,NONE)): (BitsN.nbit option Map.map) ref

val done = ref (false): bool ref

val instCnt = ref (0): Nat.nat ref

val log = ref (Map.mkMap(NONE,[])): (string list Map.map) ref

val print = ref (L3.K ()): (string -> unit) ref

val println = ref (L3.K ()): (string -> unit) ref

val procID = ref (BitsN.B(0x0,8)): BitsN.nbit ref

val totalCore = ref (0): Nat.nat ref

(* -------------------------------------------------------------------------
   Main specification
   ------------------------------------------------------------------------- *)

local
  fun tuple'64 [t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,
                t17,t18,t19,t20,t21,t22,t23,t24,t25,t26,t27,t28,t29,t30,
                t31,t32,t33,t34,t35,t36,t37,t38,t39,t40,t41,t42,t43,t44,
                t45,t46,t47,t48,t49,t50,t51,t52,t53,t54,t55,t56,t57,t58,
                t59,t60,t61,t62,t63] =
      (t0,
       (t1,
        (t2,
         (t3,
          (t4,
           (t5,
            (t6,
             (t7,
              (t8,
               (t9,
                (t10,
                 (t11,
                  (t12,
                   (t13,
                    (t14,
                     (t15,
                      (t16,
                       (t17,
                        (t18,
                         (t19,
                          (t20,
                           (t21,
                            (t22,
                             (t23,
                              (t24,
                               (t25,
                                (t26,
                                 (t27,
                                  (t28,
                                   (t29,
                                    (t30,
                                     (t31,
                                      (t32,
                                       (t33,
                                        (t34,
                                         (t35,
                                          (t36,
                                           (t37,
                                            (t38,
                                             (t39,
                                              (t40,
                                               (t41,
                                                (t42,
                                                 (t43,
                                                  (t44,
                                                   (t45,
                                                    (t46,
                                                     (t47,
                                                      (t48,
                                                       (t49,
                                                        (t50,
                                                         (t51,
                                                          (t52,
                                                           (t53,
                                                            (t54,
                                                             (t55,
                                                              (t56,
                                                               (t57,
                                                                (t58,
                                                                 (t59,
                                                                  (t60,
                                                                   (t61,
                                                                    (t62,
                                                                     t63)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    | tuple'64 (_: bool list) = raise Fail "tuple'64"
in
  val boolify'64 = tuple'64 o BitsN.toList
end

local
  fun tuple'32 [t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,
                t17,t18,t19,t20,t21,t22,t23,t24,t25,t26,t27,t28,t29,t30,
                t31] =
      (t0,
       (t1,
        (t2,
         (t3,
          (t4,
           (t5,
            (t6,
             (t7,
              (t8,
               (t9,
                (t10,
                 (t11,
                  (t12,
                   (t13,
                    (t14,
                     (t15,
                      (t16,
                       (t17,
                        (t18,
                         (t19,
                          (t20,
                           (t21,
                            (t22,
                             (t23,
                              (t24,(t25,(t26,(t27,(t28,(t29,(t30,t31)))))))))))))))))))))))))))))))
    | tuple'32 (_: bool list) = raise Fail "tuple'32"
in
  val boolify'32 = tuple'32 o BitsN.toList
end

fun rec'EntryLo x =
  {C = BitsN.bits(x,5,3), D = BitsN.bit(x,2), G = BitsN.bit(x,0),
   PFN = BitsN.bits(x,33,6), V = BitsN.bit(x,1),
   entrylo'rst = BitsN.bits(x,63,34)};

fun reg'EntryLo x =
  case x of
     {C = C, D = D, G = G, PFN = PFN, V = V, entrylo'rst = entrylo'rst} =>
      BitsN.modify
        (fn (i,_) =>
           if i = 63
             then BitsN.bit(entrylo'rst,29)
           else if i = 62
             then BitsN.bit(entrylo'rst,28)
           else if i = 61
             then BitsN.bit(entrylo'rst,27)
           else if i = 60
             then BitsN.bit(entrylo'rst,26)
           else if i = 59
             then BitsN.bit(entrylo'rst,25)
           else if i = 58
             then BitsN.bit(entrylo'rst,24)
           else if i = 57
             then BitsN.bit(entrylo'rst,23)
           else if i = 56
             then BitsN.bit(entrylo'rst,22)
           else if i = 55
             then BitsN.bit(entrylo'rst,21)
           else if i = 54
             then BitsN.bit(entrylo'rst,20)
           else if i = 53
             then BitsN.bit(entrylo'rst,19)
           else if i = 52
             then BitsN.bit(entrylo'rst,18)
           else if i = 51
             then BitsN.bit(entrylo'rst,17)
           else if i = 50
             then BitsN.bit(entrylo'rst,16)
           else if i = 49
             then BitsN.bit(entrylo'rst,15)
           else if i = 48
             then BitsN.bit(entrylo'rst,14)
           else if i = 47
             then BitsN.bit(entrylo'rst,13)
           else if i = 46
             then BitsN.bit(entrylo'rst,12)
           else if i = 45
             then BitsN.bit(entrylo'rst,11)
           else if i = 44
             then BitsN.bit(entrylo'rst,10)
           else if i = 43
             then BitsN.bit(entrylo'rst,9)
           else if i = 42
             then BitsN.bit(entrylo'rst,8)
           else if i = 41
             then BitsN.bit(entrylo'rst,7)
           else if i = 40
             then BitsN.bit(entrylo'rst,6)
           else if i = 39
             then BitsN.bit(entrylo'rst,5)
           else if i = 38
             then BitsN.bit(entrylo'rst,4)
           else if i = 37
             then BitsN.bit(entrylo'rst,3)
           else if i = 36
             then BitsN.bit(entrylo'rst,2)
           else if i = 35
             then BitsN.bit(entrylo'rst,1)
           else if i = 34
             then BitsN.bit(entrylo'rst,0)
           else if i = 33
             then BitsN.bit(PFN,27)
           else if i = 32
             then BitsN.bit(PFN,26)
           else if i = 31
             then BitsN.bit(PFN,25)
           else if i = 30
             then BitsN.bit(PFN,24)
           else if i = 29
             then BitsN.bit(PFN,23)
           else if i = 28
             then BitsN.bit(PFN,22)
           else if i = 27
             then BitsN.bit(PFN,21)
           else if i = 26
             then BitsN.bit(PFN,20)
           else if i = 25
             then BitsN.bit(PFN,19)
           else if i = 24
             then BitsN.bit(PFN,18)
           else if i = 23
             then BitsN.bit(PFN,17)
           else if i = 22
             then BitsN.bit(PFN,16)
           else if i = 21
             then BitsN.bit(PFN,15)
           else if i = 20
             then BitsN.bit(PFN,14)
           else if i = 19
             then BitsN.bit(PFN,13)
           else if i = 18
             then BitsN.bit(PFN,12)
           else if i = 17
             then BitsN.bit(PFN,11)
           else if i = 16
             then BitsN.bit(PFN,10)
           else if i = 15
             then BitsN.bit(PFN,9)
           else if i = 14
             then BitsN.bit(PFN,8)
           else if i = 13
             then BitsN.bit(PFN,7)
           else if i = 12
             then BitsN.bit(PFN,6)
           else if i = 11
             then BitsN.bit(PFN,5)
           else if i = 10
             then BitsN.bit(PFN,4)
           else if i = 9
             then BitsN.bit(PFN,3)
           else if i = 8
             then BitsN.bit(PFN,2)
           else if i = 7
             then BitsN.bit(PFN,1)
           else if i = 6
             then BitsN.bit(PFN,0)
           else if i = 5
             then BitsN.bit(C,2)
           else if i = 4
             then BitsN.bit(C,1)
           else if i = 3
             then BitsN.bit(C,0)
           else if i = 2 then D else if i = 1 then V else G,
         BitsN.B(0x0,64));

fun write'rec'EntryLo (_,x) = reg'EntryLo x;

fun write'reg'EntryLo (_,x) = rec'EntryLo x;

fun rec'Index x =
  {Index = BitsN.bits(x,7,0), P = BitsN.bit(x,31),
   index'rst = BitsN.bits(x,30,8)};

fun reg'Index x =
  case x of
     {Index = Index, P = P, index'rst = index'rst} =>
      BitsN.modify
        (fn (i,_) =>
           if i = 31
             then P
           else if i = 30
             then BitsN.bit(index'rst,22)
           else if i = 29
             then BitsN.bit(index'rst,21)
           else if i = 28
             then BitsN.bit(index'rst,20)
           else if i = 27
             then BitsN.bit(index'rst,19)
           else if i = 26
             then BitsN.bit(index'rst,18)
           else if i = 25
             then BitsN.bit(index'rst,17)
           else if i = 24
             then BitsN.bit(index'rst,16)
           else if i = 23
             then BitsN.bit(index'rst,15)
           else if i = 22
             then BitsN.bit(index'rst,14)
           else if i = 21
             then BitsN.bit(index'rst,13)
           else if i = 20
             then BitsN.bit(index'rst,12)
           else if i = 19
             then BitsN.bit(index'rst,11)
           else if i = 18
             then BitsN.bit(index'rst,10)
           else if i = 17
             then BitsN.bit(index'rst,9)
           else if i = 16
             then BitsN.bit(index'rst,8)
           else if i = 15
             then BitsN.bit(index'rst,7)
           else if i = 14
             then BitsN.bit(index'rst,6)
           else if i = 13
             then BitsN.bit(index'rst,5)
           else if i = 12
             then BitsN.bit(index'rst,4)
           else if i = 11
             then BitsN.bit(index'rst,3)
           else if i = 10
             then BitsN.bit(index'rst,2)
           else if i = 9
             then BitsN.bit(index'rst,1)
           else if i = 8
             then BitsN.bit(index'rst,0)
           else if i = 7
             then BitsN.bit(Index,7)
           else if i = 6
             then BitsN.bit(Index,6)
           else if i = 5
             then BitsN.bit(Index,5)
           else if i = 4
             then BitsN.bit(Index,4)
           else if i = 3
             then BitsN.bit(Index,3)
           else if i = 2
             then BitsN.bit(Index,2)
           else if i = 1 then BitsN.bit(Index,1) else BitsN.bit(Index,0),
         BitsN.B(0x0,32));

fun write'rec'Index (_,x) = reg'Index x;

fun write'reg'Index (_,x) = rec'Index x;

fun rec'Random x =
  {Random = BitsN.bits(x,7,0), random'rst = BitsN.bits(x,31,8)};

fun reg'Random x =
  case x of
     {Random = Random, random'rst = random'rst} =>
      BitsN.modify
        (fn (i,_) =>
           if i = 31
             then BitsN.bit(random'rst,23)
           else if i = 30
             then BitsN.bit(random'rst,22)
           else if i = 29
             then BitsN.bit(random'rst,21)
           else if i = 28
             then BitsN.bit(random'rst,20)
           else if i = 27
             then BitsN.bit(random'rst,19)
           else if i = 26
             then BitsN.bit(random'rst,18)
           else if i = 25
             then BitsN.bit(random'rst,17)
           else if i = 24
             then BitsN.bit(random'rst,16)
           else if i = 23
             then BitsN.bit(random'rst,15)
           else if i = 22
             then BitsN.bit(random'rst,14)
           else if i = 21
             then BitsN.bit(random'rst,13)
           else if i = 20
             then BitsN.bit(random'rst,12)
           else if i = 19
             then BitsN.bit(random'rst,11)
           else if i = 18
             then BitsN.bit(random'rst,10)
           else if i = 17
             then BitsN.bit(random'rst,9)
           else if i = 16
             then BitsN.bit(random'rst,8)
           else if i = 15
             then BitsN.bit(random'rst,7)
           else if i = 14
             then BitsN.bit(random'rst,6)
           else if i = 13
             then BitsN.bit(random'rst,5)
           else if i = 12
             then BitsN.bit(random'rst,4)
           else if i = 11
             then BitsN.bit(random'rst,3)
           else if i = 10
             then BitsN.bit(random'rst,2)
           else if i = 9
             then BitsN.bit(random'rst,1)
           else if i = 8
             then BitsN.bit(random'rst,0)
           else if i = 7
             then BitsN.bit(Random,7)
           else if i = 6
             then BitsN.bit(Random,6)
           else if i = 5
             then BitsN.bit(Random,5)
           else if i = 4
             then BitsN.bit(Random,4)
           else if i = 3
             then BitsN.bit(Random,3)
           else if i = 2
             then BitsN.bit(Random,2)
           else if i = 1 then BitsN.bit(Random,1) else BitsN.bit(Random,0),
         BitsN.B(0x0,32));

fun write'rec'Random (_,x) = reg'Random x;

fun write'reg'Random (_,x) = rec'Random x;

fun rec'Wired x =
  {Wired = BitsN.bits(x,7,0), wired'rst = BitsN.bits(x,31,8)};

fun reg'Wired x =
  case x of
     {Wired = Wired, wired'rst = wired'rst} =>
      BitsN.modify
        (fn (i,_) =>
           if i = 31
             then BitsN.bit(wired'rst,23)
           else if i = 30
             then BitsN.bit(wired'rst,22)
           else if i = 29
             then BitsN.bit(wired'rst,21)
           else if i = 28
             then BitsN.bit(wired'rst,20)
           else if i = 27
             then BitsN.bit(wired'rst,19)
           else if i = 26
             then BitsN.bit(wired'rst,18)
           else if i = 25
             then BitsN.bit(wired'rst,17)
           else if i = 24
             then BitsN.bit(wired'rst,16)
           else if i = 23
             then BitsN.bit(wired'rst,15)
           else if i = 22
             then BitsN.bit(wired'rst,14)
           else if i = 21
             then BitsN.bit(wired'rst,13)
           else if i = 20
             then BitsN.bit(wired'rst,12)
           else if i = 19
             then BitsN.bit(wired'rst,11)
           else if i = 18
             then BitsN.bit(wired'rst,10)
           else if i = 17
             then BitsN.bit(wired'rst,9)
           else if i = 16
             then BitsN.bit(wired'rst,8)
           else if i = 15
             then BitsN.bit(wired'rst,7)
           else if i = 14
             then BitsN.bit(wired'rst,6)
           else if i = 13
             then BitsN.bit(wired'rst,5)
           else if i = 12
             then BitsN.bit(wired'rst,4)
           else if i = 11
             then BitsN.bit(wired'rst,3)
           else if i = 10
             then BitsN.bit(wired'rst,2)
           else if i = 9
             then BitsN.bit(wired'rst,1)
           else if i = 8
             then BitsN.bit(wired'rst,0)
           else if i = 7
             then BitsN.bit(Wired,7)
           else if i = 6
             then BitsN.bit(Wired,6)
           else if i = 5
             then BitsN.bit(Wired,5)
           else if i = 4
             then BitsN.bit(Wired,4)
           else if i = 3
             then BitsN.bit(Wired,3)
           else if i = 2
             then BitsN.bit(Wired,2)
           else if i = 1 then BitsN.bit(Wired,1) else BitsN.bit(Wired,0),
         BitsN.B(0x0,32));

fun write'rec'Wired (_,x) = reg'Wired x;

fun write'reg'Wired (_,x) = rec'Wired x;

fun rec'PageMask x =
  {Mask = BitsN.bits(x,24,13),
   pagemask'rst = BitsN.@@(BitsN.bits(x,12,0),BitsN.bits(x,31,25))};

fun reg'PageMask x =
  case x of
     {Mask = Mask, pagemask'rst = pagemask'rst} =>
      BitsN.modify
        (fn (i,_) =>
           if i = 31
             then BitsN.bit(pagemask'rst,6)
           else if i = 30
             then BitsN.bit(pagemask'rst,5)
           else if i = 29
             then BitsN.bit(pagemask'rst,4)
           else if i = 28
             then BitsN.bit(pagemask'rst,3)
           else if i = 27
             then BitsN.bit(pagemask'rst,2)
           else if i = 26
             then BitsN.bit(pagemask'rst,1)
           else if i = 25
             then BitsN.bit(pagemask'rst,0)
           else if i = 24
             then BitsN.bit(Mask,11)
           else if i = 23
             then BitsN.bit(Mask,10)
           else if i = 22
             then BitsN.bit(Mask,9)
           else if i = 21
             then BitsN.bit(Mask,8)
           else if i = 20
             then BitsN.bit(Mask,7)
           else if i = 19
             then BitsN.bit(Mask,6)
           else if i = 18
             then BitsN.bit(Mask,5)
           else if i = 17
             then BitsN.bit(Mask,4)
           else if i = 16
             then BitsN.bit(Mask,3)
           else if i = 15
             then BitsN.bit(Mask,2)
           else if i = 14
             then BitsN.bit(Mask,1)
           else if i = 13
             then BitsN.bit(Mask,0)
           else if i = 12
             then BitsN.bit(pagemask'rst,19)
           else if i = 11
             then BitsN.bit(pagemask'rst,18)
           else if i = 10
             then BitsN.bit(pagemask'rst,17)
           else if i = 9
             then BitsN.bit(pagemask'rst,16)
           else if i = 8
             then BitsN.bit(pagemask'rst,15)
           else if i = 7
             then BitsN.bit(pagemask'rst,14)
           else if i = 6
             then BitsN.bit(pagemask'rst,13)
           else if i = 5
             then BitsN.bit(pagemask'rst,12)
           else if i = 4
             then BitsN.bit(pagemask'rst,11)
           else if i = 3
             then BitsN.bit(pagemask'rst,10)
           else if i = 2
             then BitsN.bit(pagemask'rst,9)
           else if i = 1
             then BitsN.bit(pagemask'rst,8)
           else BitsN.bit(pagemask'rst,7),BitsN.B(0x0,32));

fun write'rec'PageMask (_,x) = reg'PageMask x;

fun write'reg'PageMask (_,x) = rec'PageMask x;

fun rec'EntryHi x =
  {ASID = BitsN.bits(x,7,0), R = BitsN.bits(x,63,62),
   VPN2 = BitsN.bits(x,39,13),
   entryhi'rst = BitsN.@@(BitsN.bits(x,12,8),BitsN.bits(x,61,40))};

fun reg'EntryHi x =
  case x of
     {ASID = ASID, R = R, VPN2 = VPN2, entryhi'rst = entryhi'rst} =>
      BitsN.modify
        (fn (i,_) =>
           if i = 63
             then BitsN.bit(R,1)
           else if i = 62
             then BitsN.bit(R,0)
           else if i = 61
             then BitsN.bit(entryhi'rst,21)
           else if i = 60
             then BitsN.bit(entryhi'rst,20)
           else if i = 59
             then BitsN.bit(entryhi'rst,19)
           else if i = 58
             then BitsN.bit(entryhi'rst,18)
           else if i = 57
             then BitsN.bit(entryhi'rst,17)
           else if i = 56
             then BitsN.bit(entryhi'rst,16)
           else if i = 55
             then BitsN.bit(entryhi'rst,15)
           else if i = 54
             then BitsN.bit(entryhi'rst,14)
           else if i = 53
             then BitsN.bit(entryhi'rst,13)
           else if i = 52
             then BitsN.bit(entryhi'rst,12)
           else if i = 51
             then BitsN.bit(entryhi'rst,11)
           else if i = 50
             then BitsN.bit(entryhi'rst,10)
           else if i = 49
             then BitsN.bit(entryhi'rst,9)
           else if i = 48
             then BitsN.bit(entryhi'rst,8)
           else if i = 47
             then BitsN.bit(entryhi'rst,7)
           else if i = 46
             then BitsN.bit(entryhi'rst,6)
           else if i = 45
             then BitsN.bit(entryhi'rst,5)
           else if i = 44
             then BitsN.bit(entryhi'rst,4)
           else if i = 43
             then BitsN.bit(entryhi'rst,3)
           else if i = 42
             then BitsN.bit(entryhi'rst,2)
           else if i = 41
             then BitsN.bit(entryhi'rst,1)
           else if i = 40
             then BitsN.bit(entryhi'rst,0)
           else if i = 39
             then BitsN.bit(VPN2,26)
           else if i = 38
             then BitsN.bit(VPN2,25)
           else if i = 37
             then BitsN.bit(VPN2,24)
           else if i = 36
             then BitsN.bit(VPN2,23)
           else if i = 35
             then BitsN.bit(VPN2,22)
           else if i = 34
             then BitsN.bit(VPN2,21)
           else if i = 33
             then BitsN.bit(VPN2,20)
           else if i = 32
             then BitsN.bit(VPN2,19)
           else if i = 31
             then BitsN.bit(VPN2,18)
           else if i = 30
             then BitsN.bit(VPN2,17)
           else if i = 29
             then BitsN.bit(VPN2,16)
           else if i = 28
             then BitsN.bit(VPN2,15)
           else if i = 27
             then BitsN.bit(VPN2,14)
           else if i = 26
             then BitsN.bit(VPN2,13)
           else if i = 25
             then BitsN.bit(VPN2,12)
           else if i = 24
             then BitsN.bit(VPN2,11)
           else if i = 23
             then BitsN.bit(VPN2,10)
           else if i = 22
             then BitsN.bit(VPN2,9)
           else if i = 21
             then BitsN.bit(VPN2,8)
           else if i = 20
             then BitsN.bit(VPN2,7)
           else if i = 19
             then BitsN.bit(VPN2,6)
           else if i = 18
             then BitsN.bit(VPN2,5)
           else if i = 17
             then BitsN.bit(VPN2,4)
           else if i = 16
             then BitsN.bit(VPN2,3)
           else if i = 15
             then BitsN.bit(VPN2,2)
           else if i = 14
             then BitsN.bit(VPN2,1)
           else if i = 13
             then BitsN.bit(VPN2,0)
           else if i = 12
             then BitsN.bit(entryhi'rst,26)
           else if i = 11
             then BitsN.bit(entryhi'rst,25)
           else if i = 10
             then BitsN.bit(entryhi'rst,24)
           else if i = 9
             then BitsN.bit(entryhi'rst,23)
           else if i = 8
             then BitsN.bit(entryhi'rst,22)
           else if i = 7
             then BitsN.bit(ASID,7)
           else if i = 6
             then BitsN.bit(ASID,6)
           else if i = 5
             then BitsN.bit(ASID,5)
           else if i = 4
             then BitsN.bit(ASID,4)
           else if i = 3
             then BitsN.bit(ASID,3)
           else if i = 2
             then BitsN.bit(ASID,2)
           else if i = 1 then BitsN.bit(ASID,1) else BitsN.bit(ASID,0),
         BitsN.B(0x0,64));

fun write'rec'EntryHi (_,x) = reg'EntryHi x;

fun write'reg'EntryHi (_,x) = rec'EntryHi x;

fun rec'StatusRegister x =
  {BEV = BitsN.bit(x,22), CU0 = BitsN.bit(x,28), CU1 = BitsN.bit(x,29),
   CU2 = BitsN.bit(x,30), CU3 = BitsN.bit(x,31), ERL = BitsN.bit(x,2),
   EXL = BitsN.bit(x,1), FR = BitsN.bit(x,26), IE = BitsN.bit(x,0),
   IM = BitsN.bits(x,15,8), KSU = BitsN.bits(x,4,3), KX = BitsN.bit(x,7),
   RE = BitsN.bit(x,25), SX = BitsN.bit(x,6), UX = BitsN.bit(x,5),
   statusregister'rst =
     BitsN.concat
       [BitsN.bits(x,21,16),BitsN.bits(x,24,23),BitsN.bits(x,27,27)]};

fun reg'StatusRegister x =
  case x of
     {BEV = BEV, CU0 = CU0, CU1 = CU1, CU2 = CU2, CU3 = CU3, ERL = ERL,
      EXL = EXL, FR = FR, IE = IE, IM = IM, KSU = KSU, KX = KX, RE = RE,
      SX = SX, UX = UX, statusregister'rst = statusregister'rst} =>
      BitsN.modify
        (fn (i,_) =>
           if i = 31
             then CU3
           else if i = 30
             then CU2
           else if i = 29
             then CU1
           else if i = 28
             then CU0
           else if i = 27
             then BitsN.bit(statusregister'rst,0)
           else if i = 26
             then FR
           else if i = 25
             then RE
           else if i = 24
             then BitsN.bit(statusregister'rst,2)
           else if i = 23
             then BitsN.bit(statusregister'rst,1)
           else if i = 22
             then BEV
           else if i = 21
             then BitsN.bit(statusregister'rst,8)
           else if i = 20
             then BitsN.bit(statusregister'rst,7)
           else if i = 19
             then BitsN.bit(statusregister'rst,6)
           else if i = 18
             then BitsN.bit(statusregister'rst,5)
           else if i = 17
             then BitsN.bit(statusregister'rst,4)
           else if i = 16
             then BitsN.bit(statusregister'rst,3)
           else if i = 15
             then BitsN.bit(IM,7)
           else if i = 14
             then BitsN.bit(IM,6)
           else if i = 13
             then BitsN.bit(IM,5)
           else if i = 12
             then BitsN.bit(IM,4)
           else if i = 11
             then BitsN.bit(IM,3)
           else if i = 10
             then BitsN.bit(IM,2)
           else if i = 9
             then BitsN.bit(IM,1)
           else if i = 8
             then BitsN.bit(IM,0)
           else if i = 7
             then KX
           else if i = 6
             then SX
           else if i = 5
             then UX
           else if i = 4
             then BitsN.bit(KSU,1)
           else if i = 3
             then BitsN.bit(KSU,0)
           else if i = 2 then ERL else if i = 1 then EXL else IE,
         BitsN.B(0x0,32));

fun write'rec'StatusRegister (_,x) = reg'StatusRegister x;

fun write'reg'StatusRegister (_,x) = rec'StatusRegister x;

fun rec'ConfigRegister x =
  {AR = BitsN.bits(x,12,10), AT = BitsN.bits(x,14,13),
   BE = BitsN.bit(x,15), K0 = BitsN.bits(x,2,0), M = BitsN.bit(x,31),
   MT = BitsN.bits(x,9,7),
   configregister'rst = BitsN.@@(BitsN.bits(x,6,3),BitsN.bits(x,30,16))};

fun reg'ConfigRegister x =
  case x of
     {AR = AR, AT = AT, BE = BE, K0 = K0, M = M, MT = MT,
      configregister'rst = configregister'rst} =>
      BitsN.modify
        (fn (i,_) =>
           if i = 31
             then M
           else if i = 30
             then BitsN.bit(configregister'rst,14)
           else if i = 29
             then BitsN.bit(configregister'rst,13)
           else if i = 28
             then BitsN.bit(configregister'rst,12)
           else if i = 27
             then BitsN.bit(configregister'rst,11)
           else if i = 26
             then BitsN.bit(configregister'rst,10)
           else if i = 25
             then BitsN.bit(configregister'rst,9)
           else if i = 24
             then BitsN.bit(configregister'rst,8)
           else if i = 23
             then BitsN.bit(configregister'rst,7)
           else if i = 22
             then BitsN.bit(configregister'rst,6)
           else if i = 21
             then BitsN.bit(configregister'rst,5)
           else if i = 20
             then BitsN.bit(configregister'rst,4)
           else if i = 19
             then BitsN.bit(configregister'rst,3)
           else if i = 18
             then BitsN.bit(configregister'rst,2)
           else if i = 17
             then BitsN.bit(configregister'rst,1)
           else if i = 16
             then BitsN.bit(configregister'rst,0)
           else if i = 15
             then BE
           else if i = 14
             then BitsN.bit(AT,1)
           else if i = 13
             then BitsN.bit(AT,0)
           else if i = 12
             then BitsN.bit(AR,2)
           else if i = 11
             then BitsN.bit(AR,1)
           else if i = 10
             then BitsN.bit(AR,0)
           else if i = 9
             then BitsN.bit(MT,2)
           else if i = 8
             then BitsN.bit(MT,1)
           else if i = 7
             then BitsN.bit(MT,0)
           else if i = 6
             then BitsN.bit(configregister'rst,18)
           else if i = 5
             then BitsN.bit(configregister'rst,17)
           else if i = 4
             then BitsN.bit(configregister'rst,16)
           else if i = 3
             then BitsN.bit(configregister'rst,15)
           else if i = 2
             then BitsN.bit(K0,2)
           else if i = 1 then BitsN.bit(K0,1) else BitsN.bit(K0,0),
         BitsN.B(0x0,32));

fun write'rec'ConfigRegister (_,x) = reg'ConfigRegister x;

fun write'reg'ConfigRegister (_,x) = rec'ConfigRegister x;

fun rec'ConfigRegister1 x =
  {C2 = BitsN.bit(x,6), CA = BitsN.bit(x,2), DA = BitsN.bits(x,9,7),
   DL = BitsN.bits(x,12,10), DS = BitsN.bits(x,15,13),
   EP = BitsN.bit(x,1), FP = BitsN.bit(x,0), IA = BitsN.bits(x,18,16),
   IL = BitsN.bits(x,21,19), IS = BitsN.bits(x,24,22),
   M = BitsN.bit(x,31), MD = BitsN.bit(x,5),
   MMUSize = BitsN.bits(x,30,25), PCR = BitsN.bit(x,4),
   WR = BitsN.bit(x,3)};

fun reg'ConfigRegister1 x =
  case x of
     {C2 = C2, CA = CA, DA = DA, DL = DL, DS = DS, EP = EP, FP = FP,
      IA = IA, IL = IL, IS = IS, M = M, MD = MD, MMUSize = MMUSize,
      PCR = PCR, WR = WR} =>
      BitsN.modify
        (fn (i,_) =>
           if i = 31
             then M
           else if i = 30
             then BitsN.bit(MMUSize,5)
           else if i = 29
             then BitsN.bit(MMUSize,4)
           else if i = 28
             then BitsN.bit(MMUSize,3)
           else if i = 27
             then BitsN.bit(MMUSize,2)
           else if i = 26
             then BitsN.bit(MMUSize,1)
           else if i = 25
             then BitsN.bit(MMUSize,0)
           else if i = 24
             then BitsN.bit(IS,2)
           else if i = 23
             then BitsN.bit(IS,1)
           else if i = 22
             then BitsN.bit(IS,0)
           else if i = 21
             then BitsN.bit(IL,2)
           else if i = 20
             then BitsN.bit(IL,1)
           else if i = 19
             then BitsN.bit(IL,0)
           else if i = 18
             then BitsN.bit(IA,2)
           else if i = 17
             then BitsN.bit(IA,1)
           else if i = 16
             then BitsN.bit(IA,0)
           else if i = 15
             then BitsN.bit(DS,2)
           else if i = 14
             then BitsN.bit(DS,1)
           else if i = 13
             then BitsN.bit(DS,0)
           else if i = 12
             then BitsN.bit(DL,2)
           else if i = 11
             then BitsN.bit(DL,1)
           else if i = 10
             then BitsN.bit(DL,0)
           else if i = 9
             then BitsN.bit(DA,2)
           else if i = 8
             then BitsN.bit(DA,1)
           else if i = 7
             then BitsN.bit(DA,0)
           else if i = 6
             then C2
           else if i = 5
             then MD
           else if i = 4
             then PCR
           else if i = 3
             then WR
           else if i = 2 then CA else if i = 1 then EP else FP,
         BitsN.B(0x0,32));

fun write'rec'ConfigRegister1 (_,x) = reg'ConfigRegister1 x;

fun write'reg'ConfigRegister1 (_,x) = rec'ConfigRegister1 x;

fun rec'ConfigRegister2 x =
  {M = BitsN.bit(x,31), SA = BitsN.bits(x,3,0), SL = BitsN.bits(x,7,4),
   SS = BitsN.bits(x,11,8), SU = BitsN.bits(x,15,12),
   TA = BitsN.bits(x,19,16), TL = BitsN.bits(x,23,20),
   TS = BitsN.bits(x,27,24), TU = BitsN.bits(x,30,28)};

fun reg'ConfigRegister2 x =
  case x of
     {M = M, SA = SA, SL = SL, SS = SS, SU = SU, TA = TA, TL = TL,
      TS = TS, TU = TU} =>
      BitsN.modify
        (fn (i,_) =>
           if i = 31
             then M
           else if i = 30
             then BitsN.bit(TU,2)
           else if i = 29
             then BitsN.bit(TU,1)
           else if i = 28
             then BitsN.bit(TU,0)
           else if i = 27
             then BitsN.bit(TS,3)
           else if i = 26
             then BitsN.bit(TS,2)
           else if i = 25
             then BitsN.bit(TS,1)
           else if i = 24
             then BitsN.bit(TS,0)
           else if i = 23
             then BitsN.bit(TL,3)
           else if i = 22
             then BitsN.bit(TL,2)
           else if i = 21
             then BitsN.bit(TL,1)
           else if i = 20
             then BitsN.bit(TL,0)
           else if i = 19
             then BitsN.bit(TA,3)
           else if i = 18
             then BitsN.bit(TA,2)
           else if i = 17
             then BitsN.bit(TA,1)
           else if i = 16
             then BitsN.bit(TA,0)
           else if i = 15
             then BitsN.bit(SU,3)
           else if i = 14
             then BitsN.bit(SU,2)
           else if i = 13
             then BitsN.bit(SU,1)
           else if i = 12
             then BitsN.bit(SU,0)
           else if i = 11
             then BitsN.bit(SS,3)
           else if i = 10
             then BitsN.bit(SS,2)
           else if i = 9
             then BitsN.bit(SS,1)
           else if i = 8
             then BitsN.bit(SS,0)
           else if i = 7
             then BitsN.bit(SL,3)
           else if i = 6
             then BitsN.bit(SL,2)
           else if i = 5
             then BitsN.bit(SL,1)
           else if i = 4
             then BitsN.bit(SL,0)
           else if i = 3
             then BitsN.bit(SA,3)
           else if i = 2
             then BitsN.bit(SA,2)
           else if i = 1 then BitsN.bit(SA,1) else BitsN.bit(SA,0),
         BitsN.B(0x0,32));

fun write'rec'ConfigRegister2 (_,x) = reg'ConfigRegister2 x;

fun write'reg'ConfigRegister2 (_,x) = rec'ConfigRegister2 x;

fun rec'ConfigRegister3 x =
  {DSPP = BitsN.bit(x,10), LPA = BitsN.bit(x,7), M = BitsN.bit(x,31),
   MT = BitsN.bit(x,2), SM = BitsN.bit(x,1), SP = BitsN.bit(x,4),
   TL = BitsN.bit(x,0), ULRI = BitsN.bit(x,13), VEIC = BitsN.bit(x,6),
   VInt = BitsN.bit(x,5),
   configregister3'rst =
     BitsN.concat
       [BitsN.bits(x,3,3),BitsN.bits(x,9,8),BitsN.bits(x,12,11),
        BitsN.bits(x,30,14)]};

fun reg'ConfigRegister3 x =
  case x of
     {DSPP = DSPP, LPA = LPA, M = M, MT = MT, SM = SM, SP = SP, TL = TL,
      ULRI = ULRI, VEIC = VEIC, VInt = VInt,
      configregister3'rst = configregister3'rst} =>
      BitsN.modify
        (fn (i,_) =>
           if i = 31
             then M
           else if i = 30
             then BitsN.bit(configregister3'rst,16)
           else if i = 29
             then BitsN.bit(configregister3'rst,15)
           else if i = 28
             then BitsN.bit(configregister3'rst,14)
           else if i = 27
             then BitsN.bit(configregister3'rst,13)
           else if i = 26
             then BitsN.bit(configregister3'rst,12)
           else if i = 25
             then BitsN.bit(configregister3'rst,11)
           else if i = 24
             then BitsN.bit(configregister3'rst,10)
           else if i = 23
             then BitsN.bit(configregister3'rst,9)
           else if i = 22
             then BitsN.bit(configregister3'rst,8)
           else if i = 21
             then BitsN.bit(configregister3'rst,7)
           else if i = 20
             then BitsN.bit(configregister3'rst,6)
           else if i = 19
             then BitsN.bit(configregister3'rst,5)
           else if i = 18
             then BitsN.bit(configregister3'rst,4)
           else if i = 17
             then BitsN.bit(configregister3'rst,3)
           else if i = 16
             then BitsN.bit(configregister3'rst,2)
           else if i = 15
             then BitsN.bit(configregister3'rst,1)
           else if i = 14
             then BitsN.bit(configregister3'rst,0)
           else if i = 13
             then ULRI
           else if i = 12
             then BitsN.bit(configregister3'rst,18)
           else if i = 11
             then BitsN.bit(configregister3'rst,17)
           else if i = 10
             then DSPP
           else if i = 9
             then BitsN.bit(configregister3'rst,20)
           else if i = 8
             then BitsN.bit(configregister3'rst,19)
           else if i = 7
             then LPA
           else if i = 6
             then VEIC
           else if i = 5
             then VInt
           else if i = 4
             then SP
           else if i = 3
             then BitsN.bit(configregister3'rst,21)
           else if i = 2 then MT else if i = 1 then SM else TL,
         BitsN.B(0x0,32));

fun write'rec'ConfigRegister3 (_,x) = reg'ConfigRegister3 x;

fun write'reg'ConfigRegister3 (_,x) = rec'ConfigRegister3 x;

fun rec'ConfigRegister6 x =
  {LTLB = BitsN.bit(x,2), TLBSize = BitsN.bits(x,31,16),
   configregister6'rst = BitsN.@@(BitsN.bits(x,1,0),BitsN.bits(x,15,3))};

fun reg'ConfigRegister6 x =
  case x of
     {LTLB = LTLB, TLBSize = TLBSize,
      configregister6'rst = configregister6'rst} =>
      BitsN.modify
        (fn (i,_) =>
           if i = 31
             then BitsN.bit(TLBSize,15)
           else if i = 30
             then BitsN.bit(TLBSize,14)
           else if i = 29
             then BitsN.bit(TLBSize,13)
           else if i = 28
             then BitsN.bit(TLBSize,12)
           else if i = 27
             then BitsN.bit(TLBSize,11)
           else if i = 26
             then BitsN.bit(TLBSize,10)
           else if i = 25
             then BitsN.bit(TLBSize,9)
           else if i = 24
             then BitsN.bit(TLBSize,8)
           else if i = 23
             then BitsN.bit(TLBSize,7)
           else if i = 22
             then BitsN.bit(TLBSize,6)
           else if i = 21
             then BitsN.bit(TLBSize,5)
           else if i = 20
             then BitsN.bit(TLBSize,4)
           else if i = 19
             then BitsN.bit(TLBSize,3)
           else if i = 18
             then BitsN.bit(TLBSize,2)
           else if i = 17
             then BitsN.bit(TLBSize,1)
           else if i = 16
             then BitsN.bit(TLBSize,0)
           else if i = 15
             then BitsN.bit(configregister6'rst,12)
           else if i = 14
             then BitsN.bit(configregister6'rst,11)
           else if i = 13
             then BitsN.bit(configregister6'rst,10)
           else if i = 12
             then BitsN.bit(configregister6'rst,9)
           else if i = 11
             then BitsN.bit(configregister6'rst,8)
           else if i = 10
             then BitsN.bit(configregister6'rst,7)
           else if i = 9
             then BitsN.bit(configregister6'rst,6)
           else if i = 8
             then BitsN.bit(configregister6'rst,5)
           else if i = 7
             then BitsN.bit(configregister6'rst,4)
           else if i = 6
             then BitsN.bit(configregister6'rst,3)
           else if i = 5
             then BitsN.bit(configregister6'rst,2)
           else if i = 4
             then BitsN.bit(configregister6'rst,1)
           else if i = 3
             then BitsN.bit(configregister6'rst,0)
           else if i = 2
             then LTLB
           else if i = 1
             then BitsN.bit(configregister6'rst,14)
           else BitsN.bit(configregister6'rst,13),BitsN.B(0x0,32));

fun write'rec'ConfigRegister6 (_,x) = reg'ConfigRegister6 x;

fun write'reg'ConfigRegister6 (_,x) = rec'ConfigRegister6 x;

fun rec'CauseRegister x =
  {BD = BitsN.bit(x,31), CE = BitsN.bits(x,29,28),
   ExcCode = BitsN.bits(x,6,2), IP = BitsN.bits(x,15,8),
   TI = BitsN.bit(x,30),
   causeregister'rst =
     BitsN.concat[BitsN.bits(x,1,0),BitsN.bits(x,7,7),BitsN.bits(x,27,16)]};

fun reg'CauseRegister x =
  case x of
     {BD = BD, CE = CE, ExcCode = ExcCode, IP = IP, TI = TI,
      causeregister'rst = causeregister'rst} =>
      BitsN.modify
        (fn (i,_) =>
           if i = 31
             then BD
           else if i = 30
             then TI
           else if i = 29
             then BitsN.bit(CE,1)
           else if i = 28
             then BitsN.bit(CE,0)
           else if i = 27
             then BitsN.bit(causeregister'rst,11)
           else if i = 26
             then BitsN.bit(causeregister'rst,10)
           else if i = 25
             then BitsN.bit(causeregister'rst,9)
           else if i = 24
             then BitsN.bit(causeregister'rst,8)
           else if i = 23
             then BitsN.bit(causeregister'rst,7)
           else if i = 22
             then BitsN.bit(causeregister'rst,6)
           else if i = 21
             then BitsN.bit(causeregister'rst,5)
           else if i = 20
             then BitsN.bit(causeregister'rst,4)
           else if i = 19
             then BitsN.bit(causeregister'rst,3)
           else if i = 18
             then BitsN.bit(causeregister'rst,2)
           else if i = 17
             then BitsN.bit(causeregister'rst,1)
           else if i = 16
             then BitsN.bit(causeregister'rst,0)
           else if i = 15
             then BitsN.bit(IP,7)
           else if i = 14
             then BitsN.bit(IP,6)
           else if i = 13
             then BitsN.bit(IP,5)
           else if i = 12
             then BitsN.bit(IP,4)
           else if i = 11
             then BitsN.bit(IP,3)
           else if i = 10
             then BitsN.bit(IP,2)
           else if i = 9
             then BitsN.bit(IP,1)
           else if i = 8
             then BitsN.bit(IP,0)
           else if i = 7
             then BitsN.bit(causeregister'rst,12)
           else if i = 6
             then BitsN.bit(ExcCode,4)
           else if i = 5
             then BitsN.bit(ExcCode,3)
           else if i = 4
             then BitsN.bit(ExcCode,2)
           else if i = 3
             then BitsN.bit(ExcCode,1)
           else if i = 2
             then BitsN.bit(ExcCode,0)
           else if i = 1
             then BitsN.bit(causeregister'rst,14)
           else BitsN.bit(causeregister'rst,13),BitsN.B(0x0,32));

fun write'rec'CauseRegister (_,x) = reg'CauseRegister x;

fun write'reg'CauseRegister (_,x) = rec'CauseRegister x;

fun rec'Context x =
  {BadVPN2 = BitsN.bits(x,22,4), PTEBase = BitsN.bits(x,63,23),
   context'rst = BitsN.bits(x,3,0)};

fun reg'Context x =
  case x of
     {BadVPN2 = BadVPN2, PTEBase = PTEBase, context'rst = context'rst} =>
      BitsN.modify
        (fn (i,_) =>
           if i = 63
             then BitsN.bit(PTEBase,40)
           else if i = 62
             then BitsN.bit(PTEBase,39)
           else if i = 61
             then BitsN.bit(PTEBase,38)
           else if i = 60
             then BitsN.bit(PTEBase,37)
           else if i = 59
             then BitsN.bit(PTEBase,36)
           else if i = 58
             then BitsN.bit(PTEBase,35)
           else if i = 57
             then BitsN.bit(PTEBase,34)
           else if i = 56
             then BitsN.bit(PTEBase,33)
           else if i = 55
             then BitsN.bit(PTEBase,32)
           else if i = 54
             then BitsN.bit(PTEBase,31)
           else if i = 53
             then BitsN.bit(PTEBase,30)
           else if i = 52
             then BitsN.bit(PTEBase,29)
           else if i = 51
             then BitsN.bit(PTEBase,28)
           else if i = 50
             then BitsN.bit(PTEBase,27)
           else if i = 49
             then BitsN.bit(PTEBase,26)
           else if i = 48
             then BitsN.bit(PTEBase,25)
           else if i = 47
             then BitsN.bit(PTEBase,24)
           else if i = 46
             then BitsN.bit(PTEBase,23)
           else if i = 45
             then BitsN.bit(PTEBase,22)
           else if i = 44
             then BitsN.bit(PTEBase,21)
           else if i = 43
             then BitsN.bit(PTEBase,20)
           else if i = 42
             then BitsN.bit(PTEBase,19)
           else if i = 41
             then BitsN.bit(PTEBase,18)
           else if i = 40
             then BitsN.bit(PTEBase,17)
           else if i = 39
             then BitsN.bit(PTEBase,16)
           else if i = 38
             then BitsN.bit(PTEBase,15)
           else if i = 37
             then BitsN.bit(PTEBase,14)
           else if i = 36
             then BitsN.bit(PTEBase,13)
           else if i = 35
             then BitsN.bit(PTEBase,12)
           else if i = 34
             then BitsN.bit(PTEBase,11)
           else if i = 33
             then BitsN.bit(PTEBase,10)
           else if i = 32
             then BitsN.bit(PTEBase,9)
           else if i = 31
             then BitsN.bit(PTEBase,8)
           else if i = 30
             then BitsN.bit(PTEBase,7)
           else if i = 29
             then BitsN.bit(PTEBase,6)
           else if i = 28
             then BitsN.bit(PTEBase,5)
           else if i = 27
             then BitsN.bit(PTEBase,4)
           else if i = 26
             then BitsN.bit(PTEBase,3)
           else if i = 25
             then BitsN.bit(PTEBase,2)
           else if i = 24
             then BitsN.bit(PTEBase,1)
           else if i = 23
             then BitsN.bit(PTEBase,0)
           else if i = 22
             then BitsN.bit(BadVPN2,18)
           else if i = 21
             then BitsN.bit(BadVPN2,17)
           else if i = 20
             then BitsN.bit(BadVPN2,16)
           else if i = 19
             then BitsN.bit(BadVPN2,15)
           else if i = 18
             then BitsN.bit(BadVPN2,14)
           else if i = 17
             then BitsN.bit(BadVPN2,13)
           else if i = 16
             then BitsN.bit(BadVPN2,12)
           else if i = 15
             then BitsN.bit(BadVPN2,11)
           else if i = 14
             then BitsN.bit(BadVPN2,10)
           else if i = 13
             then BitsN.bit(BadVPN2,9)
           else if i = 12
             then BitsN.bit(BadVPN2,8)
           else if i = 11
             then BitsN.bit(BadVPN2,7)
           else if i = 10
             then BitsN.bit(BadVPN2,6)
           else if i = 9
             then BitsN.bit(BadVPN2,5)
           else if i = 8
             then BitsN.bit(BadVPN2,4)
           else if i = 7
             then BitsN.bit(BadVPN2,3)
           else if i = 6
             then BitsN.bit(BadVPN2,2)
           else if i = 5
             then BitsN.bit(BadVPN2,1)
           else if i = 4
             then BitsN.bit(BadVPN2,0)
           else if i = 3
             then BitsN.bit(context'rst,3)
           else if i = 2
             then BitsN.bit(context'rst,2)
           else if i = 1
             then BitsN.bit(context'rst,1)
           else BitsN.bit(context'rst,0),BitsN.B(0x0,64));

fun write'rec'Context (_,x) = reg'Context x;

fun write'reg'Context (_,x) = rec'Context x;

fun rec'XContext x =
  {BadVPN2 = BitsN.bits(x,30,4), PTEBase = BitsN.bits(x,63,33),
   R = BitsN.bits(x,32,31), xcontext'rst = BitsN.bits(x,3,0)};

fun reg'XContext x =
  case x of
     {BadVPN2 = BadVPN2, PTEBase = PTEBase, R = R,
      xcontext'rst = xcontext'rst} =>
      BitsN.modify
        (fn (i,_) =>
           if i = 63
             then BitsN.bit(PTEBase,30)
           else if i = 62
             then BitsN.bit(PTEBase,29)
           else if i = 61
             then BitsN.bit(PTEBase,28)
           else if i = 60
             then BitsN.bit(PTEBase,27)
           else if i = 59
             then BitsN.bit(PTEBase,26)
           else if i = 58
             then BitsN.bit(PTEBase,25)
           else if i = 57
             then BitsN.bit(PTEBase,24)
           else if i = 56
             then BitsN.bit(PTEBase,23)
           else if i = 55
             then BitsN.bit(PTEBase,22)
           else if i = 54
             then BitsN.bit(PTEBase,21)
           else if i = 53
             then BitsN.bit(PTEBase,20)
           else if i = 52
             then BitsN.bit(PTEBase,19)
           else if i = 51
             then BitsN.bit(PTEBase,18)
           else if i = 50
             then BitsN.bit(PTEBase,17)
           else if i = 49
             then BitsN.bit(PTEBase,16)
           else if i = 48
             then BitsN.bit(PTEBase,15)
           else if i = 47
             then BitsN.bit(PTEBase,14)
           else if i = 46
             then BitsN.bit(PTEBase,13)
           else if i = 45
             then BitsN.bit(PTEBase,12)
           else if i = 44
             then BitsN.bit(PTEBase,11)
           else if i = 43
             then BitsN.bit(PTEBase,10)
           else if i = 42
             then BitsN.bit(PTEBase,9)
           else if i = 41
             then BitsN.bit(PTEBase,8)
           else if i = 40
             then BitsN.bit(PTEBase,7)
           else if i = 39
             then BitsN.bit(PTEBase,6)
           else if i = 38
             then BitsN.bit(PTEBase,5)
           else if i = 37
             then BitsN.bit(PTEBase,4)
           else if i = 36
             then BitsN.bit(PTEBase,3)
           else if i = 35
             then BitsN.bit(PTEBase,2)
           else if i = 34
             then BitsN.bit(PTEBase,1)
           else if i = 33
             then BitsN.bit(PTEBase,0)
           else if i = 32
             then BitsN.bit(R,1)
           else if i = 31
             then BitsN.bit(R,0)
           else if i = 30
             then BitsN.bit(BadVPN2,26)
           else if i = 29
             then BitsN.bit(BadVPN2,25)
           else if i = 28
             then BitsN.bit(BadVPN2,24)
           else if i = 27
             then BitsN.bit(BadVPN2,23)
           else if i = 26
             then BitsN.bit(BadVPN2,22)
           else if i = 25
             then BitsN.bit(BadVPN2,21)
           else if i = 24
             then BitsN.bit(BadVPN2,20)
           else if i = 23
             then BitsN.bit(BadVPN2,19)
           else if i = 22
             then BitsN.bit(BadVPN2,18)
           else if i = 21
             then BitsN.bit(BadVPN2,17)
           else if i = 20
             then BitsN.bit(BadVPN2,16)
           else if i = 19
             then BitsN.bit(BadVPN2,15)
           else if i = 18
             then BitsN.bit(BadVPN2,14)
           else if i = 17
             then BitsN.bit(BadVPN2,13)
           else if i = 16
             then BitsN.bit(BadVPN2,12)
           else if i = 15
             then BitsN.bit(BadVPN2,11)
           else if i = 14
             then BitsN.bit(BadVPN2,10)
           else if i = 13
             then BitsN.bit(BadVPN2,9)
           else if i = 12
             then BitsN.bit(BadVPN2,8)
           else if i = 11
             then BitsN.bit(BadVPN2,7)
           else if i = 10
             then BitsN.bit(BadVPN2,6)
           else if i = 9
             then BitsN.bit(BadVPN2,5)
           else if i = 8
             then BitsN.bit(BadVPN2,4)
           else if i = 7
             then BitsN.bit(BadVPN2,3)
           else if i = 6
             then BitsN.bit(BadVPN2,2)
           else if i = 5
             then BitsN.bit(BadVPN2,1)
           else if i = 4
             then BitsN.bit(BadVPN2,0)
           else if i = 3
             then BitsN.bit(xcontext'rst,3)
           else if i = 2
             then BitsN.bit(xcontext'rst,2)
           else if i = 1
             then BitsN.bit(xcontext'rst,1)
           else BitsN.bit(xcontext'rst,0),BitsN.B(0x0,64));

fun write'rec'XContext (_,x) = reg'XContext x;

fun write'reg'XContext (_,x) = rec'XContext x;

fun rec'HWREna x =
  {CC = BitsN.bit(x,2), CCRes = BitsN.bit(x,3), CPUNum = BitsN.bit(x,0),
   UL = BitsN.bit(x,29),
   hwrena'rst =
     BitsN.concat
       [BitsN.bits(x,1,1),BitsN.bits(x,28,4),BitsN.bits(x,31,30)]};

fun reg'HWREna x =
  case x of
     {CC = CC, CCRes = CCRes, CPUNum = CPUNum, UL = UL,
      hwrena'rst = hwrena'rst} =>
      BitsN.modify
        (fn (i,_) =>
           if i = 31
             then BitsN.bit(hwrena'rst,1)
           else if i = 30
             then BitsN.bit(hwrena'rst,0)
           else if i = 29
             then UL
           else if i = 28
             then BitsN.bit(hwrena'rst,26)
           else if i = 27
             then BitsN.bit(hwrena'rst,25)
           else if i = 26
             then BitsN.bit(hwrena'rst,24)
           else if i = 25
             then BitsN.bit(hwrena'rst,23)
           else if i = 24
             then BitsN.bit(hwrena'rst,22)
           else if i = 23
             then BitsN.bit(hwrena'rst,21)
           else if i = 22
             then BitsN.bit(hwrena'rst,20)
           else if i = 21
             then BitsN.bit(hwrena'rst,19)
           else if i = 20
             then BitsN.bit(hwrena'rst,18)
           else if i = 19
             then BitsN.bit(hwrena'rst,17)
           else if i = 18
             then BitsN.bit(hwrena'rst,16)
           else if i = 17
             then BitsN.bit(hwrena'rst,15)
           else if i = 16
             then BitsN.bit(hwrena'rst,14)
           else if i = 15
             then BitsN.bit(hwrena'rst,13)
           else if i = 14
             then BitsN.bit(hwrena'rst,12)
           else if i = 13
             then BitsN.bit(hwrena'rst,11)
           else if i = 12
             then BitsN.bit(hwrena'rst,10)
           else if i = 11
             then BitsN.bit(hwrena'rst,9)
           else if i = 10
             then BitsN.bit(hwrena'rst,8)
           else if i = 9
             then BitsN.bit(hwrena'rst,7)
           else if i = 8
             then BitsN.bit(hwrena'rst,6)
           else if i = 7
             then BitsN.bit(hwrena'rst,5)
           else if i = 6
             then BitsN.bit(hwrena'rst,4)
           else if i = 5
             then BitsN.bit(hwrena'rst,3)
           else if i = 4
             then BitsN.bit(hwrena'rst,2)
           else if i = 3
             then CCRes
           else if i = 2
             then CC
           else if i = 1 then BitsN.bit(hwrena'rst,27) else CPUNum,
         BitsN.B(0x0,32));

fun write'rec'HWREna (_,x) = reg'HWREna x;

fun write'reg'HWREna (_,x) = rec'HWREna x;

val BYTE = BitsN.B(0x0,3)

val HALFWORD = BitsN.B(0x1,3)

val WORD = BitsN.B(0x3,3)

val DOUBLEWORD = BitsN.B(0x7,3)

fun gpr n =
  let
    val m = Map.copy(Map.lookup((!c_gpr),BitsN.toNat (!procID)))
  in
    Map.lookup(m,BitsN.toNat n)
  end;

fun write'gpr (value,n) =
  let
    val m = ref (Map.copy(Map.lookup((!c_gpr),BitsN.toNat (!procID))))
  in
    ( m := (Map.update((!m),BitsN.toNat n,value))
    ; c_gpr := (Map.update((!c_gpr),BitsN.toNat (!procID),(!m)))
    )
  end;

fun PC () = Map.lookup((!c_PC),BitsN.toNat (!procID));

fun write'PC value =
  c_PC := (Map.update((!c_PC),BitsN.toNat (!procID),value));

fun hi () = Map.lookup((!c_hi),BitsN.toNat (!procID));

fun write'hi value =
  c_hi := (Map.update((!c_hi),BitsN.toNat (!procID),value));

fun lo () = Map.lookup((!c_lo),BitsN.toNat (!procID));

fun write'lo value =
  c_lo := (Map.update((!c_lo),BitsN.toNat (!procID),value));

fun CP0 () = Map.lookup((!c_CP0),BitsN.toNat (!procID));

fun write'CP0 value =
  c_CP0 := (Map.update((!c_CP0),BitsN.toNat (!procID),value));

fun BranchDelay () = Map.lookup((!c_BranchDelay),BitsN.toNat (!procID));

fun write'BranchDelay value =
  c_BranchDelay :=
  (Map.update((!c_BranchDelay),BitsN.toNat (!procID),value));

fun BranchTo () = Map.lookup((!c_BranchTo),BitsN.toNat (!procID));

fun write'BranchTo value =
  c_BranchTo := (Map.update((!c_BranchTo),BitsN.toNat (!procID),value));

fun LLbit () = Map.lookup((!c_LLbit),BitsN.toNat (!procID));

fun write'LLbit value =
  c_LLbit := (Map.update((!c_LLbit),BitsN.toNat (!procID),value));

fun exceptionSignalled () =
  Map.lookup((!c_exceptionSignalled),BitsN.toNat (!procID));

fun write'exceptionSignalled value =
  c_exceptionSignalled :=
  (Map.update((!c_exceptionSignalled),BitsN.toNat (!procID),value));

fun UserMode () =
  (((#KSU)((#Status)(CP0 ()))) = (BitsN.B(0x2,2))) andalso
  (not(((#EXL)((#Status)(CP0 ()))) orelse ((#ERL)((#Status)(CP0 ())))));

fun SupervisorMode () =
  (((#KSU)((#Status)(CP0 ()))) = (BitsN.B(0x1,2))) andalso
  (not(((#EXL)((#Status)(CP0 ()))) orelse ((#ERL)((#Status)(CP0 ())))));

fun KernelMode () =
  ((((#KSU)((#Status)(CP0 ()))) = (BitsN.B(0x0,2))) orelse
   ((#EXL)((#Status)(CP0 ())))) orelse ((#ERL)((#Status)(CP0 ())));

fun BigEndianMem () = (#BE)((#Config)(CP0 ()));

fun ReverseEndian () =
  BitsN.fromBit(((#RE)((#Status)(CP0 ()))) andalso (UserMode ()));

fun BigEndianCPU () =
  BitsN.??(BitsN.fromBit(BigEndianMem ()),ReverseEndian ());

fun NotWordValue value =
  let
    val top = BitsN.bits(value,63,32)
  in
    if BitsN.bit(value,31)
      then not(top = (BitsN.B(0xFFFFFFFF,32)))
    else not(top = (BitsN.B(0x0,32)))
  end;

fun cpr r =
  ("c0_")
    ^
    (case r of
      BitsN.B(0x0,5) => "index"
    | BitsN.B(0x1,5) => "random"
    | BitsN.B(0x2,5) => "entrylo0"
    | BitsN.B(0x3,5) => "entrylo1"
    | BitsN.B(0x4,5) => "context"
    | BitsN.B(0x5,5) => "pagemask"
    | BitsN.B(0x6,5) => "wired"
    | BitsN.B(0x7,5) => "hwrena"
    | BitsN.B(0x8,5) => "badvaddr"
    | BitsN.B(0x9,5) => "count"
    | BitsN.B(0xA,5) => "entryhi"
    | BitsN.B(0xB,5) => "compare"
    | BitsN.B(0xC,5) => "status"
    | BitsN.B(0xD,5) => "cause"
    | BitsN.B(0xE,5) => "epc"
    | BitsN.B(0xF,5) => "prid"
    | BitsN.B(0x10,5) => "config"
    | BitsN.B(0x11,5) => "lladdr"
    | BitsN.B(0x12,5) => "watchlo"
    | BitsN.B(0x13,5) => "watchhi"
    | BitsN.B(0x14,5) => "xcontext"
    | BitsN.B(0x15,5) => "21"
    | BitsN.B(0x16,5) => "22"
    | BitsN.B(0x17,5) => "debug"
    | BitsN.B(0x18,5) => "depc"
    | BitsN.B(0x19,5) => "perfcnt"
    | BitsN.B(0x1A,5) => "errctl"
    | BitsN.B(0x1B,5) => "cacheerr"
    | BitsN.B(0x1C,5) => "taglo"
    | BitsN.B(0x1D,5) => "taghi"
    | BitsN.B(0x1E,5) => "errorepc"
    | BitsN.B(0x1F,5) => "kscratch"
    | _ => raise General.Bind);

fun log_sig_exception ExceptionCode =
  ("Exception 0x")
    ^
    (L3.padLeftString(#"0",(2,BitsN.toHexString ExceptionCode)));

fun log_w_gpr (r,data) =
  String.concat
    ["Reg ",Nat.toString(BitsN.toNat r)," <- 0x",
     L3.padLeftString(#"0",(16,BitsN.toHexString data))];

fun log_w_hi data =
  ("HI <- 0x") ^ (L3.padLeftString(#"0",(16,BitsN.toHexString data)));

fun log_w_lo data =
  ("LO <- 0x") ^ (L3.padLeftString(#"0",(16,BitsN.toHexString data)));

fun log_w_c0 (r,data) =
  String.concat
    [cpr r," <- 0x",L3.padLeftString(#"0",(16,BitsN.toHexString data))];

fun log_w_mem (addr,(mask,data)) =
  String.concat
    ["MEM[0x",L3.padLeftString(#"0",(10,BitsN.toHexString addr)),
     "] <- (data: 0x",L3.padLeftString(#"0",(16,BitsN.toHexString data)),
     ", mask: 0x",L3.padLeftString(#"0",(16,BitsN.toHexString mask)),")"];

fun log_r_mem (addr,data) =
  String.concat
    ["data <- MEM[0x",L3.padLeftString(#"0",(10,BitsN.toHexString addr)),
     "]: 0x",L3.padLeftString(#"0",(16,BitsN.toHexString data))];

fun mark_log (lvl,s) =
  log := (Map.update((!log),lvl,s :: (Map.lookup((!log),lvl))));

fun unmark_log lvl =
  log := (Map.update((!log),lvl,List.tl(Map.lookup((!log),lvl))));

fun clear_logs () = L3.for(0,5,fn i => log := (Map.update((!log),i,[])));

fun hex32 x = L3.padLeftString(#"0",(8,BitsN.toHexString x));

fun hex64 x = L3.padLeftString(#"0",(16,BitsN.toHexString x));

fun rec'PIC_Config_Reg x =
  {EN = BitsN.bit(x,31), IRQ = BitsN.bits(x,2,0),
   pic_config_reg'rst = BitsN.@@(BitsN.bits(x,30,3),BitsN.bits(x,63,32))};

fun reg'PIC_Config_Reg x =
  case x of
     {EN = EN, IRQ = IRQ, pic_config_reg'rst = pic_config_reg'rst} =>
      BitsN.modify
        (fn (i,_) =>
           if i = 63
             then BitsN.bit(pic_config_reg'rst,31)
           else if i = 62
             then BitsN.bit(pic_config_reg'rst,30)
           else if i = 61
             then BitsN.bit(pic_config_reg'rst,29)
           else if i = 60
             then BitsN.bit(pic_config_reg'rst,28)
           else if i = 59
             then BitsN.bit(pic_config_reg'rst,27)
           else if i = 58
             then BitsN.bit(pic_config_reg'rst,26)
           else if i = 57
             then BitsN.bit(pic_config_reg'rst,25)
           else if i = 56
             then BitsN.bit(pic_config_reg'rst,24)
           else if i = 55
             then BitsN.bit(pic_config_reg'rst,23)
           else if i = 54
             then BitsN.bit(pic_config_reg'rst,22)
           else if i = 53
             then BitsN.bit(pic_config_reg'rst,21)
           else if i = 52
             then BitsN.bit(pic_config_reg'rst,20)
           else if i = 51
             then BitsN.bit(pic_config_reg'rst,19)
           else if i = 50
             then BitsN.bit(pic_config_reg'rst,18)
           else if i = 49
             then BitsN.bit(pic_config_reg'rst,17)
           else if i = 48
             then BitsN.bit(pic_config_reg'rst,16)
           else if i = 47
             then BitsN.bit(pic_config_reg'rst,15)
           else if i = 46
             then BitsN.bit(pic_config_reg'rst,14)
           else if i = 45
             then BitsN.bit(pic_config_reg'rst,13)
           else if i = 44
             then BitsN.bit(pic_config_reg'rst,12)
           else if i = 43
             then BitsN.bit(pic_config_reg'rst,11)
           else if i = 42
             then BitsN.bit(pic_config_reg'rst,10)
           else if i = 41
             then BitsN.bit(pic_config_reg'rst,9)
           else if i = 40
             then BitsN.bit(pic_config_reg'rst,8)
           else if i = 39
             then BitsN.bit(pic_config_reg'rst,7)
           else if i = 38
             then BitsN.bit(pic_config_reg'rst,6)
           else if i = 37
             then BitsN.bit(pic_config_reg'rst,5)
           else if i = 36
             then BitsN.bit(pic_config_reg'rst,4)
           else if i = 35
             then BitsN.bit(pic_config_reg'rst,3)
           else if i = 34
             then BitsN.bit(pic_config_reg'rst,2)
           else if i = 33
             then BitsN.bit(pic_config_reg'rst,1)
           else if i = 32
             then BitsN.bit(pic_config_reg'rst,0)
           else if i = 31
             then EN
           else if i = 30
             then BitsN.bit(pic_config_reg'rst,59)
           else if i = 29
             then BitsN.bit(pic_config_reg'rst,58)
           else if i = 28
             then BitsN.bit(pic_config_reg'rst,57)
           else if i = 27
             then BitsN.bit(pic_config_reg'rst,56)
           else if i = 26
             then BitsN.bit(pic_config_reg'rst,55)
           else if i = 25
             then BitsN.bit(pic_config_reg'rst,54)
           else if i = 24
             then BitsN.bit(pic_config_reg'rst,53)
           else if i = 23
             then BitsN.bit(pic_config_reg'rst,52)
           else if i = 22
             then BitsN.bit(pic_config_reg'rst,51)
           else if i = 21
             then BitsN.bit(pic_config_reg'rst,50)
           else if i = 20
             then BitsN.bit(pic_config_reg'rst,49)
           else if i = 19
             then BitsN.bit(pic_config_reg'rst,48)
           else if i = 18
             then BitsN.bit(pic_config_reg'rst,47)
           else if i = 17
             then BitsN.bit(pic_config_reg'rst,46)
           else if i = 16
             then BitsN.bit(pic_config_reg'rst,45)
           else if i = 15
             then BitsN.bit(pic_config_reg'rst,44)
           else if i = 14
             then BitsN.bit(pic_config_reg'rst,43)
           else if i = 13
             then BitsN.bit(pic_config_reg'rst,42)
           else if i = 12
             then BitsN.bit(pic_config_reg'rst,41)
           else if i = 11
             then BitsN.bit(pic_config_reg'rst,40)
           else if i = 10
             then BitsN.bit(pic_config_reg'rst,39)
           else if i = 9
             then BitsN.bit(pic_config_reg'rst,38)
           else if i = 8
             then BitsN.bit(pic_config_reg'rst,37)
           else if i = 7
             then BitsN.bit(pic_config_reg'rst,36)
           else if i = 6
             then BitsN.bit(pic_config_reg'rst,35)
           else if i = 5
             then BitsN.bit(pic_config_reg'rst,34)
           else if i = 4
             then BitsN.bit(pic_config_reg'rst,33)
           else if i = 3
             then BitsN.bit(pic_config_reg'rst,32)
           else if i = 2
             then BitsN.bit(IRQ,2)
           else if i = 1 then BitsN.bit(IRQ,1) else BitsN.bit(IRQ,0),
         BitsN.B(0x0,64));

fun write'rec'PIC_Config_Reg (_,x) = reg'PIC_Config_Reg x;

fun write'reg'PIC_Config_Reg (_,x) = rec'PIC_Config_Reg x;

fun PIC_update id =
  let
    val ext =
      BitsN.zeroExtend 128
        (Map.lookup((!PIC_external_intrs),BitsN.toNat id))
    val config_regs =
      Map.copy(Map.lookup((!PIC_config_regs),BitsN.toNat id))
  in
    let
      val ip = ref (BitsN.B(0x0,8))
    in
      ( ip := (BitsN.B(0x0,8))
      ; if (not((Map.lookup((!PIC_ip_bits),BitsN.toNat id)) =
                (BitsN.B(0x0,128)))) orelse
           (not(ext = (BitsN.B(0x0,128))))
          then L3.for
                 (0,127,
                  fn i =>
                    if (BitsN.bit
                          (Map.lookup((!PIC_ip_bits),BitsN.toNat id),i)) orelse
                       (BitsN.bit(ext,i))
                      then let
                             val reg =
                               Map.lookup
                                 (config_regs,
                                  BitsN.toNat(BitsN.fromNat(i,7)))
                             val i = BitsN.toNat((#IRQ) reg)
                           in
                             ip :=
                             (BitsN.bitFieldInsert
                                ((!ip),
                                 BitsN.fromBit
                                   ((BitsN.bit
                                       ((!ip),BitsN.toNat((#IRQ) reg))) orelse
                                    ((#EN) reg)),i,i))
                           end
                    else ())
        else ()
      ; let
          val x0 = Map.lookup((!c_CP0),BitsN.toNat id)
          val x1 = (#Cause) x0
          val w = (#IP) x1
        in
          c_CP0 :=
          (Map.update
             ((!c_CP0),BitsN.toNat id,
              CP0_Cause_rupd
                (x0,
                 CauseRegister_IP_rupd
                   (x1,BitsN.bitFieldInsert(w,BitsN.bits((!ip),4,0),6,2)))))
        end
      )
    end
  end;

fun PIC_initialise pic =
  let
    val id = (!procID)
  in
    ( PIC_base_address :=
      (Map.update
         ((!PIC_base_address),BitsN.toNat id,
          BitsN.fromNat
            (BitsN.toNat(BitsN.>>+(BitsN.fromNat(pic,40),3)),37)))
    ; let
        val config_regs = ref (Map.copy
             (Map.lookup((!PIC_config_regs),BitsN.toNat id)))
      in
        ( L3.for
            (0,127,
             fn i =>
               let
                 val x = BitsN.fromNat(i,7)
                 val x0 = Map.lookup((!config_regs),BitsN.toNat x)
               in
                 config_regs :=
                 (Map.update
                    ((!config_regs),BitsN.toNat x,
                     write'reg'PIC_Config_Reg(x0,BitsN.B(0x0,64))))
               end)
        ; L3.for
            (0,4,
             fn i =>
               ( let
                   val x = BitsN.fromNat(i,7)
                   val x0 = Map.lookup((!config_regs),BitsN.toNat x)
                 in
                   config_regs :=
                   (Map.update
                      ((!config_regs),BitsN.toNat x,
                       PIC_Config_Reg_EN_rupd(x0,true)))
                 end
               ; let
                   val x = BitsN.fromNat(i,7)
                   val x0 = Map.lookup((!config_regs),BitsN.toNat x)
                 in
                   config_regs :=
                   (Map.update
                      ((!config_regs),BitsN.toNat x,
                       PIC_Config_Reg_IRQ_rupd(x0,BitsN.fromNat(i,3))))
                 end
               ))
        ; PIC_config_regs :=
          (Map.update((!PIC_config_regs),BitsN.toNat id,(!config_regs)))
        ; PIC_ip_bits :=
          (Map.update((!PIC_ip_bits),BitsN.toNat id,BitsN.B(0x0,128)))
        ; PIC_external_intrs :=
          (Map.update
             ((!PIC_external_intrs),BitsN.toNat id,BitsN.B(0x0,64)))
        ; PIC_update id
        )
      end
    )
  end;

fun PIC_load (id,addr) =
  let
    val offset =
      BitsN.-(addr,Map.lookup((!PIC_base_address),BitsN.toNat id))
    val config_regs =
      Map.copy(Map.lookup((!PIC_config_regs),BitsN.toNat id))
  in
    let
      val ret = ref (BitsN.B(0x0,64))
    in
      ( if BitsN.<(offset,BitsN.B(0x80,37))
          then ret :=
               (reg'PIC_Config_Reg
                  (Map.lookup
                     (config_regs,
                      BitsN.toNat(BitsN.fromNat(BitsN.toNat offset,7)))))
        else if offset = (BitsN.B(0x400,37))
          then ret :=
               (BitsN.||
                  (BitsN.bits
                     (Map.lookup((!PIC_ip_bits),BitsN.toNat id),63,0),
                   Map.lookup((!PIC_external_intrs),BitsN.toNat id)))
        else if offset = (BitsN.B(0x401,37))
          then ret :=
               (BitsN.bits
                  (Map.lookup((!PIC_ip_bits),BitsN.toNat id),127,64))
        else ret := (BitsN.B(0x0,64))
      ; (!ret)
      )
    end
  end;

fun PIC_store (id,(addr,(mask,data))) =
  let
    val offset =
      BitsN.-(addr,Map.lookup((!PIC_base_address),BitsN.toNat id))
  in
    let
      val config_regs = ref (Map.copy
           (Map.lookup((!PIC_config_regs),BitsN.toNat id)))
    in
      ( if BitsN.<(offset,BitsN.B(0x80,37))
          then let
                 val x = BitsN.fromNat(BitsN.toNat offset,7)
                 val x0 = Map.lookup((!config_regs),BitsN.toNat x)
               in
                 config_regs :=
                 (Map.update
                    ((!config_regs),BitsN.toNat x,
                     write'reg'PIC_Config_Reg(x0,data)))
               end
        else if BitsN.<(offset,BitsN.B(0x410,37))
          then ()
        else if offset = (BitsN.B(0x410,37))
          then let
                 val w = Map.lookup((!PIC_ip_bits),BitsN.toNat id)
               in
                 PIC_ip_bits :=
                 (Map.update
                    ((!PIC_ip_bits),BitsN.toNat id,
                     BitsN.bitFieldInsert
                       (w,
                        BitsN.||
                          (BitsN.bits
                             (Map.lookup((!PIC_ip_bits),BitsN.toNat id),
                              63,0),data),63,0)))
               end
        else if offset = (BitsN.B(0x411,37))
          then let
                 val w = Map.lookup((!PIC_ip_bits),BitsN.toNat id)
               in
                 PIC_ip_bits :=
                 (Map.update
                    ((!PIC_ip_bits),BitsN.toNat id,
                     BitsN.bitFieldInsert
                       (w,
                        BitsN.||
                          (BitsN.bits
                             (Map.lookup((!PIC_ip_bits),BitsN.toNat id),
                              127,64),data),127,64)))
               end
        else if offset = (BitsN.B(0x420,37))
          then let
                 val w = Map.lookup((!PIC_ip_bits),BitsN.toNat id)
               in
                 PIC_ip_bits :=
                 (Map.update
                    ((!PIC_ip_bits),BitsN.toNat id,
                     BitsN.bitFieldInsert
                       (w,
                        BitsN.&&
                          (BitsN.bits
                             (Map.lookup((!PIC_ip_bits),BitsN.toNat id),
                              63,0),BitsN.~ data),63,0)))
               end
        else if offset = (BitsN.B(0x421,37))
          then let
                 val w = Map.lookup((!PIC_ip_bits),BitsN.toNat id)
               in
                 PIC_ip_bits :=
                 (Map.update
                    ((!PIC_ip_bits),BitsN.toNat id,
                     BitsN.bitFieldInsert
                       (w,
                        BitsN.&&
                          (BitsN.bits
                             (Map.lookup((!PIC_ip_bits),BitsN.toNat id),
                              127,64),BitsN.~ data),127,64)))
               end
        else ()
      ; PIC_config_regs :=
        (Map.update((!PIC_config_regs),BitsN.toNat id,(!config_regs)))
      ; PIC_update id
      )
    end
  end;

fun rec'JTAG_UART_data x =
  {RAVAIL = BitsN.bits(x,31,16), RVALID = BitsN.bit(x,15),
   RW_DATA = BitsN.bits(x,7,0), jtag_uart_data'rst = BitsN.bits(x,14,8)};

fun reg'JTAG_UART_data x =
  case x of
     {RAVAIL = RAVAIL, RVALID = RVALID, RW_DATA = RW_DATA,
      jtag_uart_data'rst = jtag_uart_data'rst} =>
      BitsN.modify
        (fn (i,_) =>
           if i = 31
             then BitsN.bit(RAVAIL,15)
           else if i = 30
             then BitsN.bit(RAVAIL,14)
           else if i = 29
             then BitsN.bit(RAVAIL,13)
           else if i = 28
             then BitsN.bit(RAVAIL,12)
           else if i = 27
             then BitsN.bit(RAVAIL,11)
           else if i = 26
             then BitsN.bit(RAVAIL,10)
           else if i = 25
             then BitsN.bit(RAVAIL,9)
           else if i = 24
             then BitsN.bit(RAVAIL,8)
           else if i = 23
             then BitsN.bit(RAVAIL,7)
           else if i = 22
             then BitsN.bit(RAVAIL,6)
           else if i = 21
             then BitsN.bit(RAVAIL,5)
           else if i = 20
             then BitsN.bit(RAVAIL,4)
           else if i = 19
             then BitsN.bit(RAVAIL,3)
           else if i = 18
             then BitsN.bit(RAVAIL,2)
           else if i = 17
             then BitsN.bit(RAVAIL,1)
           else if i = 16
             then BitsN.bit(RAVAIL,0)
           else if i = 15
             then RVALID
           else if i = 14
             then BitsN.bit(jtag_uart_data'rst,6)
           else if i = 13
             then BitsN.bit(jtag_uart_data'rst,5)
           else if i = 12
             then BitsN.bit(jtag_uart_data'rst,4)
           else if i = 11
             then BitsN.bit(jtag_uart_data'rst,3)
           else if i = 10
             then BitsN.bit(jtag_uart_data'rst,2)
           else if i = 9
             then BitsN.bit(jtag_uart_data'rst,1)
           else if i = 8
             then BitsN.bit(jtag_uart_data'rst,0)
           else if i = 7
             then BitsN.bit(RW_DATA,7)
           else if i = 6
             then BitsN.bit(RW_DATA,6)
           else if i = 5
             then BitsN.bit(RW_DATA,5)
           else if i = 4
             then BitsN.bit(RW_DATA,4)
           else if i = 3
             then BitsN.bit(RW_DATA,3)
           else if i = 2
             then BitsN.bit(RW_DATA,2)
           else if i = 1
             then BitsN.bit(RW_DATA,1)
           else BitsN.bit(RW_DATA,0),BitsN.B(0x0,32));

fun write'rec'JTAG_UART_data (_,x) = reg'JTAG_UART_data x;

fun write'reg'JTAG_UART_data (_,x) = rec'JTAG_UART_data x;

fun rec'JTAG_UART_control x =
  {AC = BitsN.bit(x,10), RE = BitsN.bit(x,0), RI = BitsN.bit(x,8),
   WE = BitsN.bit(x,1), WI = BitsN.bit(x,9), WSPACE = BitsN.bits(x,31,16),
   jtag_uart_control'rst = BitsN.@@(BitsN.bits(x,7,2),BitsN.bits(x,15,11))};

fun reg'JTAG_UART_control x =
  case x of
     {AC = AC, RE = RE, RI = RI, WE = WE, WI = WI, WSPACE = WSPACE,
      jtag_uart_control'rst = jtag_uart_control'rst} =>
      BitsN.modify
        (fn (i,_) =>
           if i = 31
             then BitsN.bit(WSPACE,15)
           else if i = 30
             then BitsN.bit(WSPACE,14)
           else if i = 29
             then BitsN.bit(WSPACE,13)
           else if i = 28
             then BitsN.bit(WSPACE,12)
           else if i = 27
             then BitsN.bit(WSPACE,11)
           else if i = 26
             then BitsN.bit(WSPACE,10)
           else if i = 25
             then BitsN.bit(WSPACE,9)
           else if i = 24
             then BitsN.bit(WSPACE,8)
           else if i = 23
             then BitsN.bit(WSPACE,7)
           else if i = 22
             then BitsN.bit(WSPACE,6)
           else if i = 21
             then BitsN.bit(WSPACE,5)
           else if i = 20
             then BitsN.bit(WSPACE,4)
           else if i = 19
             then BitsN.bit(WSPACE,3)
           else if i = 18
             then BitsN.bit(WSPACE,2)
           else if i = 17
             then BitsN.bit(WSPACE,1)
           else if i = 16
             then BitsN.bit(WSPACE,0)
           else if i = 15
             then BitsN.bit(jtag_uart_control'rst,4)
           else if i = 14
             then BitsN.bit(jtag_uart_control'rst,3)
           else if i = 13
             then BitsN.bit(jtag_uart_control'rst,2)
           else if i = 12
             then BitsN.bit(jtag_uart_control'rst,1)
           else if i = 11
             then BitsN.bit(jtag_uart_control'rst,0)
           else if i = 10
             then AC
           else if i = 9
             then WI
           else if i = 8
             then RI
           else if i = 7
             then BitsN.bit(jtag_uart_control'rst,10)
           else if i = 6
             then BitsN.bit(jtag_uart_control'rst,9)
           else if i = 5
             then BitsN.bit(jtag_uart_control'rst,8)
           else if i = 4
             then BitsN.bit(jtag_uart_control'rst,7)
           else if i = 3
             then BitsN.bit(jtag_uart_control'rst,6)
           else if i = 2
             then BitsN.bit(jtag_uart_control'rst,5)
           else if i = 1 then WE else RE,BitsN.B(0x0,32));

fun write'rec'JTAG_UART_control (_,x) = reg'JTAG_UART_control x;

fun write'reg'JTAG_UART_control (_,x) = rec'JTAG_UART_control x;

fun JTAG_UART_update_interrupt_bit () =
  let
    val readIntr =
      ((#RE)((#control) (!JTAG_UART))) andalso
      ((#RVALID)((#data) (!JTAG_UART)))
  in
    if not(((#RI)((#control) (!JTAG_UART))) = readIntr)
      then ( let
               val x0 = (#control) (!JTAG_UART)
             in
               JTAG_UART :=
               (JTAG_UART_control_rupd
                  ((!JTAG_UART),JTAG_UART_control_RI_rupd(x0,readIntr)))
             end
           ; let
               val w =
                 Map.lookup
                   ((!PIC_external_intrs),BitsN.toNat(BitsN.B(0x0,8)))
             in
               PIC_external_intrs :=
               (Map.update
                  ((!PIC_external_intrs),BitsN.toNat(BitsN.B(0x0,8)),
                   BitsN.bitFieldInsert(w,BitsN.fromBit readIntr,0,0)))
             end
           ; PIC_update(BitsN.B(0x0,8))
           )
    else ()
  end;

fun JTAG_UART_load () =
  ( case (#read_fifo) (!JTAG_UART) of
       [] =>
          ( let
              val x0 = (#data) (!JTAG_UART)
            in
              JTAG_UART :=
              (JTAG_UART_data_rupd
                 ((!JTAG_UART),
                  JTAG_UART_data_RAVAIL_rupd(x0,BitsN.B(0x0,16))))
            end
          ; let
              val x0 = (#data) (!JTAG_UART)
            in
              JTAG_UART :=
              (JTAG_UART_data_rupd
                 ((!JTAG_UART),JTAG_UART_data_RVALID_rupd(x0,false)))
            end
          )
     | h :: t =>
        ( let
            val x0 = (#data) (!JTAG_UART)
          in
            JTAG_UART :=
            (JTAG_UART_data_rupd
               ((!JTAG_UART),JTAG_UART_data_RW_DATA_rupd(x0,h)))
          end
        ; let
            val x0 = (#data) (!JTAG_UART)
          in
            JTAG_UART :=
            (JTAG_UART_data_rupd
               ((!JTAG_UART),
                JTAG_UART_data_RAVAIL_rupd
                  (x0,BitsN.fromNat(List.length t,16))))
          end
        ; let
            val x0 = (#data) (!JTAG_UART)
          in
            JTAG_UART :=
            (JTAG_UART_data_rupd
               ((!JTAG_UART),JTAG_UART_data_RVALID_rupd(x0,true)))
          end
        ; JTAG_UART := (JTAG_UART_read_fifo_rupd((!JTAG_UART),t))
        )
  ; JTAG_UART_update_interrupt_bit ()
  );

fun JTAG_UART_input l =
  ( case ((#read_fifo) (!JTAG_UART)) @ l of
       [] =>
          let
            val x0 = (#data) (!JTAG_UART)
          in
            JTAG_UART :=
            (JTAG_UART_data_rupd
               ((!JTAG_UART),
                JTAG_UART_data_RAVAIL_rupd(x0,BitsN.B(0x0,16))))
          end
     | t =>
        ( JTAG_UART := (JTAG_UART_read_fifo_rupd((!JTAG_UART),t))
        ; let
            val x0 = (#data) (!JTAG_UART)
          in
            JTAG_UART :=
            (JTAG_UART_data_rupd
               ((!JTAG_UART),
                JTAG_UART_data_RAVAIL_rupd
                  (x0,BitsN.fromNat(List.length t,16))))
          end
        ; let
            val x0 = (#control) (!JTAG_UART)
          in
            JTAG_UART :=
            (JTAG_UART_control_rupd
               ((!JTAG_UART),JTAG_UART_control_AC_rupd(x0,true)))
          end
        ; if not((#RVALID)((#data) (!JTAG_UART)))
            then JTAG_UART_load ()
          else ()
        )
  ; JTAG_UART_update_interrupt_bit ()
  );

fun JTAG_UART_store (mask,MemElem) =
  ( if (not((BitsN.bits(mask,63,56)) = (BitsN.B(0x0,8)))) andalso
       (not(((#WSPACE)((#control) (!JTAG_UART))) = (BitsN.B(0x0,16))))
      then ( let
               val x0 = (#control) (!JTAG_UART)
             in
               JTAG_UART :=
               (JTAG_UART_control_rupd
                  ((!JTAG_UART),
                   JTAG_UART_control_WSPACE_rupd
                     (x0,
                      BitsN.-
                        ((#WSPACE)((#control) (!JTAG_UART)),
                         BitsN.B(0x1,16)))))
             end
           ; JTAG_UART :=
             (JTAG_UART_write_fifo_rupd
                ((!JTAG_UART),
                 (BitsN.bits(MemElem,63,56))
                   ::
                   ((#write_fifo) (!JTAG_UART))))
           )
    else ()
  ; if BitsN.bit(mask,24)
      then let
             val x0 = (#control) (!JTAG_UART)
           in
             JTAG_UART :=
             (JTAG_UART_control_rupd
                ((!JTAG_UART),
                 JTAG_UART_control_RE_rupd(x0,BitsN.bit(MemElem,24))))
           end
    else ()
  ; if BitsN.bit(mask,25)
      then let
             val x0 = (#control) (!JTAG_UART)
           in
             JTAG_UART :=
             (JTAG_UART_control_rupd
                ((!JTAG_UART),
                 JTAG_UART_control_WE_rupd(x0,BitsN.bit(MemElem,25))))
           end
    else ()
  ; if (BitsN.bit(mask,18)) andalso (BitsN.bit(MemElem,18))
      then let
             val x0 = (#control) (!JTAG_UART)
           in
             JTAG_UART :=
             (JTAG_UART_control_rupd
                ((!JTAG_UART),JTAG_UART_control_AC_rupd(x0,false)))
           end
    else ()
  ; JTAG_UART_update_interrupt_bit ()
  );

fun JTAG_UART_output () =
  ( let
      val x0 = (#control) (!JTAG_UART)
    in
      JTAG_UART :=
      (JTAG_UART_control_rupd
         ((!JTAG_UART),JTAG_UART_control_AC_rupd(x0,true)))
    end
  ; let
      val l = List.rev((#write_fifo) (!JTAG_UART))
    in
      ( JTAG_UART := (JTAG_UART_write_fifo_rupd((!JTAG_UART),[]))
      ; let
          val x0 = (#control) (!JTAG_UART)
        in
          JTAG_UART :=
          (JTAG_UART_control_rupd
             ((!JTAG_UART),
              JTAG_UART_control_WSPACE_rupd(x0,BitsN.neg(BitsN.B(0x1,16)))))
        end
      ; let
          val x0 = (#control) (!JTAG_UART)
        in
          JTAG_UART :=
          (JTAG_UART_control_rupd
             ((!JTAG_UART),JTAG_UART_control_WI_rupd(x0,false)))
        end
      ; JTAG_UART_update_interrupt_bit ()
      ; l
      )
    end
  );

fun JTAG_UART_initialise uart =
  ( JTAG_UART :=
    (JTAG_UART_base_address_rupd
       ((!JTAG_UART),
        BitsN.fromNat(BitsN.toNat(BitsN.>>+(BitsN.fromNat(uart,40),3)),37)))
  ; JTAG_UART := (JTAG_UART_read_threshold_rupd((!JTAG_UART),65280))
  ; JTAG_UART := (JTAG_UART_write_threshold_rupd((!JTAG_UART),65520))
  ; JTAG_UART := (JTAG_UART_read_fifo_rupd((!JTAG_UART),[]))
  ; JTAG_UART := (JTAG_UART_write_fifo_rupd((!JTAG_UART),[]))
  ; let
      val x0 = (#data) (!JTAG_UART)
    in
      JTAG_UART :=
      (JTAG_UART_data_rupd
         ((!JTAG_UART),JTAG_UART_data_RW_DATA_rupd(x0,BitsN.B(0x0,8))))
    end
  ; let
      val x0 = (#data) (!JTAG_UART)
    in
      JTAG_UART :=
      (JTAG_UART_data_rupd
         ((!JTAG_UART),JTAG_UART_data_RVALID_rupd(x0,false)))
    end
  ; let
      val x0 = (#data) (!JTAG_UART)
    in
      JTAG_UART :=
      (JTAG_UART_data_rupd
         ((!JTAG_UART),JTAG_UART_data_RAVAIL_rupd(x0,BitsN.B(0x0,16))))
    end
  ; let
      val x0 = (#control) (!JTAG_UART)
    in
      JTAG_UART :=
      (JTAG_UART_control_rupd
         ((!JTAG_UART),JTAG_UART_control_RE_rupd(x0,true)))
    end
  ; let
      val x0 = (#control) (!JTAG_UART)
    in
      JTAG_UART :=
      (JTAG_UART_control_rupd
         ((!JTAG_UART),JTAG_UART_control_WE_rupd(x0,false)))
    end
  ; let
      val x0 = (#control) (!JTAG_UART)
    in
      JTAG_UART :=
      (JTAG_UART_control_rupd
         ((!JTAG_UART),JTAG_UART_control_RI_rupd(x0,false)))
    end
  ; let
      val x0 = (#control) (!JTAG_UART)
    in
      JTAG_UART :=
      (JTAG_UART_control_rupd
         ((!JTAG_UART),JTAG_UART_control_WI_rupd(x0,false)))
    end
  ; let
      val x0 = (#control) (!JTAG_UART)
    in
      JTAG_UART :=
      (JTAG_UART_control_rupd
         ((!JTAG_UART),JTAG_UART_control_AC_rupd(x0,false)))
    end
  ; let
      val x0 = (#control) (!JTAG_UART)
    in
      JTAG_UART :=
      (JTAG_UART_control_rupd
         ((!JTAG_UART),
          JTAG_UART_control_WSPACE_rupd(x0,BitsN.neg(BitsN.B(0x1,16)))))
    end
  );

fun ExceptionCode ExceptionType =
  case ExceptionType of
     Int => BitsN.B(0x0,5)
   | Mod => BitsN.B(0x1,5)
   | TLBL => BitsN.B(0x2,5)
   | TLBS => BitsN.B(0x3,5)
   | AdEL => BitsN.B(0x4,5)
   | AdES => BitsN.B(0x5,5)
   | Sys => BitsN.B(0x8,5)
   | Bp => BitsN.B(0x9,5)
   | ResI => BitsN.B(0xA,5)
   | CpU => BitsN.B(0xB,5)
   | Ov => BitsN.B(0xC,5)
   | Tr => BitsN.B(0xD,5)
   | C2E => BitsN.B(0x12,5)
   | XTLBRefillL => BitsN.B(0x2,5)
   | XTLBRefillS => BitsN.B(0x3,5);

fun SignalException ExceptionType =
  ( if not((#EXL)((#Status)(CP0 ())))
      then case BranchDelay () of
              Option.SOME(Option.SOME _) =>
               ( let
                   val x = CP0 ()
                 in
                   write'CP0
                     (CP0_EPC_rupd(x,BitsN.-(PC (),BitsN.B(0x4,64))))
                 end
               ; let
                   val x = CP0 ()
                   val x0 = (#Cause) x
                 in
                   write'CP0
                     (CP0_Cause_rupd(x,CauseRegister_BD_rupd(x0,true)))
                 end
               )
            | _ =>
               ( let
                   val x = CP0 ()
                 in
                   write'CP0(CP0_EPC_rupd(x,PC ()))
                 end
               ; let
                   val x = CP0 ()
                   val x0 = (#Cause) x
                 in
                   write'CP0
                     (CP0_Cause_rupd(x,CauseRegister_BD_rupd(x0,false)))
                 end
               )
    else ()
  ; let
      val vectorOffset =
        if ((ExceptionType = XTLBRefillL) orelse
            (ExceptionType = XTLBRefillS)) andalso
           (not((#EXL)((#Status)(CP0 ()))))
          then BitsN.B(0x80,30)
        else BitsN.B(0x180,30)
    in
      ( let
          val x = CP0 ()
          val x0 = (#Cause) x
        in
          write'CP0
            (CP0_Cause_rupd
               (x,
                CauseRegister_ExcCode_rupd(x0,ExceptionCode ExceptionType)))
        end
      ; let
          val x = CP0 ()
          val x0 = (#Status) x
        in
          write'CP0(CP0_Status_rupd(x,StatusRegister_EXL_rupd(x0,true)))
        end
      ; let
          val vectorBase =
            if (#BEV)((#Status)(CP0 ()))
              then BitsN.B(0xFFFFFFFFBFC00200,64)
            else BitsN.B(0xFFFFFFFF80000000,64)
        in
          ( write'BranchDelay NONE
          ; write'BranchTo NONE
          ; write'PC
              (BitsN.-
                 (BitsN.@@
                    (BitsN.bits(vectorBase,63,30),
                     BitsN.+(BitsN.bits(vectorBase,29,0),vectorOffset)),
                  BitsN.B(0x4,64)))
          ; write'exceptionSignalled true
          ; mark_log(2,log_sig_exception(ExceptionCode ExceptionType))
          )
        end
      )
    end
  );

fun SignalCP2UnusableException () =
  ( let
      val x = CP0 ()
      val x0 = (#Cause) x
    in
      write'CP0
        (CP0_Cause_rupd(x,CauseRegister_CE_rupd(x0,BitsN.B(0x2,2))))
    end
  ; SignalException CpU
  );

fun dfn'ERET () =
  if Option.isSome(BranchDelay ())
    then raise UNPREDICTABLE ("ERET follows branch")
  else if ((#CU0)((#Status)(CP0 ()))) orelse (KernelMode ())
    then ( if (#ERL)((#Status)(CP0 ()))
             then ( write'PC(BitsN.-((#ErrorEPC)(CP0 ()),BitsN.B(0x4,64)))
                  ; let
                      val x = CP0 ()
                      val x0 = (#Status) x
                    in
                      write'CP0
                        (CP0_Status_rupd
                           (x,StatusRegister_ERL_rupd(x0,false)))
                    end
                  )
           else ( write'PC(BitsN.-((#EPC)(CP0 ()),BitsN.B(0x4,64)))
                ; let
                    val x = CP0 ()
                    val x0 = (#Status) x
                  in
                    write'CP0
                      (CP0_Status_rupd
                         (x,StatusRegister_EXL_rupd(x0,false)))
                  end
                )
         ; write'LLbit(Option.SOME false)
         )
  else SignalException CpU;

val TLBEntries = 16

fun TLB_direct i =
  let
    val m = ref (Map.copy
         (Map.lookup((!c_TLB_direct),BitsN.toNat (!procID))))
  in
    Map.lookup((!m),BitsN.toNat i)
  end;

fun write'TLB_direct (value,i) =
  let
    val m = ref (Map.copy
         (Map.lookup((!c_TLB_direct),BitsN.toNat (!procID))))
  in
    ( m := (Map.update((!m),BitsN.toNat i,value))
    ; c_TLB_direct :=
      (Map.update((!c_TLB_direct),BitsN.toNat (!procID),(!m)))
    )
  end;

fun TLB_assoc i =
  let
    val m = ref (Map.copy
         (Map.lookup((!c_TLB_assoc),BitsN.toNat (!procID))))
  in
    Map.lookup((!m),BitsN.toNat i)
  end;

fun write'TLB_assoc (value,i) =
  let
    val m = ref (Map.copy
         (Map.lookup((!c_TLB_assoc),BitsN.toNat (!procID))))
  in
    ( m := (Map.update((!m),BitsN.toNat i,value))
    ; c_TLB_assoc :=
      (Map.update((!c_TLB_assoc),BitsN.toNat (!procID),(!m)))
    )
  end;

fun LookupTLB (r,vpn2) =
  let
    val e = TLB_direct(BitsN.bits(vpn2,6,0))
    val index =
      if Nat.>=(BitsN.toNat(BitsN.bits(vpn2,6,0)),TLBEntries)
        then BitsN.fromNat(BitsN.toNat(BitsN.bits(vpn2,6,0)),8)
      else BitsN.+
             (BitsN.B(0x80,8),
              BitsN.fromNat(BitsN.toNat(BitsN.bits(vpn2,6,0)),8))
    val nmask = BitsN.~(BitsN.fromNat(BitsN.toNat((#Mask) e),27))
  in
    let
      val found = ref []
    in
      ( if (#LTLB)((#Config6)(CP0 ()))
          then found :=
               (if (((BitsN.&&((#VPN2) e,nmask)) = (BitsN.&&(vpn2,nmask))) andalso
                    (((#R) e) = r)) andalso
                   (((#G) e) orelse
                    (((#ASID) e) = ((#ASID)((#EntryHi)(CP0 ())))))
                  then [(index,e)]
                else [])
        else ()
      ; L3.for
          (0,Nat.-(TLBEntries,1),
           fn i =>
             let
               val e = TLB_assoc(BitsN.fromNat(i,4))
               val nmask =
                 BitsN.~(BitsN.fromNat(BitsN.toNat((#Mask) e),27))
             in
               if (((BitsN.&&((#VPN2) e,nmask)) = (BitsN.&&(vpn2,nmask))) andalso
                   (((#R) e) = r)) andalso
                  (((#G) e) orelse
                   (((#ASID) e) = ((#ASID)((#EntryHi)(CP0 ())))))
                 then found := ((BitsN.fromNat(i,8),e) :: (!found))
               else ()
             end)
      ; (!found)
      )
    end
  end;

fun SignalTLBException (e,(asid,vAddr)) =
  let
    val r = BitsN.bits(vAddr,63,62)
    val vpn2 = BitsN.bits(vAddr,39,13)
  in
    ( SignalException e
    ; let val x = CP0 () in write'CP0(CP0_BadVAddr_rupd(x,vAddr)) end
    ; let
        val x = CP0 ()
        val x0 = (#EntryHi) x
      in
        write'CP0(CP0_EntryHi_rupd(x,EntryHi_R_rupd(x0,r)))
      end
    ; let
        val x = CP0 ()
        val x0 = (#EntryHi) x
      in
        write'CP0(CP0_EntryHi_rupd(x,EntryHi_VPN2_rupd(x0,vpn2)))
      end
    ; let
        val x = CP0 ()
        val x0 = (#EntryHi) x
      in
        write'CP0(CP0_EntryHi_rupd(x,EntryHi_ASID_rupd(x0,asid)))
      end
    ; let
        val x = CP0 ()
        val x0 = (#XContext) x
      in
        write'CP0(CP0_XContext_rupd(x,XContext_R_rupd(x0,r)))
      end
    ; let
        val x = CP0 ()
        val x0 = (#XContext) x
      in
        write'CP0(CP0_XContext_rupd(x,XContext_BadVPN2_rupd(x0,vpn2)))
      end
    ; let
        val x = CP0 ()
        val x0 = (#Context) x
      in
        write'CP0
          (CP0_Context_rupd
             (x,Context_BadVPN2_rupd(x0,BitsN.bits(vAddr,31,13))))
      end
    ; (BitsN.B(0x0,40),BitsN.B(0x0,3))
    )
  end;

fun CheckSegment vAddr =
  if UserMode ()
    then (NONE,BitsN.<+(vAddr,BitsN.B(0x10000000000,64)))
  else if SupervisorMode ()
    then (NONE,
          ((BitsN.<+(vAddr,BitsN.B(0x10000000000,64))) orelse
           ((BitsN.<=+(vAddr,BitsN.B(0x4000000000000000,64))) andalso
            (BitsN.<+(vAddr,BitsN.B(0x4000010000000000,64))))) orelse
          ((BitsN.<=+(vAddr,BitsN.B(0xFFFFFFFFC0000000,64))) andalso
           (BitsN.<+(vAddr,BitsN.B(0xFFFFFFFFE0000000,64)))))
  else if BitsN.<+(vAddr,BitsN.B(0x10000000000,64))
    then (NONE,true)
  else if (BitsN.<=+(BitsN.B(0x4000000000000000,64),vAddr)) andalso
     (BitsN.<+(vAddr,BitsN.B(0x4000010000000000,64)))
    then (NONE,true)
  else if (BitsN.<=+(BitsN.B(0x8000000000000000,64),vAddr)) andalso
     (BitsN.<+(vAddr,BitsN.B(0xC000000000000000,64)))
    then (Option.SOME(BitsN.bits(vAddr,39,0),BitsN.bits(vAddr,61,59)),
          (BitsN.bits(vAddr,58,40)) = (BitsN.B(0x0,19)))
  else if (BitsN.<=+(BitsN.B(0xC000000000000000,64),vAddr)) andalso
     (BitsN.<+(vAddr,BitsN.B(0xC00000FF80000000,64)))
    then (NONE,true)
  else if (BitsN.<=+(BitsN.B(0xFFFFFFFF80000000,64),vAddr)) andalso
     (BitsN.<+(vAddr,BitsN.B(0xFFFFFFFFA0000000,64)))
    then (Option.SOME
            (BitsN.-(BitsN.bits(vAddr,39,0),BitsN.B(0xFF80000000,40)),
             (#K0)((#Config)(CP0 ()))),true)
  else if (BitsN.<=+(BitsN.B(0xFFFFFFFFA0000000,64),vAddr)) andalso
     (BitsN.<+(vAddr,BitsN.B(0xFFFFFFFFC0000000,64)))
    then (Option.SOME
            (BitsN.-(BitsN.bits(vAddr,39,0),BitsN.B(0xFFA0000000,40)),
             BitsN.B(0x2,3)),true)
  else (NONE,BitsN.<=+(BitsN.B(0xFFFFFFFFC0000000,64),vAddr));

fun AddressTranslation (vAddr,(IorD,AccessType)) =
  let
    val (unmapped,valid) = CheckSegment vAddr
  in
    if valid
      then case unmapped of
              Option.SOME(pAddr,cca) => (pAddr,cca)
            | NONE =>
                 (case LookupTLB
                    (BitsN.bits(vAddr,63,62),BitsN.bits(vAddr,39,13)) of
                     [] =>
                        let
                          val exc =
                            if AccessType = LOAD
                              then XTLBRefillL
                            else XTLBRefillS
                        in
                          SignalTLBException
                            (exc,((#ASID)((#EntryHi)(CP0 ())),vAddr))
                        end
                   | [(_,e)] =>
                      let
                        val EvenOddBit =
                          case (#Mask) e of
                             BitsN.B(0x0,12) => 12
                           | BitsN.B(0x3,12) => 14
                           | BitsN.B(0xF,12) => 16
                           | BitsN.B(0x3F,12) => 18
                           | BitsN.B(0xFF,12) => 20
                           | BitsN.B(0x3FF,12) => 22
                           | BitsN.B(0xFFF,12) => 24
                           | _ => raise UNPREDICTABLE ("TLB: bad mask")
                        val (PFN,(C,(D,V))) =
                          if BitsN.bit(vAddr,EvenOddBit)
                            then ((#PFN1) e,((#C1) e,((#D1) e,(#V1) e)))
                          else ((#PFN0) e,((#C0) e,((#D0) e,(#V0) e)))
                      in
                        if V
                          then if (not D) andalso (AccessType = STORE)
                                 then SignalTLBException
                                        (Mod,((#ASID) e,vAddr))
                               else let
                                      val PFN_ = BitsN.toBitstring PFN
                                      val vAddr_ = BitsN.toBitstring vAddr
                                      val pAddr =
                                        (Bitstring.bits
                                           (PFN_,27,Nat.-(EvenOddBit,12)))
                                          @
                                          (Bitstring.bits
                                           (vAddr_,Nat.-(EvenOddBit,1),0))
                                    in
                                      (BitsN.fromBitstring(pAddr,40),C)
                                    end
                        else let
                               val exc =
                                 if AccessType = LOAD then TLBL else TLBS
                             in
                               SignalTLBException(exc,((#ASID) e,vAddr))
                             end
                      end
                   | _ => raise UNPREDICTABLE ("TLB: multiple matches"))
    else ( let val x = CP0 () in write'CP0(CP0_BadVAddr_rupd(x,vAddr)) end
         ; SignalException(if AccessType = LOAD then AdEL else AdES)
         ; (BitsN.B(0x0,40),BitsN.B(0x0,3))
         )
  end;

fun ModifyTLB ie =
  let
    val eHi = (#EntryHi)(CP0 ())
    val eLo1 = (#EntryLo1)(CP0 ())
    val eLo0 = (#EntryLo0)(CP0 ())
  in
    let
      val e = ref ie
    in
      ( e := (TLBEntry_Mask_rupd((!e),(#Mask)((#PageMask)(CP0 ()))))
      ; e := (TLBEntry_R_rupd((!e),(#R) eHi))
      ; e := (TLBEntry_VPN2_rupd((!e),(#VPN2) eHi))
      ; e := (TLBEntry_ASID_rupd((!e),(#ASID) eHi))
      ; e := (TLBEntry_PFN1_rupd((!e),(#PFN) eLo1))
      ; e := (TLBEntry_C1_rupd((!e),(#C) eLo1))
      ; e := (TLBEntry_D1_rupd((!e),(#D) eLo1))
      ; e := (TLBEntry_V1_rupd((!e),(#V) eLo1))
      ; e := (TLBEntry_G_rupd((!e),((#G) eLo1) andalso ((#G) eLo0)))
      ; e := (TLBEntry_PFN0_rupd((!e),(#PFN) eLo0))
      ; e := (TLBEntry_C0_rupd((!e),(#C) eLo0))
      ; e := (TLBEntry_D0_rupd((!e),(#D) eLo0))
      ; e := (TLBEntry_V0_rupd((!e),(#V) eLo0))
      ; (!e)
      )
    end
  end;

fun dfn'TLBR () =
  if (not((#CU0)((#Status)(CP0 ())))) andalso (not(KernelMode ()))
    then SignalException CpU
  else let
         val i = (#Index)((#Index)(CP0 ()))
         val e =
           if Nat.>=(BitsN.toNat i,TLBEntries)
             then TLB_direct(BitsN.bits(i,6,0))
           else TLB_assoc(BitsN.fromNat(BitsN.toNat i,4))
       in
         ( let
             val x = CP0 ()
             val x0 = (#PageMask) x
           in
             write'CP0
               (CP0_PageMask_rupd(x,PageMask_Mask_rupd(x0,(#Mask) e)))
           end
         ; let
             val x = CP0 ()
             val x0 = (#EntryHi) x
           in
             write'CP0(CP0_EntryHi_rupd(x,EntryHi_R_rupd(x0,(#R) e)))
           end
         ; let
             val x = CP0 ()
             val x0 = (#EntryHi) x
           in
             write'CP0
               (CP0_EntryHi_rupd(x,EntryHi_VPN2_rupd(x0,(#VPN2) e)))
           end
         ; let
             val x = CP0 ()
             val x0 = (#EntryHi) x
           in
             write'CP0
               (CP0_EntryHi_rupd(x,EntryHi_ASID_rupd(x0,(#ASID) e)))
           end
         ; let
             val x = CP0 ()
             val x0 = (#EntryLo1) x
           in
             write'CP0
               (CP0_EntryLo1_rupd(x,EntryLo_PFN_rupd(x0,(#PFN1) e)))
           end
         ; let
             val x = CP0 ()
             val x0 = (#EntryLo1) x
           in
             write'CP0(CP0_EntryLo1_rupd(x,EntryLo_C_rupd(x0,(#C1) e)))
           end
         ; let
             val x = CP0 ()
             val x0 = (#EntryLo1) x
           in
             write'CP0(CP0_EntryLo1_rupd(x,EntryLo_D_rupd(x0,(#D1) e)))
           end
         ; let
             val x = CP0 ()
             val x0 = (#EntryLo1) x
           in
             write'CP0(CP0_EntryLo1_rupd(x,EntryLo_V_rupd(x0,(#V1) e)))
           end
         ; let
             val x = CP0 ()
             val x0 = (#EntryLo1) x
           in
             write'CP0(CP0_EntryLo1_rupd(x,EntryLo_G_rupd(x0,(#G) e)))
           end
         ; let
             val x = CP0 ()
             val x0 = (#EntryLo0) x
           in
             write'CP0
               (CP0_EntryLo0_rupd(x,EntryLo_PFN_rupd(x0,(#PFN0) e)))
           end
         ; let
             val x = CP0 ()
             val x0 = (#EntryLo0) x
           in
             write'CP0(CP0_EntryLo0_rupd(x,EntryLo_C_rupd(x0,(#C0) e)))
           end
         ; let
             val x = CP0 ()
             val x0 = (#EntryLo0) x
           in
             write'CP0(CP0_EntryLo0_rupd(x,EntryLo_D_rupd(x0,(#D0) e)))
           end
         ; let
             val x = CP0 ()
             val x0 = (#EntryLo0) x
           in
             write'CP0(CP0_EntryLo0_rupd(x,EntryLo_V_rupd(x0,(#V0) e)))
           end
         ; let
             val x = CP0 ()
             val x0 = (#EntryLo0) x
           in
             write'CP0(CP0_EntryLo0_rupd(x,EntryLo_G_rupd(x0,(#G) e)))
           end
         )
       end;

fun dfn'TLBP () =
  if (not((#CU0)((#Status)(CP0 ())))) andalso (not(KernelMode ()))
    then SignalException CpU
  else case LookupTLB
         ((#R)((#EntryHi)(CP0 ())),(#VPN2)((#EntryHi)(CP0 ()))) of
          [] =>
             ( let
                 val x = CP0 ()
                 val x0 = (#Index) x
               in
                 write'CP0(CP0_Index_rupd(x,Index_P_rupd(x0,true)))
               end
             ; let
                 val x = CP0 ()
                 val x0 = (#Index) x
               in
                 write'CP0
                   (CP0_Index_rupd(x,Index_Index_rupd(x0,BitsN.B(0x0,8))))
               end
             )
        | [(i,e)] =>
           ( let
               val x = CP0 ()
               val x0 = (#Index) x
             in
               write'CP0(CP0_Index_rupd(x,Index_P_rupd(x0,false)))
             end
           ; let
               val x = CP0 ()
               val x0 = (#Index) x
             in
               write'CP0(CP0_Index_rupd(x,Index_Index_rupd(x0,i)))
             end
           )
        | _ => raise UNPREDICTABLE ("TLB: multiple matches");

fun dfn'TLBWI () =
  if (not((#CU0)((#Status)(CP0 ())))) andalso (not(KernelMode ()))
    then SignalException CpU
  else if Nat.>=(BitsN.toNat((#Index)((#Index)(CP0 ()))),TLBEntries)
    then let
           val j = BitsN.bits((#VPN2)((#EntryHi)(CP0 ())),6,0)
         in
           write'TLB_direct(ModifyTLB(TLB_direct j),j)
         end
  else let
         val i = BitsN.fromNat(BitsN.toNat((#Index)((#Index)(CP0 ()))),4)
       in
         write'TLB_assoc(ModifyTLB(TLB_assoc i),i)
       end;

fun dfn'TLBWR () =
  if (not((#CU0)((#Status)(CP0 ())))) andalso (not(KernelMode ()))
    then SignalException CpU
  else if (#LTLB)((#Config6)(CP0 ()))
    then let
           val j = BitsN.bits((#VPN2)((#EntryHi)(CP0 ())),6,0)
           val old = TLB_direct j
         in
           ( write'TLB_direct(ModifyTLB old,j)
           ; if ((#V0) old) andalso ((#V1) old)
               then let
                      val x =
                        BitsN.fromNat
                          (BitsN.toNat((#Random)((#Random)(CP0 ()))),4)
                    in
                      write'TLB_assoc(old,x)
                    end
             else ()
           )
         end
  else let
         val j = (#Random)((#Random)(CP0 ()))
         val x = BitsN.fromNat(BitsN.toNat j,4)
       in
         write'TLB_assoc
           (ModifyTLB(TLB_assoc(BitsN.fromNat(BitsN.toNat j,4))),x)
       end;

fun r n = ("$") ^ (Nat.toString(BitsN.toNat n));

fun c n = (", ") ^ (r n);

fun i N n =
  String.concat
    [", ",if BitsN.<+(n,BitsN.B(0xA,N)) then "" else "0x",
     BitsN.toHexString n];

fun oi N n = if n = (BitsN.B(0x0,N)) then "" else i N n;

fun op1i N (s,n) =
  String.concat[L3.padRightString(#" ",(12,s)),"0x",BitsN.toHexString n];

fun op1r (s,n) = (L3.padRightString(#" ",(12,s))) ^ (r n);

fun op1ri N (s,(r1,n)) = (op1r(s,r1)) ^ (i N n);

fun op2r (s,(r1,r2)) = (op1r(s,r1)) ^ (c r2);

fun op2ri N (s,(r1,(r2,n))) = (op2r(s,(r1,r2))) ^ (i N n);

fun op3r (s,(r1,(r2,r3))) = (op2r(s,(r1,r2))) ^ (c r3);

fun op3ri N (s,(r1,(r2,(r3,n)))) = (op3r(s,(r1,(r2,r3)))) ^ (i N n);

fun op2roi N (s,(r1,(r2,n))) =
  String.concat[op1r(s,r1),", ",cpr r2,oi N n];

fun opmem N (s,(r1,(r2,n))) =
  String.concat[op1ri N (s,(r1,n)),"(",r r2,")"];

fun form1 (rs,(rt,(rd,(imm5,function)))) =
  BitsN.concat[BitsN.B(0x0,6),rs,rt,rd,imm5,function];

fun form2 (rs,(function,imm)) =
  BitsN.concat[BitsN.B(0x1,6),rs,function,imm];

fun form3 (function,(rt,(rd,sel))) =
  BitsN.concat[BitsN.B(0x10,6),function,rt,rd,BitsN.B(0x0,8),sel];

fun form4 (function,(rs,(rt,imm))) = BitsN.concat[function,rs,rt,imm];

fun form5 (rs,(rt,(rd,function))) =
  BitsN.concat[BitsN.B(0x1C,6),rs,rt,rd,BitsN.B(0x0,5),function];

fun form6 (rt,(rd,function)) =
  BitsN.concat
    [BitsN.B(0x1F,6),BitsN.B(0x0,5),rt,rd,BitsN.B(0x0,5),function];

val PSIZE = 40

fun GPR n = if n = (BitsN.B(0x0,5)) then BitsN.B(0x0,64) else gpr n;

fun write'GPR (value,n) =
  if not(n = (BitsN.B(0x0,5)))
    then ( write'gpr(value,n); mark_log(2,log_w_gpr(n,value)) )
  else ();

fun dumpRegs () =
  ( mark_log(0,"======   Registers   ======")
  ; mark_log(0,("Core = ") ^ (Nat.toString(BitsN.toNat (!procID))))
  ; mark_log(0,("PC     ") ^ (hex64(PC ())))
  ; L3.for
      (0,31,
       fn i =>
         mark_log
           (0,
            String.concat
              ["Reg ",if Nat.<(i,10) then " " else "",Nat.toString i," ",
               hex64(GPR(BitsN.fromNat(i,5)))]))
  );

fun HI () =
  case hi () of
     Option.SOME v => v
   | NONE => ( (!UNPREDICTABLE_HI) (); BitsN.B(0x0,64) );

fun write'HI value =
  ( write'hi(Option.SOME value); mark_log(2,log_w_hi value) );

fun LO () =
  case lo () of
     Option.SOME v => v
   | NONE => ( (!UNPREDICTABLE_LO) (); BitsN.B(0x0,64) );

fun write'LO value =
  ( write'lo(Option.SOME value); mark_log(2,log_w_lo value) );

fun flip_endian_word w =
  case boolify'32 w of
     (a'7,
      (a'6,
       (a'5,
        (a'4,
         (a'3,
          (a'2,
           (a'1,
            (a'0,
             (b'7,
              (b'6,
               (b'5,
                (b'4,
                 (b'3,
                  (b'2,
                   (b'1,
                    (b'0,
                     (c'7,
                      (c'6,
                       (c'5,
                        (c'4,
                         (c'3,
                          (c'2,
                           (c'1,
                            (c'0,
                             (d'7,(d'6,(d'5,(d'4,(d'3,(d'2,(d'1,d'0))))))))))))))))))))))))))))))) =>
      BitsN.concat
        [BitsN.fromBitstring([d'7,d'6,d'5,d'4,d'3,d'2,d'1,d'0],8),
         BitsN.fromBitstring([c'7,c'6,c'5,c'4,c'3,c'2,c'1,c'0],8),
         BitsN.fromBitstring([b'7,b'6,b'5,b'4,b'3,b'2,b'1,b'0],8),
         BitsN.fromBitstring([a'7,a'6,a'5,a'4,a'3,a'2,a'1,a'0],8)];

fun flip_endian_dword dw =
  case boolify'64 dw of
     (a'7,
      (a'6,
       (a'5,
        (a'4,
         (a'3,
          (a'2,
           (a'1,
            (a'0,
             (b'7,
              (b'6,
               (b'5,
                (b'4,
                 (b'3,
                  (b'2,
                   (b'1,
                    (b'0,
                     (c'7,
                      (c'6,
                       (c'5,
                        (c'4,
                         (c'3,
                          (c'2,
                           (c'1,
                            (c'0,
                             (d'7,
                              (d'6,
                               (d'5,
                                (d'4,
                                 (d'3,
                                  (d'2,
                                   (d'1,
                                    (d'0,
                                     (e'7,
                                      (e'6,
                                       (e'5,
                                        (e'4,
                                         (e'3,
                                          (e'2,
                                           (e'1,
                                            (e'0,
                                             (f'7,
                                              (f'6,
                                               (f'5,
                                                (f'4,
                                                 (f'3,
                                                  (f'2,
                                                   (f'1,
                                                    (f'0,
                                                     (g'7,
                                                      (g'6,
                                                       (g'5,
                                                        (g'4,
                                                         (g'3,
                                                          (g'2,
                                                           (g'1,
                                                            (g'0,
                                                             (h'7,
                                                              (h'6,
                                                               (h'5,
                                                                (h'4,
                                                                 (h'3,
                                                                  (h'2,
                                                                   (h'1,
                                                                    h'0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) =>
      BitsN.concat
        [BitsN.fromBitstring([h'7,h'6,h'5,h'4,h'3,h'2,h'1,h'0],8),
         BitsN.fromBitstring([g'7,g'6,g'5,g'4,g'3,g'2,g'1,g'0],8),
         BitsN.fromBitstring([f'7,f'6,f'5,f'4,f'3,f'2,f'1,f'0],8),
         BitsN.fromBitstring([e'7,e'6,e'5,e'4,e'3,e'2,e'1,e'0],8),
         BitsN.fromBitstring([d'7,d'6,d'5,d'4,d'3,d'2,d'1,d'0],8),
         BitsN.fromBitstring([c'7,c'6,c'5,c'4,c'3,c'2,c'1,c'0],8),
         BitsN.fromBitstring([b'7,b'6,b'5,b'4,b'3,b'2,b'1,b'0],8),
         BitsN.fromBitstring([a'7,a'6,a'5,a'4,a'3,a'2,a'1,a'0],8)];

fun CPR (n,(reg,sel)) =
  case (n,(reg,sel)) of
     (0,(BitsN.B(0x0,5),BitsN.B(0x0,3))) =>
        BitsN.fromNat(BitsN.toNat(reg'Index((#Index)(CP0 ()))),64)
   | (0,(BitsN.B(0x1,5),BitsN.B(0x0,3))) =>
        BitsN.fromNat(BitsN.toNat(reg'Random((#Random)(CP0 ()))),64)
   | (0,(BitsN.B(0x2,5),BitsN.B(0x0,3))) =>
        reg'EntryLo((#EntryLo0)(CP0 ()))
   | (0,(BitsN.B(0x3,5),BitsN.B(0x0,3))) =>
        reg'EntryLo((#EntryLo1)(CP0 ()))
   | (0,(BitsN.B(0x4,5),BitsN.B(0x0,3))) =>
        reg'Context((#Context)(CP0 ()))
   | (0,(BitsN.B(0x4,5),BitsN.B(0x2,3))) => (#UsrLocal)(CP0 ())
   | (0,(BitsN.B(0x5,5),BitsN.B(0x0,3))) =>
        BitsN.fromNat(BitsN.toNat(reg'PageMask((#PageMask)(CP0 ()))),64)
   | (0,(BitsN.B(0x6,5),BitsN.B(0x0,3))) =>
        BitsN.fromNat(BitsN.toNat(reg'Wired((#Wired)(CP0 ()))),64)
   | (0,(BitsN.B(0x7,5),BitsN.B(0x0,3))) =>
        BitsN.fromNat(BitsN.toNat(reg'HWREna((#HWREna)(CP0 ()))),64)
   | (0,(BitsN.B(0x8,5),BitsN.B(0x0,3))) => (#BadVAddr)(CP0 ())
   | (0,(BitsN.B(0x9,5),BitsN.B(0x0,3))) =>
        BitsN.fromNat(BitsN.toNat((#Count)(CP0 ())),64)
   | (0,(BitsN.B(0xA,5),BitsN.B(0x0,3))) =>
        reg'EntryHi((#EntryHi)(CP0 ()))
   | (0,(BitsN.B(0xB,5),BitsN.B(0x0,3))) =>
        BitsN.fromNat(BitsN.toNat((#Compare)(CP0 ())),64)
   | (0,(BitsN.B(0xC,5),BitsN.B(0x0,3))) =>
        BitsN.fromNat
          (BitsN.toNat(reg'StatusRegister((#Status)(CP0 ()))),64)
   | (0,(BitsN.B(0xD,5),BitsN.B(0x0,3))) =>
        BitsN.fromNat(BitsN.toNat(reg'CauseRegister((#Cause)(CP0 ()))),64)
   | (0,(BitsN.B(0xE,5),BitsN.B(0x0,3))) => (#EPC)(CP0 ())
   | (0,(BitsN.B(0xF,5),BitsN.B(0x0,3))) =>
        BitsN.fromNat(BitsN.toNat((#PRId)(CP0 ())),64)
   | (0,(BitsN.B(0xF,5),BitsN.B(0x1,3))) =>
        BitsN.zeroExtend 64
          (BitsN.@@
             (BitsN.fromNat(Nat.-((!totalCore),1),16),
              BitsN.fromNat(BitsN.toNat (!procID),16)))
   | (0,(BitsN.B(0xF,5),BitsN.B(0x6,3))) =>
        BitsN.zeroExtend 64
          (BitsN.@@
             (BitsN.fromNat(Nat.-((!totalCore),1),16),
              BitsN.fromNat(BitsN.toNat (!procID),16)))
   | (0,(BitsN.B(0x10,5),BitsN.B(0x0,3))) =>
        BitsN.fromNat
          (BitsN.toNat(reg'ConfigRegister((#Config)(CP0 ()))),64)
   | (0,(BitsN.B(0x10,5),BitsN.B(0x1,3))) =>
        BitsN.fromNat
          (BitsN.toNat(reg'ConfigRegister1((#Config1)(CP0 ()))),64)
   | (0,(BitsN.B(0x10,5),BitsN.B(0x2,3))) =>
        BitsN.fromNat
          (BitsN.toNat(reg'ConfigRegister2((#Config2)(CP0 ()))),64)
   | (0,(BitsN.B(0x10,5),BitsN.B(0x3,3))) =>
        BitsN.fromNat
          (BitsN.toNat(reg'ConfigRegister3((#Config3)(CP0 ()))),64)
   | (0,(BitsN.B(0x10,5),BitsN.B(0x4,3))) => BitsN.B(0x1,64)
   | (0,(BitsN.B(0x10,5),BitsN.B(0x5,3))) => BitsN.B(0x1,64)
   | (0,(BitsN.B(0x10,5),BitsN.B(0x6,3))) =>
        BitsN.fromNat
          (BitsN.toNat(reg'ConfigRegister6((#Config6)(CP0 ()))),64)
   | (0,(BitsN.B(0x11,5),BitsN.B(0x0,3))) =>
        BitsN.fromNat(BitsN.toNat((#LLAddr)(CP0 ())),64)
   | (0,(BitsN.B(0x14,5),BitsN.B(0x0,3))) =>
        reg'XContext((#XContext)(CP0 ()))
   | (0,(BitsN.B(0x17,5),BitsN.B(0x0,3))) =>
        BitsN.fromNat(BitsN.toNat((#Debug)(CP0 ())),64)
   | (0,(BitsN.B(0x1A,5),BitsN.B(0x0,3))) =>
        BitsN.fromNat(BitsN.toNat((#ErrCtl)(CP0 ())),64)
   | (0,(BitsN.B(0x1E,5),BitsN.B(0x0,3))) => (#ErrorEPC)(CP0 ())
   | _ => BitsN.B(0x0,64);

fun write'CPR (value,(n,(reg,sel))) =
  ( mark_log(2,log_w_c0(reg,value))
  ; case (n,(reg,sel)) of
       (0,(BitsN.B(0x0,5),BitsN.B(0x0,3))) =>
          let
            val x = CP0 ()
            val x0 = (#Index) x
          in
            write'CP0
              (CP0_Index_rupd
                 (x,Index_Index_rupd(x0,BitsN.bits(value,7,0))))
          end
     | (0,(BitsN.B(0x2,5),BitsN.B(0x0,3))) =>
          let
            val x = CP0 ()
            val x0 = (#EntryLo0) x
          in
            write'CP0(CP0_EntryLo0_rupd(x,write'reg'EntryLo(x0,value)))
          end
     | (0,(BitsN.B(0x3,5),BitsN.B(0x0,3))) =>
          let
            val x = CP0 ()
            val x0 = (#EntryLo1) x
          in
            write'CP0(CP0_EntryLo1_rupd(x,write'reg'EntryLo(x0,value)))
          end
     | (0,(BitsN.B(0x4,5),BitsN.B(0x0,3))) =>
          let
            val x = CP0 ()
            val x0 = (#Context) x
          in
            write'CP0
              (CP0_Context_rupd
                 (x,Context_PTEBase_rupd(x0,BitsN.bits(value,63,23))))
          end
     | (0,(BitsN.B(0x4,5),BitsN.B(0x2,3))) =>
          let val x = CP0 () in write'CP0(CP0_UsrLocal_rupd(x,value)) end
     | (0,(BitsN.B(0x5,5),BitsN.B(0x0,3))) =>
          let
            val x = CP0 ()
            val x0 = (#PageMask) x
          in
            write'CP0
              (CP0_PageMask_rupd
                 (x,PageMask_Mask_rupd(x0,BitsN.bits(value,24,13))))
          end
     | (0,(BitsN.B(0x6,5),BitsN.B(0x0,3))) =>
          ( let
              val x = CP0 ()
              val x0 = (#Wired) x
            in
              write'CP0
                (CP0_Wired_rupd
                   (x,Wired_Wired_rupd(x0,BitsN.bits(value,7,0))))
            end
          ; let
              val x = CP0 ()
              val x0 = (#Random) x
            in
              write'CP0
                (CP0_Random_rupd
                   (x,
                    Random_Random_rupd
                      (x0,BitsN.fromNat(Nat.-(TLBEntries,1),8))))
            end
          )
     | (0,(BitsN.B(0x7,5),BitsN.B(0x0,3))) =>
          ( let
              val x = CP0 ()
              val x0 = (#HWREna) x
            in
              write'CP0
                (CP0_HWREna_rupd
                   (x,HWREna_CPUNum_rupd(x0,BitsN.bit(value,0))))
            end
          ; let
              val x = CP0 ()
              val x0 = (#HWREna) x
            in
              write'CP0
                (CP0_HWREna_rupd(x,HWREna_CC_rupd(x0,BitsN.bit(value,2))))
            end
          ; let
              val x = CP0 ()
              val x0 = (#HWREna) x
            in
              write'CP0
                (CP0_HWREna_rupd
                   (x,HWREna_CCRes_rupd(x0,BitsN.bit(value,3))))
            end
          ; let
              val x = CP0 ()
              val x0 = (#HWREna) x
            in
              write'CP0
                (CP0_HWREna_rupd(x,HWREna_UL_rupd(x0,BitsN.bit(value,29))))
            end
          )
     | (0,(BitsN.B(0x9,5),BitsN.B(0x0,3))) =>
          let
            val x = CP0 ()
          in
            write'CP0(CP0_Count_rupd(x,BitsN.bits(value,31,0)))
          end
     | (0,(BitsN.B(0xA,5),BitsN.B(0x0,3))) =>
          let
            val x = CP0 ()
            val x0 = (#EntryHi) x
          in
            write'CP0(CP0_EntryHi_rupd(x,write'reg'EntryHi(x0,value)))
          end
     | (0,(BitsN.B(0xB,5),BitsN.B(0x0,3))) =>
          ( let
              val x = CP0 ()
            in
              write'CP0(CP0_Compare_rupd(x,BitsN.bits(value,31,0)))
            end
          ; let
              val x = CP0 ()
              val x0 = (#Cause) x
              val w = (#IP) x0
            in
              write'CP0
                (CP0_Cause_rupd
                   (x,
                    CauseRegister_IP_rupd
                      (x0,BitsN.bitFieldInsert(w,BitsN.fromBit false,7,7))))
            end
          ; let
              val x = CP0 ()
              val x0 = (#Cause) x
            in
              write'CP0(CP0_Cause_rupd(x,CauseRegister_TI_rupd(x0,false)))
            end
          )
     | (0,(BitsN.B(0xC,5),BitsN.B(0x0,3))) =>
          let
            val x = CP0 ()
            val x0 = (#Status) x
          in
            write'CP0
              (CP0_Status_rupd
                 (x,write'reg'StatusRegister(x0,BitsN.bits(value,31,0))))
          end
     | (0,(BitsN.B(0xD,5),BitsN.B(0x0,3))) =>
          let
            val x = CP0 ()
            val x0 = (#Cause) x
          in
            write'CP0
              (CP0_Cause_rupd
                 (x,write'reg'CauseRegister(x0,BitsN.bits(value,31,0))))
          end
     | (0,(BitsN.B(0xE,5),BitsN.B(0x0,3))) =>
          let val x = CP0 () in write'CP0(CP0_EPC_rupd(x,value)) end
     | (0,(BitsN.B(0x10,5),BitsN.B(0x0,3))) =>
          let
            val x = CP0 ()
            val x0 = (#Config) x
          in
            write'CP0
              (CP0_Config_rupd
                 (x,ConfigRegister_K0_rupd(x0,BitsN.bits(value,2,0))))
          end
     | (0,(BitsN.B(0x10,5),BitsN.B(0x2,3))) =>
          let
            val x = CP0 ()
            val x0 = (#Config2) x
          in
            write'CP0
              (CP0_Config2_rupd
                 (x,ConfigRegister2_SU_rupd(x0,BitsN.bits(value,15,12))))
          end
     | (0,(BitsN.B(0x10,5),BitsN.B(0x6,3))) =>
          let
            val x = CP0 ()
            val x0 = (#Config6) x
          in
            write'CP0
              (CP0_Config6_rupd
                 (x,ConfigRegister6_LTLB_rupd(x0,BitsN.bit(value,2))))
          end
     | (0,(BitsN.B(0x14,5),BitsN.B(0x0,3))) =>
          let
            val x = CP0 ()
            val x0 = (#XContext) x
          in
            write'CP0
              (CP0_XContext_rupd
                 (x,XContext_PTEBase_rupd(x0,BitsN.bits(value,63,33))))
          end
     | (0,(BitsN.B(0x17,5),BitsN.B(0x0,3))) =>
          ( let
              val x = CP0 ()
            in
              write'CP0(CP0_Debug_rupd(x,BitsN.bits(value,31,0)))
            end
          ; done := true
          )
     | (0,(BitsN.B(0x1A,5),BitsN.B(0x0,3))) =>
          ( let
              val x = CP0 ()
            in
              write'CP0(CP0_ErrCtl_rupd(x,BitsN.bits(value,31,0)))
            end
          ; dumpRegs ()
          )
     | (0,(BitsN.B(0x1E,5),BitsN.B(0x0,3))) =>
          let val x = CP0 () in write'CP0(CP0_ErrorEPC_rupd(x,value)) end
     | _ => unmark_log 2
  );

fun dfn'CACHE (base,(opn,offset)) =
  if (not((#CU0)((#Status)(CP0 ())))) andalso (not(KernelMode ()))
    then SignalException CpU
  else let
         val vAddr = BitsN.+(GPR base,BitsN.signExtend 64 offset)
         val x = AddressTranslation(vAddr,(DATA,LOAD))
       in
         ()
       end;

fun dfn'RDHWR (rt,rd) =
  if (((#CU0)((#Status)(CP0 ()))) orelse (KernelMode ())) orelse
     (BitsN.bit(reg'HWREna((#HWREna)(CP0 ())),BitsN.toNat rd))
    then case rd of
            BitsN.B(0x0,5) =>
               write'GPR(BitsN.fromNat(Nat.-((!totalCore),1),64),rt)
          | BitsN.B(0x2,5) =>
               write'GPR(BitsN.signExtend 64 ((#Count)(CP0 ())),rt)
          | BitsN.B(0x3,5) => write'GPR(BitsN.B(0x1,64),rt)
          | BitsN.B(0x1D,5) => write'GPR((#UsrLocal)(CP0 ()),rt)
          | _ => SignalException ResI
  else SignalException ResI;

fun InitMEM () = MEM := (Map.mkMap(SOME 137438953472,BitsN.B(0x0,64)));

fun ReadData pAddr =
  let
    val data = Map.lookup((!MEM),BitsN.toNat pAddr)
  in
    ( mark_log(2,log_r_mem(pAddr,data)); data )
  end;

fun WriteData (pAddr,(data,mask)) =
  ( MEM :=
    (Map.update
       ((!MEM),BitsN.toNat pAddr,
        BitsN.||
          (BitsN.&&(Map.lookup((!MEM),BitsN.toNat pAddr),BitsN.~ mask),
           BitsN.&&(data,mask))))
  ; mark_log(2,log_w_mem(pAddr,(mask,data)))
  );

fun ReadInst a =
  if BitsN.bit(a,2)
    then BitsN.bits
           (Map.lookup((!MEM),BitsN.toNat(BitsN.bits(a,39,3))),31,0)
  else BitsN.bits
         (Map.lookup((!MEM),BitsN.toNat(BitsN.bits(a,39,3))),63,32);

fun LoadMemory (MemType,(AccessLength,(vAddr,(IorD,AccessType)))) =
  let
    val pAddr = ref (BitsN.B(0x0,40))
  in
    let
      val (tmp,CCA) = AddressTranslation(vAddr,(IorD,AccessType))
    in
      ( pAddr := tmp
      ; pAddr :=
        (BitsN.bitFieldInsert
           ((!pAddr),
            case MemType of
               BitsN.B(0x0,3) =>
                  BitsN.??
                    (BitsN.bits((!pAddr),2,0),
                     BitsN.resize_replicate 3 (ReverseEndian (),3))
             | BitsN.B(0x1,3) =>
                  BitsN.??
                    (BitsN.bits((!pAddr),2,0),
                     BitsN.@@
                       (BitsN.resize_replicate 2 (ReverseEndian (),2),
                        BitsN.B(0x0,1)))
             | BitsN.B(0x3,3) =>
                  BitsN.??
                    (BitsN.bits((!pAddr),2,0),
                     BitsN.@@(ReverseEndian (),BitsN.B(0x0,2)))
             | BitsN.B(0x7,3) => BitsN.bits((!pAddr),2,0)
             | _ => raise UNPREDICTABLE ("bad access length"),2,0))
      ; pAddr :=
        (if BigEndianMem ()
           then (!pAddr)
         else BitsN.&&((!pAddr),BitsN.~(BitsN.B(0x7,40))))
      ; if not(exceptionSignalled ())
          then let
                 val a = BitsN.bits((!pAddr),39,3)
               in
                 let
                   val ret = ref NONE
                 in
                   ( if a = ((#base_address) (!JTAG_UART))
                       then ( ret :=
                              (Option.SOME
                                 (BitsN.@@
                                    (flip_endian_word
                                       (reg'JTAG_UART_data
                                          ((#data) (!JTAG_UART))),
                                     flip_endian_word
                                       (reg'JTAG_UART_control
                                          ((#control) (!JTAG_UART))))))
                            ; if (BitsN.bits((!pAddr),2,0)) =
                                 (BitsN.B(0x0,3))
                                then JTAG_UART_load ()
                              else ()
                            )
                     else L3.for
                            (0,Nat.-((!totalCore),1),
                             fn core =>
                               if (BitsN.>=+
                                     (a,
                                      Map.lookup
                                        ((!PIC_base_address),
                                         BitsN.toNat
                                           (BitsN.fromNat(core,8))))) andalso
                                  (BitsN.<+
                                     (a,
                                      BitsN.+
                                        (Map.lookup
                                           ((!PIC_base_address),
                                            BitsN.toNat
                                              (BitsN.fromNat(core,8))),
                                         BitsN.B(0x430,37))))
                                 then ret :=
                                      (Option.SOME
                                         (PIC_load
                                            (BitsN.fromNat(core,8),a)))
                               else ())
                   ; (case (!ret) of
                         Option.SOME d => d
                       | NONE => Map.lookup((!MEM),BitsN.toNat a),(!pAddr))
                   )
                 end
               end
        else (BitsN.B(0x0,64),BitsN.B(0x0,40))
      )
    end
  end;

fun StoreMemory
  (MemType,(AccessLength,(MemElem,(vAddr,(IorD,AccessType))))) =
  let
    val pAddr = ref (BitsN.B(0x0,40))
  in
    let
      val (tmp,CCA) = AddressTranslation(vAddr,(IorD,AccessType))
    in
      ( pAddr := tmp
      ; pAddr :=
        (BitsN.bitFieldInsert
           ((!pAddr),
            case MemType of
               BitsN.B(0x0,3) =>
                  BitsN.??
                    (BitsN.bits((!pAddr),2,0),
                     BitsN.resize_replicate 3 (ReverseEndian (),3))
             | BitsN.B(0x1,3) =>
                  BitsN.??
                    (BitsN.bits((!pAddr),2,0),
                     BitsN.@@
                       (BitsN.resize_replicate 2 (ReverseEndian (),2),
                        BitsN.B(0x0,1)))
             | BitsN.B(0x3,3) =>
                  BitsN.??
                    (BitsN.bits((!pAddr),2,0),
                     BitsN.@@(ReverseEndian (),BitsN.B(0x0,2)))
             | BitsN.B(0x7,3) => BitsN.bits((!pAddr),2,0)
             | _ => raise UNPREDICTABLE ("bad access length"),2,0))
      ; pAddr :=
        (if BigEndianMem ()
           then (!pAddr)
         else BitsN.&&((!pAddr),BitsN.~(BitsN.B(0x7,40))))
      ; if not(exceptionSignalled ())
          then let
                 val a = BitsN.bits((!pAddr),39,3)
                 val l =
                   Nat.-
                     (64,
                      Nat.*
                        (Nat.+
                           (Nat.+(BitsN.toNat AccessLength,1),
                            BitsN.toNat(BitsN.bits(vAddr,2,0))),8))
                 val mask =
                   BitsN.fromNat
                     (Nat.-
                        (Nat.pow
                           (2,
                            Nat.+
                              (l,
                               Nat.*(Nat.+(BitsN.toNat AccessLength,1),8))),
                         Nat.pow(2,l)),64)
               in
                 let
                   val found = ref false
                 in
                   ( if a = ((#base_address) (!JTAG_UART))
                       then ( found := true
                            ; JTAG_UART_store(mask,MemElem)
                            )
                     else L3.for
                            (0,Nat.-((!totalCore),1),
                             fn core =>
                               if (BitsN.>=+
                                     (a,
                                      Map.lookup
                                        ((!PIC_base_address),
                                         BitsN.toNat
                                           (BitsN.fromNat(core,8))))) andalso
                                  (BitsN.<+
                                     (a,
                                      BitsN.+
                                        (Map.lookup
                                           ((!PIC_base_address),
                                            BitsN.toNat
                                              (BitsN.fromNat(core,8))),
                                         BitsN.B(0x430,37))))
                                 then ( found := true
                                      ; PIC_store
                                          (BitsN.fromNat(core,8),
                                           (a,(mask,MemElem)))
                                      )
                               else ())
                   ; if not (!found)
                       then ( L3.for
                                (0,Nat.-((!totalCore),1),
                                 fn core =>
                                   if ((not(core = (BitsN.toNat (!procID)))) andalso
                                       ((Map.lookup
                                           ((!c_LLbit),
                                            BitsN.toNat
                                              (BitsN.fromNat(core,8)))) =
                                        (Option.SOME true))) andalso
                                      ((BitsN.bits
                                          ((#LLAddr)
                                             (Map.lookup
                                                ((!c_CP0),
                                                 BitsN.toNat
                                                   (BitsN.fromNat(core,8)))),
                                           39,3)) =
                                       (BitsN.bits((!pAddr),39,3)))
                                     then let
                                            val x = BitsN.fromNat(core,8)
                                          in
                                            c_LLbit :=
                                            (Map.update
                                               ((!c_LLbit),BitsN.toNat x,
                                                Option.SOME false))
                                          end
                                   else ())
                            ; WriteData(a,(MemElem,mask))
                            )
                     else ()
                   ; (!pAddr)
                   )
                 end
               end
        else BitsN.B(0x0,40)
      )
    end
  end;

fun Fetch () =
  ( let
      val x = CP0 ()
      val x0 = (#Random) x
    in
      write'CP0
        (CP0_Random_rupd
           (x,
            Random_Random_rupd
              (x0,
               if ((#Random)((#Random)(CP0 ()))) =
                  ((#Wired)((#Wired)(CP0 ())))
                 then BitsN.fromNat(Nat.-(TLBEntries,1),8)
               else BitsN.-((#Random)((#Random)(CP0 ())),BitsN.B(0x1,8)))))
    end
  ; if ((#Compare)(CP0 ())) = ((#Count)(CP0 ()))
      then ( let
               val x = CP0 ()
               val x0 = (#Cause) x
               val w = (#IP) x0
             in
               write'CP0
                 (CP0_Cause_rupd
                    (x,
                     CauseRegister_IP_rupd
                       (x0,BitsN.bitFieldInsert(w,BitsN.fromBit true,7,7))))
             end
           ; let
               val x = CP0 ()
               val x0 = (#Cause) x
             in
               write'CP0(CP0_Cause_rupd(x,CauseRegister_TI_rupd(x0,true)))
             end
           )
    else ()
  ; if ((#IE)((#Status)(CP0 ()))) andalso
       (not(((#EXL)((#Status)(CP0 ()))) orelse ((#ERL)((#Status)(CP0 ())))))
      then if not((BitsN.&&
                     (BitsN.bits((#IM)((#Status)(CP0 ())),7,2),
                      BitsN.bits((#IP)((#Cause)(CP0 ())),7,2))) =
                  (BitsN.B(0x0,6)))
             then SignalException Int
           else ()
    else ()
  ; if exceptionSignalled ()
      then NONE
    else if (BitsN.bits(PC (),1,0)) = (BitsN.B(0x0,2))
      then let
             val (pc,cca) = AddressTranslation(PC (),(INSTRUCTION,LOAD))
           in
             if exceptionSignalled ()
               then NONE
             else Option.SOME(ReadInst pc)
           end
    else ( let val x = CP0 () in write'CP0(CP0_BadVAddr_rupd(x,PC ())) end
         ; SignalException AdEL
         ; NONE
         )
  );

fun dfn'JALR (rs,rd) =
  let
    val temp = GPR rs
  in
    ( write'GPR(BitsN.+(PC (),BitsN.B(0x8,64)),rd)
    ; write'BranchTo(Option.SOME(false,temp))
    )
  end;

fun dfn'COP2 v =
  if not((#CU2)((#Status)(CP0 ())))
    then SignalCP2UnusableException ()
  else ();

fun dfn'LWC2 v =
  if not((#CU2)((#Status)(CP0 ())))
    then SignalCP2UnusableException ()
  else ();

fun dfn'LDC2 v =
  if not((#CU2)((#Status)(CP0 ())))
    then SignalCP2UnusableException ()
  else ();

fun dfn'SWC2 v =
  if not((#CU2)((#Status)(CP0 ())))
    then SignalCP2UnusableException ()
  else ();

fun dfn'SDC2 v =
  if not((#CU2)((#Status)(CP0 ())))
    then SignalCP2UnusableException ()
  else ();

fun dfn'ADDI (rs,(rt,immediate)) =
  ( if NotWordValue(GPR rs)
      then raise UNPREDICTABLE ("ADDI: NotWordValue")
    else ()
  ; let
      val temp =
        BitsN.+(BitsN.bits(GPR rs,32,0),BitsN.signExtend 33 immediate)
    in
      if not((BitsN.bit(temp,32)) = (BitsN.bit(temp,31)))
        then SignalException Ov
      else write'GPR(BitsN.signExtend 64 (BitsN.bits(temp,31,0)),rt)
    end
  );

fun dfn'ADDIU (rs,(rt,immediate)) =
  ( if NotWordValue(GPR rs)
      then raise UNPREDICTABLE ("ADDIU: NotWordValue")
    else ()
  ; let
      val temp =
        BitsN.+(BitsN.bits(GPR rs,31,0),BitsN.signExtend 32 immediate)
    in
      write'GPR(BitsN.signExtend 64 temp,rt)
    end
  );

fun dfn'DADDI (rs,(rt,immediate)) =
  let
    val temp =
      BitsN.+(BitsN.signExtend 65 (GPR rs),BitsN.signExtend 65 immediate)
  in
    if not((BitsN.bit(temp,64)) = (BitsN.bit(temp,63)))
      then SignalException Ov
    else write'GPR(BitsN.bits(temp,63,0),rt)
  end;

fun dfn'DADDIU (rs,(rt,immediate)) =
  write'GPR(BitsN.+(GPR rs,BitsN.signExtend 64 immediate),rt);

fun dfn'SLTI (rs,(rt,immediate)) =
  write'GPR
    (BitsN.fromBool 64 (BitsN.<(GPR rs,BitsN.signExtend 64 immediate)),rt);

fun dfn'SLTIU (rs,(rt,immediate)) =
  write'GPR
    (BitsN.fromBool 64 (BitsN.<+(GPR rs,BitsN.signExtend 64 immediate)),rt);

fun dfn'ANDI (rs,(rt,immediate)) =
  write'GPR(BitsN.&&(GPR rs,BitsN.zeroExtend 64 immediate),rt);

fun dfn'ORI (rs,(rt,immediate)) =
  write'GPR(BitsN.||(GPR rs,BitsN.zeroExtend 64 immediate),rt);

fun dfn'XORI (rs,(rt,immediate)) =
  write'GPR(BitsN.??(GPR rs,BitsN.zeroExtend 64 immediate),rt);

fun dfn'LUI (rt,immediate) =
  write'GPR(BitsN.signExtend 64 (BitsN.@@(immediate,BitsN.B(0x0,16))),rt);

fun dfn'ADD (rs,(rt,rd)) =
  ( if (NotWordValue(GPR rs)) orelse (NotWordValue(GPR rt))
      then raise UNPREDICTABLE ("ADD: NotWordValue")
    else ()
  ; let
      val temp = BitsN.+(BitsN.bits(GPR rs,32,0),BitsN.bits(GPR rt,32,0))
    in
      if not((BitsN.bit(temp,32)) = (BitsN.bit(temp,31)))
        then SignalException Ov
      else write'GPR(BitsN.signExtend 64 (BitsN.bits(temp,31,0)),rd)
    end
  );

fun dfn'ADDU (rs,(rt,rd)) =
  ( if (NotWordValue(GPR rs)) orelse (NotWordValue(GPR rt))
      then raise UNPREDICTABLE ("ADDU: NotWordValue")
    else ()
  ; let
      val temp = BitsN.+(BitsN.bits(GPR rs,31,0),BitsN.bits(GPR rt,31,0))
    in
      write'GPR(BitsN.signExtend 64 temp,rd)
    end
  );

fun dfn'SUB (rs,(rt,rd)) =
  ( if (NotWordValue(GPR rs)) orelse (NotWordValue(GPR rt))
      then raise UNPREDICTABLE ("SUB: NotWordValue")
    else ()
  ; let
      val temp = BitsN.-(BitsN.bits(GPR rs,32,0),BitsN.bits(GPR rt,32,0))
    in
      if not((BitsN.bit(temp,32)) = (BitsN.bit(temp,31)))
        then SignalException Ov
      else write'GPR(BitsN.signExtend 64 (BitsN.bits(temp,31,0)),rd)
    end
  );

fun dfn'SUBU (rs,(rt,rd)) =
  ( if (NotWordValue(GPR rs)) orelse (NotWordValue(GPR rt))
      then raise UNPREDICTABLE ("SUBU: NotWordValue")
    else ()
  ; let
      val temp = BitsN.-(BitsN.bits(GPR rs,31,0),BitsN.bits(GPR rt,31,0))
    in
      write'GPR(BitsN.signExtend 64 temp,rd)
    end
  );

fun dfn'DADD (rs,(rt,rd)) =
  let
    val temp =
      BitsN.+(BitsN.signExtend 65 (GPR rs),BitsN.signExtend 65 (GPR rt))
  in
    if not((BitsN.bit(temp,64)) = (BitsN.bit(temp,63)))
      then SignalException Ov
    else write'GPR(BitsN.bits(temp,63,0),rd)
  end;

fun dfn'DADDU (rs,(rt,rd)) = write'GPR(BitsN.+(GPR rs,GPR rt),rd);

fun dfn'DSUB (rs,(rt,rd)) =
  let
    val temp =
      BitsN.-(BitsN.signExtend 65 (GPR rs),BitsN.signExtend 65 (GPR rt))
  in
    if not((BitsN.bit(temp,64)) = (BitsN.bit(temp,63)))
      then SignalException Ov
    else write'GPR(BitsN.bits(temp,63,0),rd)
  end;

fun dfn'DSUBU (rs,(rt,rd)) = write'GPR(BitsN.-(GPR rs,GPR rt),rd);

fun dfn'SLT (rs,(rt,rd)) =
  write'GPR(BitsN.fromBool 64 (BitsN.<(GPR rs,GPR rt)),rd);

fun dfn'SLTU (rs,(rt,rd)) =
  write'GPR(BitsN.fromBool 64 (BitsN.<+(GPR rs,GPR rt)),rd);

fun dfn'AND (rs,(rt,rd)) = write'GPR(BitsN.&&(GPR rs,GPR rt),rd);

fun dfn'OR (rs,(rt,rd)) = write'GPR(BitsN.||(GPR rs,GPR rt),rd);

fun dfn'XOR (rs,(rt,rd)) = write'GPR(BitsN.??(GPR rs,GPR rt),rd);

fun dfn'NOR (rs,(rt,rd)) = write'GPR(BitsN.~(BitsN.||(GPR rs,GPR rt)),rd);

fun dfn'MOVN (rs,(rt,rd)) =
  if not((GPR rt) = (BitsN.B(0x0,64))) then write'GPR(GPR rs,rd) else ();

fun dfn'MOVZ (rs,(rt,rd)) =
  if (GPR rt) = (BitsN.B(0x0,64)) then write'GPR(GPR rs,rd) else ();

fun dfn'MADD (rs,rt) =
  ( if (NotWordValue(GPR rs)) orelse (NotWordValue(GPR rt))
      then raise UNPREDICTABLE ("MADD: NotWordValue")
    else ()
  ; let
      val temp =
        BitsN.+
          (BitsN.@@(BitsN.bits(HI (),31,0),BitsN.bits(LO (),31,0)),
           BitsN.*
             (BitsN.signExtend 64 (BitsN.bits(GPR rs,31,0)),
              BitsN.signExtend 64 (BitsN.bits(GPR rt,31,0))))
    in
      ( write'HI(BitsN.signExtend 64 (BitsN.bits(temp,63,32)))
      ; write'LO(BitsN.signExtend 64 (BitsN.bits(temp,31,0)))
      )
    end
  );

fun dfn'MADDU (rs,rt) =
  ( if (NotWordValue(GPR rs)) orelse (NotWordValue(GPR rt))
      then raise UNPREDICTABLE ("MADDU: NotWordValue")
    else ()
  ; let
      val temp =
        BitsN.+
          (BitsN.@@(BitsN.bits(HI (),31,0),BitsN.bits(LO (),31,0)),
           BitsN.*
             (BitsN.zeroExtend 64 (BitsN.bits(GPR rs,31,0)),
              BitsN.zeroExtend 64 (BitsN.bits(GPR rt,31,0))))
    in
      ( write'HI(BitsN.signExtend 64 (BitsN.bits(temp,63,32)))
      ; write'LO(BitsN.signExtend 64 (BitsN.bits(temp,31,0)))
      )
    end
  );

fun dfn'MSUB (rs,rt) =
  ( if (NotWordValue(GPR rs)) orelse (NotWordValue(GPR rt))
      then raise UNPREDICTABLE ("MSUB: NotWordValue")
    else ()
  ; let
      val temp =
        BitsN.-
          (BitsN.@@(BitsN.bits(HI (),31,0),BitsN.bits(LO (),31,0)),
           BitsN.*
             (BitsN.signExtend 64 (BitsN.bits(GPR rs,31,0)),
              BitsN.signExtend 64 (BitsN.bits(GPR rt,31,0))))
    in
      ( write'HI(BitsN.signExtend 64 (BitsN.bits(temp,63,32)))
      ; write'LO(BitsN.signExtend 64 (BitsN.bits(temp,31,0)))
      )
    end
  );

fun dfn'MSUBU (rs,rt) =
  ( if (NotWordValue(GPR rs)) orelse (NotWordValue(GPR rt))
      then raise UNPREDICTABLE ("MSUBU: NotWordValue")
    else ()
  ; let
      val temp =
        BitsN.-
          (BitsN.@@(BitsN.bits(HI (),31,0),BitsN.bits(LO (),31,0)),
           BitsN.*
             (BitsN.zeroExtend 64 (BitsN.bits(GPR rs,31,0)),
              BitsN.zeroExtend 64 (BitsN.bits(GPR rt,31,0))))
    in
      ( write'HI(BitsN.signExtend 64 (BitsN.bits(temp,63,32)))
      ; write'LO(BitsN.signExtend 64 (BitsN.bits(temp,31,0)))
      )
    end
  );

fun dfn'MUL (rs,(rt,rd)) =
  ( if (NotWordValue(GPR rs)) orelse (NotWordValue(GPR rt))
      then raise UNPREDICTABLE ("MUL: NotWordValue")
    else ()
  ; write'GPR
      (BitsN.signExtend 64
         (BitsN.*(BitsN.bits(GPR rs,31,0),BitsN.bits(GPR rt,31,0))),rd)
  ; write'lo NONE
  ; write'hi NONE
  );

fun dfn'MULT (rs,rt) =
  ( if (NotWordValue(GPR rs)) orelse (NotWordValue(GPR rt))
      then raise UNPREDICTABLE ("MULT: NotWordValue")
    else ()
  ; let
      val prod =
        BitsN.*
          (BitsN.signExtend 64 (BitsN.bits(GPR rs,31,0)),
           BitsN.signExtend 64 (BitsN.bits(GPR rt,31,0)))
    in
      ( write'LO(BitsN.signExtend 64 (BitsN.bits(prod,31,0)))
      ; write'HI(BitsN.signExtend 64 (BitsN.bits(prod,63,32)))
      )
    end
  );

fun dfn'MULTU (rs,rt) =
  ( if (NotWordValue(GPR rs)) orelse (NotWordValue(GPR rt))
      then raise UNPREDICTABLE ("MULTU: NotWordValue")
    else ()
  ; let
      val prod =
        BitsN.*
          (BitsN.zeroExtend 64 (BitsN.bits(GPR rs,31,0)),
           BitsN.zeroExtend 64 (BitsN.bits(GPR rt,31,0)))
    in
      ( write'LO(BitsN.signExtend 64 (BitsN.bits(prod,31,0)))
      ; write'HI(BitsN.signExtend 64 (BitsN.bits(prod,63,32)))
      )
    end
  );

fun dfn'DMULT (rs,rt) =
  let
    val prod =
      BitsN.*(BitsN.signExtend 128 (GPR rs),BitsN.signExtend 128 (GPR rt))
  in
    ( write'LO(BitsN.bits(prod,63,0)); write'HI(BitsN.bits(prod,127,64)) )
  end;

fun dfn'DMULTU (rs,rt) =
  let
    val prod =
      BitsN.*(BitsN.zeroExtend 128 (GPR rs),BitsN.zeroExtend 128 (GPR rt))
  in
    ( write'LO(BitsN.bits(prod,63,0)); write'HI(BitsN.bits(prod,127,64)) )
  end;

fun dfn'DIV (rs,rt) =
  let
    val s = GPR rs
    val t = GPR rt
  in
    ( if (NotWordValue s) orelse (NotWordValue t)
        then raise UNPREDICTABLE ("DIV: NotWordValue")
      else ()
    ; if t = (BitsN.B(0x0,64))
        then ( write'lo NONE; write'hi NONE )
      else let
             val q = BitsN.quot(BitsN.bits(s,31,0),BitsN.bits(t,31,0))
             val r = BitsN.rem(BitsN.bits(s,31,0),BitsN.bits(t,31,0))
           in
             ( write'LO(BitsN.signExtend 64 q)
             ; write'HI(BitsN.signExtend 64 r)
             )
           end
    )
  end;

fun dfn'DIVU (rs,rt) =
  let
    val s = GPR rs
    val t = GPR rt
  in
    ( if (NotWordValue s) orelse (NotWordValue t)
        then raise UNPREDICTABLE ("DIVU: NotWordValue")
      else ()
    ; if t = (BitsN.B(0x0,64))
        then ( write'lo NONE; write'hi NONE )
      else let
             val q = BitsN.div(BitsN.bits(s,31,0),BitsN.bits(t,31,0))
             val r = BitsN.mod(BitsN.bits(s,31,0),BitsN.bits(t,31,0))
           in
             ( write'LO(BitsN.signExtend 64 q)
             ; write'HI(BitsN.signExtend 64 r)
             )
           end
    )
  end;

fun dfn'DDIV (rs,rt) =
  let
    val t = GPR rt
  in
    if t = (BitsN.B(0x0,64))
      then ( write'lo NONE; write'hi NONE )
    else let
           val s = GPR rs
         in
           ( write'LO(BitsN.quot(s,t)); write'HI(BitsN.rem(s,t)) )
         end
  end;

fun dfn'DDIVU (rs,rt) =
  let
    val t = GPR rt
  in
    if t = (BitsN.B(0x0,64))
      then ( write'lo NONE; write'hi NONE )
    else let
           val s = GPR rs
         in
           ( write'LO(BitsN.div(s,t)); write'HI(BitsN.mod(s,t)) )
         end
  end;

fun dfn'MFHI rd = write'GPR(HI (),rd);

fun dfn'MFLO rd = write'GPR(LO (),rd);

fun dfn'MTHI rs = write'HI(GPR rs);

fun dfn'MTLO rs = write'LO(GPR rs);

fun dfn'SLL (rt,(rd,sa)) =
  write'GPR
    (BitsN.signExtend 64
       (BitsN.<<(BitsN.bits(GPR rt,31,0),BitsN.toNat sa)),rd);

fun dfn'SRL (rt,(rd,sa)) =
  ( if NotWordValue(GPR rt)
      then raise UNPREDICTABLE ("SRL: NotWordValue")
    else ()
  ; write'GPR
      (BitsN.signExtend 64
         (BitsN.>>+(BitsN.bits(GPR rt,31,0),BitsN.toNat sa)),rd)
  );

fun dfn'SRA (rt,(rd,sa)) =
  ( if NotWordValue(GPR rt)
      then raise UNPREDICTABLE ("SRA: NotWordValue")
    else ()
  ; write'GPR
      (BitsN.signExtend 64
         (BitsN.>>(BitsN.bits(GPR rt,31,0),BitsN.toNat sa)),rd)
  );

fun dfn'SLLV (rs,(rt,rd)) =
  let
    val sa = BitsN.bits(GPR rs,4,0)
  in
    write'GPR
      (BitsN.signExtend 64
         (BitsN.<<(BitsN.bits(GPR rt,31,0),BitsN.toNat sa)),rd)
  end;

fun dfn'SRLV (rs,(rt,rd)) =
  ( if NotWordValue(GPR rt)
      then raise UNPREDICTABLE ("SRLV: NotWordValue")
    else ()
  ; let
      val sa = BitsN.bits(GPR rs,4,0)
    in
      write'GPR
        (BitsN.signExtend 64
           (BitsN.>>+(BitsN.bits(GPR rt,31,0),BitsN.toNat sa)),rd)
    end
  );

fun dfn'SRAV (rs,(rt,rd)) =
  ( if NotWordValue(GPR rt)
      then raise UNPREDICTABLE ("SRAV: NotWordValue")
    else ()
  ; let
      val sa = BitsN.bits(GPR rs,4,0)
    in
      write'GPR
        (BitsN.signExtend 64
           (BitsN.>>(BitsN.bits(GPR rt,31,0),BitsN.toNat sa)),rd)
    end
  );

fun dfn'DSLL (rt,(rd,sa)) = write'GPR(BitsN.<<(GPR rt,BitsN.toNat sa),rd);

fun dfn'DSRL (rt,(rd,sa)) =
  write'GPR(BitsN.>>+(GPR rt,BitsN.toNat sa),rd);

fun dfn'DSRA (rt,(rd,sa)) = write'GPR(BitsN.>>(GPR rt,BitsN.toNat sa),rd);

fun dfn'DSLLV (rs,(rt,rd)) =
  let
    val sa = BitsN.bits(GPR rs,5,0)
  in
    write'GPR(BitsN.<<(GPR rt,BitsN.toNat sa),rd)
  end;

fun dfn'DSRLV (rs,(rt,rd)) =
  let
    val sa = BitsN.bits(GPR rs,5,0)
  in
    write'GPR(BitsN.>>+(GPR rt,BitsN.toNat sa),rd)
  end;

fun dfn'DSRAV (rs,(rt,rd)) =
  let
    val sa = BitsN.bits(GPR rs,5,0)
  in
    write'GPR(BitsN.>>(GPR rt,BitsN.toNat sa),rd)
  end;

fun dfn'DSLL32 (rt,(rd,sa)) =
  write'GPR(BitsN.<<(GPR rt,Nat.+(BitsN.toNat sa,32)),rd);

fun dfn'DSRL32 (rt,(rd,sa)) =
  write'GPR(BitsN.>>+(GPR rt,Nat.+(BitsN.toNat sa,32)),rd);

fun dfn'DSRA32 (rt,(rd,sa)) =
  write'GPR(BitsN.>>(GPR rt,Nat.+(BitsN.toNat sa,32)),rd);

fun dfn'TGE (rs,rt) =
  if BitsN.>=(GPR rs,GPR rt) then SignalException Tr else ();

fun dfn'TGEU (rs,rt) =
  if BitsN.>=+(GPR rs,GPR rt) then SignalException Tr else ();

fun dfn'TLT (rs,rt) =
  if BitsN.<(GPR rs,GPR rt) then SignalException Tr else ();

fun dfn'TLTU (rs,rt) =
  if BitsN.<+(GPR rs,GPR rt) then SignalException Tr else ();

fun dfn'TEQ (rs,rt) =
  if (GPR rs) = (GPR rt) then SignalException Tr else ();

fun dfn'TNE (rs,rt) =
  if not((GPR rs) = (GPR rt)) then SignalException Tr else ();

fun dfn'TGEI (rs,immediate) =
  if BitsN.>=(GPR rs,BitsN.signExtend 64 immediate)
    then SignalException Tr
  else ();

fun dfn'TGEIU (rs,immediate) =
  if BitsN.>=+(GPR rs,BitsN.signExtend 64 immediate)
    then SignalException Tr
  else ();

fun dfn'TLTI (rs,immediate) =
  if BitsN.<(GPR rs,BitsN.signExtend 64 immediate)
    then SignalException Tr
  else ();

fun dfn'TLTIU (rs,immediate) =
  if BitsN.<+(GPR rs,BitsN.signExtend 64 immediate)
    then SignalException Tr
  else ();

fun dfn'TEQI (rs,immediate) =
  if (GPR rs) = (BitsN.signExtend 64 immediate)
    then SignalException Tr
  else ();

fun dfn'TNEI (rs,immediate) =
  if not((GPR rs) = (BitsN.signExtend 64 immediate))
    then SignalException Tr
  else ();

fun loadByte (base,(rt,(offset,unsigned))) =
  let
    val vAddr = BitsN.+(BitsN.signExtend 64 offset,GPR base)
    val (memdoubleword,pAddr) =
      LoadMemory(BYTE,(BYTE,(vAddr,(DATA,LOAD))))
  in
    if not(exceptionSignalled ())
      then let
             val byte =
               BitsN.??
                 (BitsN.bits(vAddr,2,0),
                  BitsN.resize_replicate 3 (BigEndianCPU (),3))
             val membyte =
               BitsN.bits
                 (memdoubleword,Nat.+(7,Nat.*(8,BitsN.toNat byte)),
                  Nat.*(8,BitsN.toNat byte))
           in
             ( write'GPR
                 (if unsigned
                    then BitsN.zeroExtend 64 membyte
                  else BitsN.signExtend 64 membyte,rt)
             ; write'LLbit NONE
             )
           end
    else ()
  end;

fun loadHalf (base,(rt,(offset,unsigned))) =
  let
    val vAddr = BitsN.+(BitsN.signExtend 64 offset,GPR base)
  in
    if BitsN.bit(vAddr,0)
      then ( let
               val x = CP0 ()
             in
               write'CP0(CP0_BadVAddr_rupd(x,vAddr))
             end
           ; SignalException AdEL
           )
    else let
           val (memdoubleword,pAddr) =
             LoadMemory(HALFWORD,(HALFWORD,(vAddr,(DATA,LOAD))))
         in
           if not(exceptionSignalled ())
             then let
                    val byte =
                      BitsN.??
                        (BitsN.bits(vAddr,2,0),
                         BitsN.@@
                           (BitsN.resize_replicate 2 (BigEndianCPU (),2),
                            BitsN.B(0x0,1)))
                    val memhalf =
                      BitsN.bits
                        (memdoubleword,
                         Nat.+(15,Nat.*(8,BitsN.toNat byte)),
                         Nat.*(8,BitsN.toNat byte))
                  in
                    ( write'GPR
                        (if unsigned
                           then BitsN.zeroExtend 64 memhalf
                         else BitsN.signExtend 64 memhalf,rt)
                    ; write'LLbit NONE
                    )
                  end
           else ()
         end
  end;

fun loadWord (link,(base,(rt,(offset,unsigned)))) =
  let
    val vAddr = BitsN.+(BitsN.signExtend 64 offset,GPR base)
  in
    if not((BitsN.bits(vAddr,1,0)) = (BitsN.B(0x0,2)))
      then ( let
               val x = CP0 ()
             in
               write'CP0(CP0_BadVAddr_rupd(x,vAddr))
             end
           ; SignalException AdEL
           )
    else let
           val (memdoubleword,pAddr) =
             LoadMemory(WORD,(WORD,(vAddr,(DATA,LOAD))))
         in
           if not(exceptionSignalled ())
             then let
                    val byte =
                      BitsN.??
                        (BitsN.bits(vAddr,2,0),
                         BitsN.@@(BigEndianCPU (),BitsN.B(0x0,2)))
                    val memword =
                      BitsN.bits
                        (memdoubleword,
                         Nat.+(31,Nat.*(8,BitsN.toNat byte)),
                         Nat.*(8,BitsN.toNat byte))
                  in
                    ( write'GPR
                        (if unsigned
                           then BitsN.zeroExtend 64 memword
                         else BitsN.signExtend 64 memword,rt)
                    ; if link
                        then ( write'LLbit(Option.SOME true)
                             ; let
                                 val x = CP0 ()
                               in
                                 write'CP0
                                   (CP0_LLAddr_rupd
                                      (x,
                                       BitsN.fromNat(BitsN.toNat pAddr,64)))
                               end
                             )
                      else write'LLbit NONE
                    )
                  end
           else ()
         end
  end;

fun loadDoubleword (link,(base,(rt,offset))) =
  let
    val vAddr = BitsN.+(BitsN.signExtend 64 offset,GPR base)
  in
    if not((BitsN.bits(vAddr,2,0)) = (BitsN.B(0x0,3)))
      then ( let
               val x = CP0 ()
             in
               write'CP0(CP0_BadVAddr_rupd(x,vAddr))
             end
           ; SignalException AdEL
           )
    else let
           val (memdoubleword,pAddr) =
             LoadMemory(DOUBLEWORD,(DOUBLEWORD,(vAddr,(DATA,LOAD))))
         in
           if not(exceptionSignalled ())
             then ( write'GPR(memdoubleword,rt)
                  ; if link
                      then ( write'LLbit(Option.SOME true)
                           ; let
                               val x = CP0 ()
                             in
                               write'CP0
                                 (CP0_LLAddr_rupd
                                    (x,BitsN.fromNat(BitsN.toNat pAddr,64)))
                             end
                           )
                    else write'LLbit NONE
                  )
           else ()
         end
  end;

fun dfn'LB (base,(rt,offset)) = loadByte(base,(rt,(offset,false)));

fun dfn'LBU (base,(rt,offset)) = loadByte(base,(rt,(offset,true)));

fun dfn'LH (base,(rt,offset)) = loadHalf(base,(rt,(offset,false)));

fun dfn'LHU (base,(rt,offset)) = loadHalf(base,(rt,(offset,true)));

fun dfn'LW (base,(rt,offset)) =
  loadWord(false,(base,(rt,(offset,false))));

fun dfn'LWU (base,(rt,offset)) =
  loadWord(false,(base,(rt,(offset,true))));

fun dfn'LL (base,(rt,offset)) = loadWord(true,(base,(rt,(offset,false))));

fun dfn'LD (base,(rt,offset)) = loadDoubleword(false,(base,(rt,offset)));

fun dfn'LLD (base,(rt,offset)) = loadDoubleword(true,(base,(rt,offset)));

fun dfn'LWL (base,(rt,offset)) =
  let
    val vAddr = BitsN.+(BitsN.signExtend 64 offset,GPR base)
    val byte =
      BitsN.??
        (BitsN.bits(vAddr,1,0),
         BitsN.resize_replicate 2 (BigEndianCPU (),2))
    val word = BitsN.??(BitsN.bits(vAddr,2,2),BigEndianCPU ())
    val (memdoubleword,pAddr) =
      LoadMemory(WORD,(BitsN.@@(BitsN.B(0x0,1),byte),(vAddr,(DATA,LOAD))))
  in
    if not(exceptionSignalled ())
      then let
             val temp =
               case (word,byte) of
                  (BitsN.B(0x0,1),BitsN.B(0x0,2)) =>
                     BitsN.@@
                       (BitsN.bits(memdoubleword,7,0),
                        BitsN.bits(GPR rt,23,0))
                | (BitsN.B(0x0,1),BitsN.B(0x1,2)) =>
                     BitsN.@@
                       (BitsN.bits(memdoubleword,15,0),
                        BitsN.bits(GPR rt,15,0))
                | (BitsN.B(0x0,1),BitsN.B(0x2,2)) =>
                     BitsN.@@
                       (BitsN.bits(memdoubleword,23,0),
                        BitsN.bits(GPR rt,7,0))
                | (BitsN.B(0x0,1),BitsN.B(0x3,2)) =>
                     BitsN.bits(memdoubleword,31,0)
                | (BitsN.B(0x1,1),BitsN.B(0x0,2)) =>
                     BitsN.@@
                       (BitsN.bits(memdoubleword,39,32),
                        BitsN.bits(GPR rt,23,0))
                | (BitsN.B(0x1,1),BitsN.B(0x1,2)) =>
                     BitsN.@@
                       (BitsN.bits(memdoubleword,47,32),
                        BitsN.bits(GPR rt,15,0))
                | (BitsN.B(0x1,1),BitsN.B(0x2,2)) =>
                     BitsN.@@
                       (BitsN.bits(memdoubleword,55,32),
                        BitsN.bits(GPR rt,7,0))
                | (BitsN.B(0x1,1),BitsN.B(0x3,2)) =>
                     BitsN.bits(memdoubleword,63,32)
           in
             ( write'GPR(BitsN.signExtend 64 temp,rt); write'LLbit NONE )
           end
    else ()
  end;

fun dfn'LWR (base,(rt,offset)) =
  let
    val vAddr = BitsN.+(BitsN.signExtend 64 offset,GPR base)
    val byte =
      BitsN.??
        (BitsN.bits(vAddr,1,0),
         BitsN.resize_replicate 2 (BigEndianCPU (),2))
    val word = BitsN.??(BitsN.bits(vAddr,2,2),BigEndianCPU ())
    val (memdoubleword,pAddr) =
      LoadMemory
        (WORD,
         (BitsN.-(WORD,BitsN.@@(BitsN.B(0x0,1),byte)),(vAddr,(DATA,LOAD))))
  in
    if not(exceptionSignalled ())
      then let
             val temp =
               case (word,byte) of
                  (BitsN.B(0x0,1),BitsN.B(0x0,2)) =>
                     BitsN.bits(memdoubleword,31,0)
                | (BitsN.B(0x0,1),BitsN.B(0x1,2)) =>
                     BitsN.@@
                       (BitsN.bits(GPR rt,31,24),
                        BitsN.bits(memdoubleword,31,8))
                | (BitsN.B(0x0,1),BitsN.B(0x2,2)) =>
                     BitsN.@@
                       (BitsN.bits(GPR rt,31,16),
                        BitsN.bits(memdoubleword,31,16))
                | (BitsN.B(0x0,1),BitsN.B(0x3,2)) =>
                     BitsN.@@
                       (BitsN.bits(GPR rt,31,8),
                        BitsN.bits(memdoubleword,31,24))
                | (BitsN.B(0x1,1),BitsN.B(0x0,2)) =>
                     BitsN.bits(memdoubleword,63,32)
                | (BitsN.B(0x1,1),BitsN.B(0x1,2)) =>
                     BitsN.@@
                       (BitsN.bits(GPR rt,31,24),
                        BitsN.bits(memdoubleword,63,40))
                | (BitsN.B(0x1,1),BitsN.B(0x2,2)) =>
                     BitsN.@@
                       (BitsN.bits(GPR rt,31,16),
                        BitsN.bits(memdoubleword,63,48))
                | (BitsN.B(0x1,1),BitsN.B(0x3,2)) =>
                     BitsN.@@
                       (BitsN.bits(GPR rt,31,8),
                        BitsN.bits(memdoubleword,63,56))
           in
             ( write'GPR(BitsN.signExtend 64 temp,rt); write'LLbit NONE )
           end
    else ()
  end;

fun dfn'LDL (base,(rt,offset)) =
  let
    val vAddr = BitsN.+(BitsN.signExtend 64 offset,GPR base)
    val byte =
      BitsN.??
        (BitsN.bits(vAddr,2,0),
         BitsN.resize_replicate 3 (BigEndianCPU (),3))
    val (memdoubleword,pAddr) =
      LoadMemory(DOUBLEWORD,(byte,(vAddr,(DATA,LOAD))))
  in
    if not(exceptionSignalled ())
      then ( write'GPR
               (case byte of
                   BitsN.B(0x0,3) =>
                      BitsN.@@
                        (BitsN.bits(memdoubleword,7,0),
                         BitsN.bits(GPR rt,55,0))
                 | BitsN.B(0x1,3) =>
                      BitsN.@@
                        (BitsN.bits(memdoubleword,15,0),
                         BitsN.bits(GPR rt,47,0))
                 | BitsN.B(0x2,3) =>
                      BitsN.@@
                        (BitsN.bits(memdoubleword,23,0),
                         BitsN.bits(GPR rt,39,0))
                 | BitsN.B(0x3,3) =>
                      BitsN.@@
                        (BitsN.bits(memdoubleword,31,0),
                         BitsN.bits(GPR rt,31,0))
                 | BitsN.B(0x4,3) =>
                      BitsN.@@
                        (BitsN.bits(memdoubleword,39,0),
                         BitsN.bits(GPR rt,23,0))
                 | BitsN.B(0x5,3) =>
                      BitsN.@@
                        (BitsN.bits(memdoubleword,47,0),
                         BitsN.bits(GPR rt,15,0))
                 | BitsN.B(0x6,3) =>
                      BitsN.@@
                        (BitsN.bits(memdoubleword,55,0),
                         BitsN.bits(GPR rt,7,0))
                 | BitsN.B(0x7,3) => BitsN.bits(memdoubleword,63,0)
                 | _ => raise General.Bind,rt)
           ; write'LLbit NONE
           )
    else ()
  end;

fun dfn'LDR (base,(rt,offset)) =
  let
    val vAddr = BitsN.+(BitsN.signExtend 64 offset,GPR base)
    val byte =
      BitsN.??
        (BitsN.bits(vAddr,2,0),
         BitsN.resize_replicate 3 (BigEndianCPU (),3))
    val (memdoubleword,pAddr) =
      LoadMemory
        (DOUBLEWORD,(BitsN.-(DOUBLEWORD,byte),(vAddr,(DATA,LOAD))))
  in
    if not(exceptionSignalled ())
      then ( write'GPR
               (case byte of
                   BitsN.B(0x0,3) => BitsN.bits(memdoubleword,63,0)
                 | BitsN.B(0x1,3) =>
                      BitsN.@@
                        (BitsN.bits(GPR rt,63,56),
                         BitsN.bits(memdoubleword,63,8))
                 | BitsN.B(0x2,3) =>
                      BitsN.@@
                        (BitsN.bits(GPR rt,63,48),
                         BitsN.bits(memdoubleword,63,16))
                 | BitsN.B(0x3,3) =>
                      BitsN.@@
                        (BitsN.bits(GPR rt,63,40),
                         BitsN.bits(memdoubleword,63,24))
                 | BitsN.B(0x4,3) =>
                      BitsN.@@
                        (BitsN.bits(GPR rt,63,32),
                         BitsN.bits(memdoubleword,63,32))
                 | BitsN.B(0x5,3) =>
                      BitsN.@@
                        (BitsN.bits(GPR rt,63,24),
                         BitsN.bits(memdoubleword,63,40))
                 | BitsN.B(0x6,3) =>
                      BitsN.@@
                        (BitsN.bits(GPR rt,63,16),
                         BitsN.bits(memdoubleword,63,48))
                 | BitsN.B(0x7,3) =>
                      BitsN.@@
                        (BitsN.bits(GPR rt,63,8),
                         BitsN.bits(memdoubleword,63,56))
                 | _ => raise General.Bind,rt)
           ; write'LLbit NONE
           )
    else ()
  end;

fun dfn'SB (base,(rt,offset)) =
  let
    val vAddr = BitsN.+(BitsN.signExtend 64 offset,GPR base)
    val bytesel =
      BitsN.??
        (BitsN.bits(vAddr,2,0),
         BitsN.resize_replicate 3 (BigEndianCPU (),3))
    val datadoubleword = BitsN.<<(GPR rt,Nat.*(8,BitsN.toNat bytesel))
    val pAddr =
      StoreMemory(BYTE,(BYTE,(datadoubleword,(vAddr,(DATA,STORE)))))
  in
    if not(exceptionSignalled ()) then write'LLbit NONE else ()
  end;

fun dfn'SH (base,(rt,offset)) =
  let
    val vAddr = BitsN.+(BitsN.signExtend 64 offset,GPR base)
  in
    if BitsN.bit(vAddr,0)
      then ( let
               val x = CP0 ()
             in
               write'CP0(CP0_BadVAddr_rupd(x,vAddr))
             end
           ; SignalException AdES
           )
    else let
           val bytesel =
             BitsN.??
               (BitsN.bits(vAddr,2,0),
                BitsN.@@
                  (BitsN.resize_replicate 2 (BigEndianCPU (),2),
                   BitsN.B(0x0,1)))
           val datadoubleword =
             BitsN.<<(GPR rt,Nat.*(8,BitsN.toNat bytesel))
           val pAddr =
             StoreMemory
               (HALFWORD,(HALFWORD,(datadoubleword,(vAddr,(DATA,STORE)))))
         in
           if not(exceptionSignalled ()) then write'LLbit NONE else ()
         end
  end;

fun storeWord (base,(rt,offset)) =
  let
    val vAddr = BitsN.+(BitsN.signExtend 64 offset,GPR base)
  in
    if not((BitsN.bits(vAddr,1,0)) = (BitsN.B(0x0,2)))
      then ( let
               val x = CP0 ()
             in
               write'CP0(CP0_BadVAddr_rupd(x,vAddr))
             end
           ; SignalException AdES
           )
    else let
           val bytesel =
             BitsN.??
               (BitsN.bits(vAddr,2,0),
                BitsN.@@(BigEndianCPU (),BitsN.B(0x0,2)))
           val datadoubleword =
             BitsN.<<(GPR rt,Nat.*(8,BitsN.toNat bytesel))
           val pAddr =
             StoreMemory
               (WORD,(WORD,(datadoubleword,(vAddr,(DATA,STORE)))))
         in
           ()
         end
  end;

fun storeDoubleword (base,(rt,offset)) =
  let
    val vAddr = BitsN.+(BitsN.signExtend 64 offset,GPR base)
  in
    if not((BitsN.bits(vAddr,2,0)) = (BitsN.B(0x0,3)))
      then ( let
               val x = CP0 ()
             in
               write'CP0(CP0_BadVAddr_rupd(x,vAddr))
             end
           ; SignalException AdES
           )
    else let
           val datadoubleword = GPR rt
           val pAddr =
             StoreMemory
               (DOUBLEWORD,
                (DOUBLEWORD,(datadoubleword,(vAddr,(DATA,STORE)))))
         in
           ()
         end
  end;

fun dfn'SW (base,(rt,offset)) =
  ( storeWord(base,(rt,offset)); write'LLbit NONE );

fun dfn'SD (base,(rt,offset)) =
  ( storeDoubleword(base,(rt,offset)); write'LLbit NONE );

fun dfn'SC (base,(rt,offset)) =
  case LLbit () of
     NONE => raise UNPREDICTABLE ("SC: LLbit not set")
   | Option.SOME false => write'GPR(BitsN.B(0x0,64),rt)
   | Option.SOME true =>
        ( storeWord(base,(rt,offset)); write'GPR(BitsN.B(0x1,64),rt) );

fun dfn'SCD (base,(rt,offset)) =
  case LLbit () of
     NONE => raise UNPREDICTABLE ("SCD: LLbit not set")
   | Option.SOME false => write'GPR(BitsN.B(0x0,64),rt)
   | Option.SOME true =>
        ( storeDoubleword(base,(rt,offset))
        ; write'GPR(BitsN.B(0x1,64),rt)
        );

fun dfn'SWL (base,(rt,offset)) =
  let
    val vAddr = BitsN.+(BitsN.signExtend 64 offset,GPR base)
    val byte =
      BitsN.??
        (BitsN.bits(vAddr,1,0),
         BitsN.resize_replicate 2 (BigEndianCPU (),2))
    val word = BitsN.??(BitsN.bits(vAddr,2,2),BigEndianCPU ())
    val datadoubleword =
      case byte of
         BitsN.B(0x0,2) =>
            BitsN.fromNat(BitsN.toNat(BitsN.bits(GPR rt,31,24)),64)
       | BitsN.B(0x1,2) =>
            BitsN.fromNat(BitsN.toNat(BitsN.bits(GPR rt,31,16)),64)
       | BitsN.B(0x2,2) =>
            BitsN.fromNat(BitsN.toNat(BitsN.bits(GPR rt,31,8)),64)
       | BitsN.B(0x3,2) =>
            BitsN.fromNat(BitsN.toNat(BitsN.bits(GPR rt,31,0)),64)
       | _ => raise General.Bind
    val datadoubleword =
      if word = (BitsN.B(0x1,1))
        then BitsN.<<(datadoubleword,32)
      else datadoubleword
    val vAddr =
      if BigEndianMem ()
        then vAddr
      else BitsN.&&(vAddr,BitsN.~(BitsN.B(0x3,64)))
    val pAddr =
      StoreMemory
        (WORD,
         (BitsN.fromNat(BitsN.toNat byte,3),
          (datadoubleword,(vAddr,(DATA,STORE)))))
  in
    ()
  end;

fun dfn'SWR (base,(rt,offset)) =
  let
    val vAddr = BitsN.+(BitsN.signExtend 64 offset,GPR base)
    val byte =
      BitsN.??
        (BitsN.bits(vAddr,1,0),
         BitsN.resize_replicate 2 (BigEndianCPU (),2))
    val word = BitsN.??(BitsN.bits(vAddr,2,2),BigEndianCPU ())
    val datadoubleword =
      case (word,byte) of
         (BitsN.B(0x0,1),BitsN.B(0x0,2)) =>
            BitsN.fromNat(BitsN.toNat(BitsN.bits(GPR rt,31,0)),64)
       | (BitsN.B(0x0,1),BitsN.B(0x1,2)) =>
            BitsN.<<
              (BitsN.fromNat(BitsN.toNat(BitsN.bits(GPR rt,23,0)),64),8)
       | (BitsN.B(0x0,1),BitsN.B(0x2,2)) =>
            BitsN.<<
              (BitsN.fromNat(BitsN.toNat(BitsN.bits(GPR rt,15,0)),64),16)
       | (BitsN.B(0x0,1),BitsN.B(0x3,2)) =>
            BitsN.<<
              (BitsN.fromNat(BitsN.toNat(BitsN.bits(GPR rt,7,0)),64),24)
       | (BitsN.B(0x1,1),BitsN.B(0x0,2)) =>
            BitsN.<<
              (BitsN.fromNat(BitsN.toNat(BitsN.bits(GPR rt,31,0)),64),32)
       | (BitsN.B(0x1,1),BitsN.B(0x1,2)) =>
            BitsN.<<
              (BitsN.fromNat(BitsN.toNat(BitsN.bits(GPR rt,23,0)),64),40)
       | (BitsN.B(0x1,1),BitsN.B(0x2,2)) =>
            BitsN.<<
              (BitsN.fromNat(BitsN.toNat(BitsN.bits(GPR rt,15,0)),64),48)
       | (BitsN.B(0x1,1),BitsN.B(0x3,2)) =>
            BitsN.<<
              (BitsN.fromNat(BitsN.toNat(BitsN.bits(GPR rt,7,0)),64),56)
    val vAddr =
      if BigEndianMem ()
        then BitsN.&&(vAddr,BitsN.~(BitsN.B(0x3,64)))
      else vAddr
    val pAddr =
      StoreMemory
        (WORD,
         (BitsN.-(WORD,BitsN.fromNat(BitsN.toNat byte,3)),
          (datadoubleword,(vAddr,(DATA,STORE)))))
  in
    ()
  end;

fun dfn'SDL (base,(rt,offset)) =
  let
    val vAddr = BitsN.+(BitsN.signExtend 64 offset,GPR base)
    val byte =
      BitsN.??
        (BitsN.bits(vAddr,2,0),
         BitsN.resize_replicate 3 (BigEndianCPU (),3))
    val datadoubleword =
      case byte of
         BitsN.B(0x0,3) =>
            BitsN.fromNat(BitsN.toNat(BitsN.bits(GPR rt,63,56)),64)
       | BitsN.B(0x1,3) =>
            BitsN.fromNat(BitsN.toNat(BitsN.bits(GPR rt,63,48)),64)
       | BitsN.B(0x2,3) =>
            BitsN.fromNat(BitsN.toNat(BitsN.bits(GPR rt,63,40)),64)
       | BitsN.B(0x3,3) =>
            BitsN.fromNat(BitsN.toNat(BitsN.bits(GPR rt,63,32)),64)
       | BitsN.B(0x4,3) =>
            BitsN.fromNat(BitsN.toNat(BitsN.bits(GPR rt,63,24)),64)
       | BitsN.B(0x5,3) =>
            BitsN.fromNat(BitsN.toNat(BitsN.bits(GPR rt,63,16)),64)
       | BitsN.B(0x6,3) =>
            BitsN.fromNat(BitsN.toNat(BitsN.bits(GPR rt,63,8)),64)
       | BitsN.B(0x7,3) => GPR rt
       | _ => raise General.Bind
    val vAddr =
      if BigEndianMem ()
        then vAddr
      else BitsN.&&(vAddr,BitsN.~(BitsN.B(0x7,64)))
    val pAddr =
      StoreMemory(DOUBLEWORD,(byte,(datadoubleword,(vAddr,(DATA,STORE)))))
  in
    ()
  end;

fun dfn'SDR (base,(rt,offset)) =
  let
    val vAddr = BitsN.+(BitsN.signExtend 64 offset,GPR base)
    val byte =
      BitsN.??
        (BitsN.bits(vAddr,2,0),
         BitsN.resize_replicate 3 (BigEndianCPU (),3))
    val datadoubleword =
      case byte of
         BitsN.B(0x0,3) => GPR rt
       | BitsN.B(0x1,3) =>
            BitsN.<<
              (BitsN.fromNat(BitsN.toNat(BitsN.bits(GPR rt,55,0)),64),8)
       | BitsN.B(0x2,3) =>
            BitsN.<<
              (BitsN.fromNat(BitsN.toNat(BitsN.bits(GPR rt,47,0)),64),16)
       | BitsN.B(0x3,3) =>
            BitsN.<<
              (BitsN.fromNat(BitsN.toNat(BitsN.bits(GPR rt,39,0)),64),24)
       | BitsN.B(0x4,3) =>
            BitsN.<<
              (BitsN.fromNat(BitsN.toNat(BitsN.bits(GPR rt,31,0)),64),32)
       | BitsN.B(0x5,3) =>
            BitsN.<<
              (BitsN.fromNat(BitsN.toNat(BitsN.bits(GPR rt,23,0)),64),40)
       | BitsN.B(0x6,3) =>
            BitsN.<<
              (BitsN.fromNat(BitsN.toNat(BitsN.bits(GPR rt,15,0)),64),48)
       | BitsN.B(0x7,3) =>
            BitsN.<<
              (BitsN.fromNat(BitsN.toNat(BitsN.bits(GPR rt,7,0)),64),56)
       | _ => raise General.Bind
    val vAddr =
      if BigEndianMem ()
        then BitsN.&&(vAddr,BitsN.~(BitsN.B(0x7,64)))
      else vAddr
    val pAddr =
      StoreMemory
        (DOUBLEWORD,
         (BitsN.-(DOUBLEWORD,byte),(datadoubleword,(vAddr,(DATA,STORE)))))
  in
    ()
  end;

fun dfn'SYNC stype = ();

fun dfn'BREAK () = SignalException Bp;

fun dfn'SYSCALL () = SignalException Sys;

fun dfn'MTC0 (rt,(rd,sel)) =
  if ((#CU0)((#Status)(CP0 ()))) orelse (KernelMode ())
    then let val x = (0,(rd,sel)) in write'CPR(GPR rt,x) end
  else SignalException CpU;

fun dfn'DMTC0 (rt,(rd,sel)) =
  if ((#CU0)((#Status)(CP0 ()))) orelse (KernelMode ())
    then let val x = (0,(rd,sel)) in write'CPR(GPR rt,x) end
  else SignalException CpU;

fun dfn'MFC0 (rt,(rd,sel)) =
  if ((#CU0)((#Status)(CP0 ()))) orelse (KernelMode ())
    then write'GPR
           (BitsN.signExtend 64 (BitsN.bits(CPR(0,(rd,sel)),31,0)),rt)
  else SignalException CpU;

fun dfn'DMFC0 (rt,(rd,sel)) =
  if ((#CU0)((#Status)(CP0 ()))) orelse (KernelMode ())
    then write'GPR(CPR(0,(rd,sel)),rt)
  else SignalException CpU;

fun dfn'J instr_index =
  write'BranchTo
    (Option.SOME
       (false,
        BitsN.concat[BitsN.bits(PC (),63,28),instr_index,BitsN.B(0x0,2)]));

fun dfn'JAL instr_index =
  ( write'GPR(BitsN.+(PC (),BitsN.B(0x8,64)),BitsN.B(0x1F,5))
  ; write'BranchTo
      (Option.SOME
         (false,
          BitsN.concat[BitsN.bits(PC (),63,28),instr_index,BitsN.B(0x0,2)]))
  );

fun dfn'JR rs = write'BranchTo(Option.SOME(false,GPR rs));

fun ConditionalBranch (b,offset) =
  write'BranchTo
    (Option.SOME
       (if b
          then (false,
                BitsN.+
                  (BitsN.+(PC (),BitsN.B(0x4,64)),
                   BitsN.<<(BitsN.signExtend 64 offset,2)))
        else (true,BitsN.+(PC (),BitsN.B(0x4,64)))));

fun ConditionalBranchLikely (b,offset) =
  if b
    then write'BranchTo
           (Option.SOME
              (false,
               BitsN.+
                 (BitsN.+(PC (),BitsN.B(0x4,64)),
                  BitsN.<<(BitsN.signExtend 64 offset,2))))
  else if Option.isSome(BranchDelay ())
    then write'BranchTo(Option.SOME(true,BitsN.+(PC (),BitsN.B(0x8,64))))
  else write'PC(BitsN.+(PC (),BitsN.B(0x4,64)));

fun dfn'BEQ (rs,(rt,offset)) =
  ConditionalBranch((GPR rs) = (GPR rt),offset);

fun dfn'BNE (rs,(rt,offset)) =
  ConditionalBranch(not((GPR rs) = (GPR rt)),offset);

fun dfn'BLEZ (rs,offset) =
  ConditionalBranch(BitsN.<=(GPR rs,BitsN.B(0x0,64)),offset);

fun dfn'BGTZ (rs,offset) =
  ConditionalBranch(BitsN.>(GPR rs,BitsN.B(0x0,64)),offset);

fun dfn'BLTZ (rs,offset) =
  ConditionalBranch(BitsN.<(GPR rs,BitsN.B(0x0,64)),offset);

fun dfn'BGEZ (rs,offset) =
  ConditionalBranch(BitsN.>=(GPR rs,BitsN.B(0x0,64)),offset);

fun dfn'BLTZAL (rs,offset) =
  let
    val temp = GPR rs
  in
    ( write'GPR(BitsN.+(PC (),BitsN.B(0x8,64)),BitsN.B(0x1F,5))
    ; ConditionalBranch(BitsN.<(temp,BitsN.B(0x0,64)),offset)
    )
  end;

fun dfn'BGEZAL (rs,offset) =
  let
    val temp = GPR rs
  in
    ( write'GPR(BitsN.+(PC (),BitsN.B(0x8,64)),BitsN.B(0x1F,5))
    ; ConditionalBranch(BitsN.>=(temp,BitsN.B(0x0,64)),offset)
    )
  end;

fun dfn'BEQL (rs,(rt,offset)) =
  ConditionalBranchLikely((GPR rs) = (GPR rt),offset);

fun dfn'BNEL (rs,(rt,offset)) =
  ConditionalBranchLikely(not((GPR rs) = (GPR rt)),offset);

fun dfn'BLEZL (rs,offset) =
  ConditionalBranchLikely(BitsN.<=(GPR rs,BitsN.B(0x0,64)),offset);

fun dfn'BGTZL (rs,offset) =
  ConditionalBranchLikely(BitsN.>(GPR rs,BitsN.B(0x0,64)),offset);

fun dfn'BLTZL (rs,offset) =
  ConditionalBranchLikely(BitsN.<(GPR rs,BitsN.B(0x0,64)),offset);

fun dfn'BGEZL (rs,offset) =
  ConditionalBranchLikely(BitsN.>=(GPR rs,BitsN.B(0x0,64)),offset);

fun dfn'BLTZALL (rs,offset) =
  let
    val temp = GPR rs
  in
    ( write'GPR(BitsN.+(PC (),BitsN.B(0x8,64)),BitsN.B(0x1F,5))
    ; ConditionalBranchLikely(BitsN.<(temp,BitsN.B(0x0,64)),offset)
    )
  end;

fun dfn'BGEZALL (rs,offset) =
  let
    val temp = GPR rs
  in
    ( write'GPR(BitsN.+(PC (),BitsN.B(0x8,64)),BitsN.B(0x1F,5))
    ; ConditionalBranchLikely(BitsN.>=(temp,BitsN.B(0x0,64)),offset)
    )
  end;

val dfn'WAIT = ()

fun dfn'ReservedInstruction () = SignalException ResI;

fun dfn'Unpredictable () =
  raise UNPREDICTABLE ("Unpredictable instruction");

fun Run v0 =
  case v0 of
     BREAK => dfn'BREAK ()
   | ERET => dfn'ERET ()
   | ReservedInstruction => dfn'ReservedInstruction ()
   | SYSCALL => dfn'SYSCALL ()
   | TLBP => dfn'TLBP ()
   | TLBR => dfn'TLBR ()
   | TLBWI => dfn'TLBWI ()
   | TLBWR => dfn'TLBWR ()
   | Unpredictable => dfn'Unpredictable ()
   | WAIT => dfn'WAIT
   | CACHE v127 => dfn'CACHE v127
   | COP2 v128 => dfn'COP2 v128
   | LDC2 v129 => dfn'LDC2 v129
   | LWC2 v130 => dfn'LWC2 v130
   | RDHWR v131 => dfn'RDHWR v131
   | SDC2 v132 => dfn'SDC2 v132
   | SWC2 v133 => dfn'SWC2 v133
   | SYNC v134 => dfn'SYNC v134
   | ArithI v1 =>
      (case v1 of
          ADDI v2 => dfn'ADDI v2
        | ADDIU v3 => dfn'ADDIU v3
        | ANDI v4 => dfn'ANDI v4
        | DADDI v5 => dfn'DADDI v5
        | DADDIU v6 => dfn'DADDIU v6
        | LUI v7 => dfn'LUI v7
        | ORI v8 => dfn'ORI v8
        | SLTI v9 => dfn'SLTI v9
        | SLTIU v10 => dfn'SLTIU v10
        | XORI v11 => dfn'XORI v11)
   | ArithR v12 =>
      (case v12 of
          ADD v13 => dfn'ADD v13
        | ADDU v14 => dfn'ADDU v14
        | AND v15 => dfn'AND v15
        | DADD v16 => dfn'DADD v16
        | DADDU v17 => dfn'DADDU v17
        | DSUB v18 => dfn'DSUB v18
        | DSUBU v19 => dfn'DSUBU v19
        | MOVN v20 => dfn'MOVN v20
        | MOVZ v21 => dfn'MOVZ v21
        | NOR v22 => dfn'NOR v22
        | OR v23 => dfn'OR v23
        | SLT v24 => dfn'SLT v24
        | SLTU v25 => dfn'SLTU v25
        | SUB v26 => dfn'SUB v26
        | SUBU v27 => dfn'SUBU v27
        | XOR v28 => dfn'XOR v28)
   | Branch v29 =>
      (case v29 of
          BEQ v30 => dfn'BEQ v30
        | BEQL v31 => dfn'BEQL v31
        | BGEZ v32 => dfn'BGEZ v32
        | BGEZAL v33 => dfn'BGEZAL v33
        | BGEZALL v34 => dfn'BGEZALL v34
        | BGEZL v35 => dfn'BGEZL v35
        | BGTZ v36 => dfn'BGTZ v36
        | BGTZL v37 => dfn'BGTZL v37
        | BLEZ v38 => dfn'BLEZ v38
        | BLEZL v39 => dfn'BLEZL v39
        | BLTZ v40 => dfn'BLTZ v40
        | BLTZAL v41 => dfn'BLTZAL v41
        | BLTZALL v42 => dfn'BLTZALL v42
        | BLTZL v43 => dfn'BLTZL v43
        | BNE v44 => dfn'BNE v44
        | BNEL v45 => dfn'BNEL v45
        | J v46 => dfn'J v46
        | JAL v47 => dfn'JAL v47
        | JALR v48 => dfn'JALR v48
        | JR v49 => dfn'JR v49)
   | CP v50 =>
      (case v50 of
          DMFC0 v51 => dfn'DMFC0 v51
        | DMTC0 v52 => dfn'DMTC0 v52
        | MFC0 v53 => dfn'MFC0 v53
        | MTC0 v54 => dfn'MTC0 v54)
   | Load v55 =>
      (case v55 of
          LB v56 => dfn'LB v56
        | LBU v57 => dfn'LBU v57
        | LD v58 => dfn'LD v58
        | LDL v59 => dfn'LDL v59
        | LDR v60 => dfn'LDR v60
        | LH v61 => dfn'LH v61
        | LHU v62 => dfn'LHU v62
        | LL v63 => dfn'LL v63
        | LLD v64 => dfn'LLD v64
        | LW v65 => dfn'LW v65
        | LWL v66 => dfn'LWL v66
        | LWR v67 => dfn'LWR v67
        | LWU v68 => dfn'LWU v68)
   | MultDiv v69 =>
      (case v69 of
          DDIV v70 => dfn'DDIV v70
        | DDIVU v71 => dfn'DDIVU v71
        | DIV v72 => dfn'DIV v72
        | DIVU v73 => dfn'DIVU v73
        | DMULT v74 => dfn'DMULT v74
        | DMULTU v75 => dfn'DMULTU v75
        | MADD v76 => dfn'MADD v76
        | MADDU v77 => dfn'MADDU v77
        | MFHI v78 => dfn'MFHI v78
        | MFLO v79 => dfn'MFLO v79
        | MSUB v80 => dfn'MSUB v80
        | MSUBU v81 => dfn'MSUBU v81
        | MTHI v82 => dfn'MTHI v82
        | MTLO v83 => dfn'MTLO v83
        | MUL v84 => dfn'MUL v84
        | MULT v85 => dfn'MULT v85
        | MULTU v86 => dfn'MULTU v86)
   | Shift v87 =>
      (case v87 of
          DSLL v88 => dfn'DSLL v88
        | DSLL32 v89 => dfn'DSLL32 v89
        | DSLLV v90 => dfn'DSLLV v90
        | DSRA v91 => dfn'DSRA v91
        | DSRA32 v92 => dfn'DSRA32 v92
        | DSRAV v93 => dfn'DSRAV v93
        | DSRL v94 => dfn'DSRL v94
        | DSRL32 v95 => dfn'DSRL32 v95
        | DSRLV v96 => dfn'DSRLV v96
        | SLL v97 => dfn'SLL v97
        | SLLV v98 => dfn'SLLV v98
        | SRA v99 => dfn'SRA v99
        | SRAV v100 => dfn'SRAV v100
        | SRL v101 => dfn'SRL v101
        | SRLV v102 => dfn'SRLV v102)
   | Store v103 =>
      (case v103 of
          SB v104 => dfn'SB v104
        | SC v105 => dfn'SC v105
        | SCD v106 => dfn'SCD v106
        | SD v107 => dfn'SD v107
        | SDL v108 => dfn'SDL v108
        | SDR v109 => dfn'SDR v109
        | SH v110 => dfn'SH v110
        | SW v111 => dfn'SW v111
        | SWL v112 => dfn'SWL v112
        | SWR v113 => dfn'SWR v113)
   | Trap v114 =>
      (case v114 of
          TEQ v115 => dfn'TEQ v115
        | TEQI v116 => dfn'TEQI v116
        | TGE v117 => dfn'TGE v117
        | TGEI v118 => dfn'TGEI v118
        | TGEIU v119 => dfn'TGEIU v119
        | TGEU v120 => dfn'TGEU v120
        | TLT v121 => dfn'TLT v121
        | TLTI v122 => dfn'TLTI v122
        | TLTIU v123 => dfn'TLTIU v123
        | TLTU v124 => dfn'TLTU v124
        | TNE v125 => dfn'TNE v125
        | TNEI v126 => dfn'TNEI v126);

fun COP2Decode v = COP2 v;

fun LWC2Decode v = LWC2 v;

fun LDC2Decode v = LDC2 v;

fun SWC2Decode v = SWC2 v;

fun SDC2Decode v = SDC2 v;

fun Decode w =
  case boolify'32 w of
     (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (false,
            (false,
             (false,
              (false,
               (false,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (imm5'4,
                           (imm5'3,
                            (imm5'2,
                             (imm5'1,
                              (imm5'0,
                               (false,
                                (false,(false,(false,(false,false))))))))))))))))))))))))))))))) =>
      Shift
        (SLL(BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             (BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5),
              BitsN.fromBitstring([imm5'4,imm5'3,imm5'2,imm5'1,imm5'0],5))))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (false,
            (false,
             (false,
              (false,
               (false,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (imm5'4,
                           (imm5'3,
                            (imm5'2,
                             (imm5'1,
                              (imm5'0,
                               (false,(false,(false,(false,(true,false))))))))))))))))))))))))))))))) =>
      Shift
        (SRL(BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             (BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5),
              BitsN.fromBitstring([imm5'4,imm5'3,imm5'2,imm5'1,imm5'0],5))))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (false,
            (false,
             (false,
              (false,
               (false,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (imm5'4,
                           (imm5'3,
                            (imm5'2,
                             (imm5'1,
                              (imm5'0,
                               (false,(false,(false,(false,(true,true))))))))))))))))))))))))))))))) =>
      Shift
        (SRA(BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             (BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5),
              BitsN.fromBitstring([imm5'4,imm5'3,imm5'2,imm5'1,imm5'0],5))))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,(false,(false,(true,(false,false))))))))))))))))))))))))))))))) =>
      Shift
        (SLLV
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,(false,(false,(true,(true,false))))))))))))))))))))))))))))))) =>
      Shift
        (SRLV
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,(false,(false,(true,(true,true))))))))))))))))))))))))))))))) =>
      Shift
        (SRAV
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (false,
                 (false,
                  (false,
                   (false,
                    (false,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (hint'4,
                           (hint'3,
                            (hint'2,
                             (hint'1,
                              (hint'0,
                               (false,(false,(true,(false,(false,false))))))))))))))))))))))))))))))) =>
      Branch(JR(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5)))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (false,
                 (false,
                  (false,
                   (false,
                    (false,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (hint'4,
                           (hint'3,
                            (hint'2,
                             (hint'1,
                              (hint'0,
                               (false,(false,(true,(false,(false,true))))))))))))))))))))))))))))))) =>
      Branch
        (JALR
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5)))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,(false,(true,(false,(true,false))))))))))))))))))))))))))))))) =>
      ArithR
        (MOVZ
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,(false,(true,(false,(true,true))))))))))))))))))))))))))))))) =>
      ArithR
        (MOVN
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (false,
            (false,
             (false,
              (false,
               (false,
                (code'14,
                 (code'13,
                  (code'12,
                   (code'11,
                    (code'10,
                     (code'9,
                      (code'8,
                       (code'7,
                        (code'6,
                         (code'5,
                          (code'4,
                           (code'3,
                            (code'2,
                             (code'1,
                              (code'0,
                               (false,(false,(true,(true,(false,false))))))))))))))))))))))))))))))) =>
      SYSCALL
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (false,
            (false,
             (false,
              (false,
               (false,
                (code'14,
                 (code'13,
                  (code'12,
                   (code'11,
                    (code'10,
                     (code'9,
                      (code'8,
                       (code'7,
                        (code'6,
                         (code'5,
                          (code'4,
                           (code'3,
                            (code'2,
                             (code'1,
                              (code'0,
                               (false,(false,(true,(true,(false,true))))))))))))))))))))))))))))))) =>
      BREAK
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (false,
            (false,
             (false,
              (false,
               (false,
                (false,
                 (false,
                  (false,
                   (false,
                    (false,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (imm5'4,
                           (imm5'3,
                            (imm5'2,
                             (imm5'1,
                              (imm5'0,
                               (false,(false,(true,(true,(true,true))))))))))))))))))))))))))))))) =>
      SYNC(BitsN.fromBitstring([imm5'4,imm5'3,imm5'2,imm5'1,imm5'0],5))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (false,
            (false,
             (false,
              (false,
               (false,
                (false,
                 (false,
                  (false,
                   (false,
                    (false,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,(true,(false,(false,(false,false))))))))))))))))))))))))))))))) =>
      MultDiv(MFHI(BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5)))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (false,
                 (false,
                  (false,
                   (false,
                    (false,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,(true,(false,(false,(false,true))))))))))))))))))))))))))))))) =>
      MultDiv(MTHI(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5)))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (false,
            (false,
             (false,
              (false,
               (false,
                (false,
                 (false,
                  (false,
                   (false,
                    (false,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,(true,(false,(false,(true,false))))))))))))))))))))))))))))))) =>
      MultDiv(MFLO(BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5)))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (false,
                 (false,
                  (false,
                   (false,
                    (false,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,(true,(false,(false,(true,true))))))))))))))))))))))))))))))) =>
      MultDiv(MTLO(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5)))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,(true,(false,(true,(false,false))))))))))))))))))))))))))))))) =>
      Shift
        (DSLLV
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,(true,(false,(true,(true,false))))))))))))))))))))))))))))))) =>
      Shift
        (DSRLV
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,(true,(false,(true,(true,true))))))))))))))))))))))))))))))) =>
      Shift
        (DSRAV
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,(true,(true,(false,(false,false))))))))))))))))))))))))))))))) =>
      MultDiv
        (MULT
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,(true,(true,(false,(false,true))))))))))))))))))))))))))))))) =>
      MultDiv
        (MULTU
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,(true,(true,(false,(true,false))))))))))))))))))))))))))))))) =>
      MultDiv
        (DIV(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
             BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,(true,(true,(false,(true,true))))))))))))))))))))))))))))))) =>
      MultDiv
        (DIVU
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,(true,(true,(true,(false,false))))))))))))))))))))))))))))))) =>
      MultDiv
        (DMULT
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,(true,(true,(true,(false,true))))))))))))))))))))))))))))))) =>
      MultDiv
        (DMULTU
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,(true,(true,(true,(true,false))))))))))))))))))))))))))))))) =>
      MultDiv
        (DDIV
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,(true,(true,(true,(true,true))))))))))))))))))))))))))))))) =>
      MultDiv
        (DDIVU
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (true,(false,(false,(false,(false,false))))))))))))))))))))))))))))))) =>
      ArithR
        (ADD(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
             (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
              BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (true,(false,(false,(false,(false,true))))))))))))))))))))))))))))))) =>
      ArithR
        (ADDU
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (true,(false,(false,(false,(true,false))))))))))))))))))))))))))))))) =>
      ArithR
        (SUB(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
             (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
              BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (true,(false,(false,(false,(true,true))))))))))))))))))))))))))))))) =>
      ArithR
        (SUBU
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (true,(false,(false,(true,(false,false))))))))))))))))))))))))))))))) =>
      ArithR
        (AND(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
             (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
              BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (true,(false,(false,(true,(false,true))))))))))))))))))))))))))))))) =>
      ArithR
        (OR(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (true,(false,(false,(true,(true,false))))))))))))))))))))))))))))))) =>
      ArithR
        (XOR(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
             (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
              BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (true,(false,(false,(true,(true,true))))))))))))))))))))))))))))))) =>
      ArithR
        (NOR(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
             (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
              BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (true,(false,(true,(false,(true,false))))))))))))))))))))))))))))))) =>
      ArithR
        (SLT(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
             (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
              BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (true,(false,(true,(false,(true,true))))))))))))))))))))))))))))))) =>
      ArithR
        (SLTU
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (true,(false,(true,(true,(false,false))))))))))))))))))))))))))))))) =>
      ArithR
        (DADD
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (true,(false,(true,(true,(false,true))))))))))))))))))))))))))))))) =>
      ArithR
        (DADDU
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (true,(false,(true,(true,(true,false))))))))))))))))))))))))))))))) =>
      ArithR
        (DSUB
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (true,(false,(true,(true,(true,true))))))))))))))))))))))))))))))) =>
      ArithR
        (DSUBU
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (code'9,
                      (code'8,
                       (code'7,
                        (code'6,
                         (code'5,
                          (code'4,
                           (code'3,
                            (code'2,
                             (code'1,
                              (code'0,
                               (true,(true,(false,(false,(false,false))))))))))))))))))))))))))))))) =>
      Trap
        (TGE(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
             BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (code'9,
                      (code'8,
                       (code'7,
                        (code'6,
                         (code'5,
                          (code'4,
                           (code'3,
                            (code'2,
                             (code'1,
                              (code'0,
                               (true,(true,(false,(false,(false,true))))))))))))))))))))))))))))))) =>
      Trap
        (TGEU
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (code'9,
                      (code'8,
                       (code'7,
                        (code'6,
                         (code'5,
                          (code'4,
                           (code'3,
                            (code'2,
                             (code'1,
                              (code'0,
                               (true,(true,(false,(false,(true,false))))))))))))))))))))))))))))))) =>
      Trap
        (TLT(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
             BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (code'9,
                      (code'8,
                       (code'7,
                        (code'6,
                         (code'5,
                          (code'4,
                           (code'3,
                            (code'2,
                             (code'1,
                              (code'0,
                               (true,(true,(false,(false,(true,true))))))))))))))))))))))))))))))) =>
      Trap
        (TLTU
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (code'9,
                      (code'8,
                       (code'7,
                        (code'6,
                         (code'5,
                          (code'4,
                           (code'3,
                            (code'2,
                             (code'1,
                              (code'0,
                               (true,(true,(false,(true,(false,false))))))))))))))))))))))))))))))) =>
      Trap
        (TEQ(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
             BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (code'9,
                      (code'8,
                       (code'7,
                        (code'6,
                         (code'5,
                          (code'4,
                           (code'3,
                            (code'2,
                             (code'1,
                              (code'0,
                               (true,(true,(false,(true,(true,false))))))))))))))))))))))))))))))) =>
      Trap
        (TNE(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
             BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (false,
            (false,
             (false,
              (false,
               (false,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (imm5'4,
                           (imm5'3,
                            (imm5'2,
                             (imm5'1,
                              (imm5'0,
                               (true,(true,(true,(false,(false,false))))))))))))))))))))))))))))))) =>
      Shift
        (DSLL
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            (BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5),
             BitsN.fromBitstring([imm5'4,imm5'3,imm5'2,imm5'1,imm5'0],5))))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (false,
            (false,
             (false,
              (false,
               (false,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (imm5'4,
                           (imm5'3,
                            (imm5'2,
                             (imm5'1,
                              (imm5'0,
                               (true,(true,(true,(false,(true,false))))))))))))))))))))))))))))))) =>
      Shift
        (DSRL
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            (BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5),
             BitsN.fromBitstring([imm5'4,imm5'3,imm5'2,imm5'1,imm5'0],5))))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (false,
            (false,
             (false,
              (false,
               (false,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (imm5'4,
                           (imm5'3,
                            (imm5'2,
                             (imm5'1,
                              (imm5'0,
                               (true,(true,(true,(false,(true,true))))))))))))))))))))))))))))))) =>
      Shift
        (DSRA
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            (BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5),
             BitsN.fromBitstring([imm5'4,imm5'3,imm5'2,imm5'1,imm5'0],5))))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (false,
            (false,
             (false,
              (false,
               (false,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (imm5'4,
                           (imm5'3,
                            (imm5'2,
                             (imm5'1,
                              (imm5'0,
                               (true,(true,(true,(true,(false,false))))))))))))))))))))))))))))))) =>
      Shift
        (DSLL32
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            (BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5),
             BitsN.fromBitstring([imm5'4,imm5'3,imm5'2,imm5'1,imm5'0],5))))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (false,
            (false,
             (false,
              (false,
               (false,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (imm5'4,
                           (imm5'3,
                            (imm5'2,
                             (imm5'1,
                              (imm5'0,
                               (true,(true,(true,(true,(true,false))))))))))))))))))))))))))))))) =>
      Shift
        (DSRL32
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            (BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5),
             BitsN.fromBitstring([imm5'4,imm5'3,imm5'2,imm5'1,imm5'0],5))))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (false,
            (false,
             (false,
              (false,
               (false,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (imm5'4,
                           (imm5'3,
                            (imm5'2,
                             (imm5'1,
                              (imm5'0,
                               (true,(true,(true,(true,(true,true))))))))))))))))))))))))))))))) =>
      Shift
        (DSRA32
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            (BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5),
             BitsN.fromBitstring([imm5'4,imm5'3,imm5'2,imm5'1,imm5'0],5))))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (true,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (false,
                 (false,
                  (false,
                   (false,
                    (false,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Branch
        (BLTZ
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (true,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (false,
                 (false,
                  (false,
                   (false,
                    (true,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Branch
        (BGEZ
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (true,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (false,
                 (false,
                  (false,
                   (true,
                    (false,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Branch
        (BLTZL
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (true,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (false,
                 (false,
                  (false,
                   (true,
                    (true,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Branch
        (BGEZL
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (true,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (false,
                 (true,
                  (false,
                   (false,
                    (false,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Trap
        (TGEI
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (true,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (false,
                 (true,
                  (false,
                   (false,
                    (true,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Trap
        (TGEIU
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (true,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (false,
                 (true,
                  (false,
                   (true,
                    (false,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Trap
        (TLTI
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (true,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (false,
                 (true,
                  (false,
                   (true,
                    (true,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Trap
        (TLTIU
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (true,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (false,
                 (true,
                  (true,
                   (false,
                    (false,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Trap
        (TEQI
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (true,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (false,
                 (true,
                  (true,
                   (true,
                    (false,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Trap
        (TNEI
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (true,
           (true,
            (true,
             (true,
              (true,
               (true,
                (true,
                 (false,
                  (false,
                   (_,
                    (_,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Unpredictable
   | (false,
      (false,
       (false,
        (false,
         (false,
          (true,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (true,
                 (false,
                  (false,
                   (false,
                    (false,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Branch
        (BLTZAL
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (true,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (true,
                 (false,
                  (false,
                   (false,
                    (true,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Branch
        (BGEZAL
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (true,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (true,
                 (false,
                  (false,
                   (true,
                    (false,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Branch
        (BLTZALL
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
      (false,
       (false,
        (false,
         (false,
          (true,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (true,
                 (false,
                  (false,
                   (true,
                    (true,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Branch
        (BGEZALL
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
      (false,
       (false,
        (false,
         (true,
          (false,
           (immediate'25,
            (immediate'24,
             (immediate'23,
              (immediate'22,
               (immediate'21,
                (immediate'20,
                 (immediate'19,
                  (immediate'18,
                   (immediate'17,
                    (immediate'16,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Branch
        (J(BitsN.fromBitstring
             ([immediate'25,immediate'24,immediate'23,immediate'22,
               immediate'21,immediate'20,immediate'19,immediate'18,
               immediate'17,immediate'16,immediate'15,immediate'14,
               immediate'13,immediate'12,immediate'11,immediate'10,
               immediate'9,immediate'8,immediate'7,immediate'6,
               immediate'5,immediate'4,immediate'3,immediate'2,
               immediate'1,immediate'0],26)))
   | (false,
      (false,
       (false,
        (false,
         (true,
          (true,
           (immediate'25,
            (immediate'24,
             (immediate'23,
              (immediate'22,
               (immediate'21,
                (immediate'20,
                 (immediate'19,
                  (immediate'18,
                   (immediate'17,
                    (immediate'16,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Branch
        (JAL(BitsN.fromBitstring
               ([immediate'25,immediate'24,immediate'23,immediate'22,
                 immediate'21,immediate'20,immediate'19,immediate'18,
                 immediate'17,immediate'16,immediate'15,immediate'14,
                 immediate'13,immediate'12,immediate'11,immediate'10,
                 immediate'9,immediate'8,immediate'7,immediate'6,
                 immediate'5,immediate'4,immediate'3,immediate'2,
                 immediate'1,immediate'0],26)))
   | (false,
        (true,
         (false,
          (false,
           (false,
            (false,
             (true,
              (false,
               (false,
                (false,
                 (false,
                  (false,
                   (false,
                    (false,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,
                                (false,
                                 (false,
                                  (false,(false,(false,(false,true))))))))))))))))))))))))))))))) =>
        TLBR
   | (false,
        (true,
         (false,
          (false,
           (false,
            (false,
             (true,
              (false,
               (false,
                (false,
                 (false,
                  (false,
                   (false,
                    (false,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,
                                (false,
                                 (false,
                                  (false,(false,(false,(true,false))))))))))))))))))))))))))))))) =>
        TLBWI
   | (false,
        (true,
         (false,
          (false,
           (false,
            (false,
             (true,
              (false,
               (false,
                (false,
                 (false,
                  (false,
                   (false,
                    (false,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,
                                (false,
                                 (false,
                                  (false,(false,(true,(true,false))))))))))))))))))))))))))))))) =>
        TLBWR
   | (false,
        (true,
         (false,
          (false,
           (false,
            (false,
             (true,
              (false,
               (false,
                (false,
                 (false,
                  (false,
                   (false,
                    (false,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,
                                (false,
                                 (false,
                                  (false,(true,(false,(false,false))))))))))))))))))))))))))))))) =>
        TLBP
   | (false,
        (true,
         (false,
          (false,
           (false,
            (false,
             (true,
              (false,
               (false,
                (false,
                 (false,
                  (false,
                   (false,
                    (false,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,
                                (false,
                                 (false,
                                  (true,(true,(false,(false,false))))))))))))))))))))))))))))))) =>
        ERET
   | (false,
      (true,
       (false,
        (false,
         (false,
          (false,
           (false,
            (false,
             (false,
              (false,
               (false,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,
                                (false,(false,(sel'2,(sel'1,sel'0))))))))))))))))))))))))))))))) =>
      CP(MFC0
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            (BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5),
             BitsN.fromBitstring([sel'2,sel'1,sel'0],3))))
   | (false,
      (true,
       (false,
        (false,
         (false,
          (false,
           (false,
            (false,
             (false,
              (false,
               (true,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,
                                (false,(false,(sel'2,(sel'1,sel'0))))))))))))))))))))))))))))))) =>
      CP(DMFC0
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            (BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5),
             BitsN.fromBitstring([sel'2,sel'1,sel'0],3))))
   | (false,
      (true,
       (false,
        (false,
         (false,
          (false,
           (false,
            (false,
             (true,
              (false,
               (false,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,
                                (false,(false,(sel'2,(sel'1,sel'0))))))))))))))))))))))))))))))) =>
      CP(MTC0
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            (BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5),
             BitsN.fromBitstring([sel'2,sel'1,sel'0],3))))
   | (false,
      (true,
       (false,
        (false,
         (false,
          (false,
           (false,
            (false,
             (true,
              (false,
               (true,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,
                                (false,(false,(sel'2,(sel'1,sel'0))))))))))))))))))))))))))))))) =>
      CP(DMTC0
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            (BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5),
             BitsN.fromBitstring([sel'2,sel'1,sel'0],3))))
   | (false,
      (false,
       (false,
        (true,
         (true,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (false,
                 (false,
                  (false,
                   (false,
                    (false,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Branch
        (BLEZ
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
      (false,
       (false,
        (true,
         (true,
          (true,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (false,
                 (false,
                  (false,
                   (false,
                    (false,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Branch
        (BGTZ
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
      (false,
       (true,
        (true,
         (true,
          (true,
           (false,
            (false,
             (false,
              (false,
               (false,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      ArithI
        (LUI(BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
      (true,
       (false,
        (true,
         (true,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (false,
                 (false,
                  (false,
                   (false,
                    (false,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Branch
        (BLEZL
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
      (true,
       (false,
        (true,
         (true,
          (true,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (false,
                 (false,
                  (false,
                   (false,
                    (false,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Branch
        (BGTZL
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
      (true,
       (true,
        (true,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,
                                (false,(false,(false,(false,false))))))))))))))))))))))))))))))) =>
      MultDiv
        (MADD
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
      (true,
       (true,
        (true,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,(false,(false,(false,(false,true))))))))))))))))))))))))))))))) =>
      MultDiv
        (MADDU
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
      (true,
       (true,
        (true,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,(false,(false,(true,(false,false))))))))))))))))))))))))))))))) =>
      MultDiv
        (MSUB
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
      (true,
       (true,
        (true,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,(false,(false,(true,(false,true))))))))))))))))))))))))))))))) =>
      MultDiv
        (MSUBU
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
      (true,
       (true,
        (true,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,(false,(false,(false,(true,false))))))))))))))))))))))))))))))) =>
      MultDiv
        (MUL(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
             (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
              BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
      (false,
       (false,
        (true,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Branch
        (BEQ(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
             (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
              BitsN.fromBitstring
                ([immediate'15,immediate'14,immediate'13,immediate'12,
                  immediate'11,immediate'10,immediate'9,immediate'8,
                  immediate'7,immediate'6,immediate'5,immediate'4,
                  immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (false,
      (false,
       (false,
        (true,
         (false,
          (true,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Branch
        (BNE(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
             (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
              BitsN.fromBitstring
                ([immediate'15,immediate'14,immediate'13,immediate'12,
                  immediate'11,immediate'10,immediate'9,immediate'8,
                  immediate'7,immediate'6,immediate'5,immediate'4,
                  immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (false,
      (false,
       (true,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      ArithI
        (ADDI
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (false,
      (false,
       (true,
        (false,
         (false,
          (true,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      ArithI
        (ADDIU
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (false,
      (false,
       (true,
        (false,
         (true,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      ArithI
        (SLTI
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (false,
      (false,
       (true,
        (false,
         (true,
          (true,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      ArithI
        (SLTIU
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (false,
      (false,
       (true,
        (true,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      ArithI
        (ANDI
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (false,
      (false,
       (true,
        (true,
         (false,
          (true,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      ArithI
        (ORI(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
             (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
              BitsN.fromBitstring
                ([immediate'15,immediate'14,immediate'13,immediate'12,
                  immediate'11,immediate'10,immediate'9,immediate'8,
                  immediate'7,immediate'6,immediate'5,immediate'4,
                  immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (false,
      (false,
       (true,
        (true,
         (true,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      ArithI
        (XORI
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (false,
      (true,
       (false,
        (true,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Branch
        (BEQL
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (false,
      (true,
       (false,
        (true,
         (false,
          (true,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Branch
        (BNEL
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (false,
      (true,
       (true,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      ArithI
        (DADDI
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (false,
      (true,
       (true,
        (false,
         (false,
          (true,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      ArithI
        (DADDIU
           (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (false,
      (true,
       (true,
        (false,
         (true,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Load
        (LDL(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
             (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
              BitsN.fromBitstring
                ([immediate'15,immediate'14,immediate'13,immediate'12,
                  immediate'11,immediate'10,immediate'9,immediate'8,
                  immediate'7,immediate'6,immediate'5,immediate'4,
                  immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (false,
      (true,
       (true,
        (false,
         (true,
          (true,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Load
        (LDR(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
             (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
              BitsN.fromBitstring
                ([immediate'15,immediate'14,immediate'13,immediate'12,
                  immediate'11,immediate'10,immediate'9,immediate'8,
                  immediate'7,immediate'6,immediate'5,immediate'4,
                  immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
      (false,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Load
        (LB(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
      (false,
       (false,
        (false,
         (false,
          (true,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Load
        (LH(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
      (false,
       (false,
        (false,
         (true,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Load
        (LWL(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
             (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
              BitsN.fromBitstring
                ([immediate'15,immediate'14,immediate'13,immediate'12,
                  immediate'11,immediate'10,immediate'9,immediate'8,
                  immediate'7,immediate'6,immediate'5,immediate'4,
                  immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
      (false,
       (false,
        (false,
         (true,
          (true,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Load
        (LW(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
      (false,
       (false,
        (true,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Load
        (LBU(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
             (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
              BitsN.fromBitstring
                ([immediate'15,immediate'14,immediate'13,immediate'12,
                  immediate'11,immediate'10,immediate'9,immediate'8,
                  immediate'7,immediate'6,immediate'5,immediate'4,
                  immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
      (false,
       (false,
        (true,
         (false,
          (true,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Load
        (LHU(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
             (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
              BitsN.fromBitstring
                ([immediate'15,immediate'14,immediate'13,immediate'12,
                  immediate'11,immediate'10,immediate'9,immediate'8,
                  immediate'7,immediate'6,immediate'5,immediate'4,
                  immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
      (false,
       (false,
        (true,
         (true,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Load
        (LWR(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
             (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
              BitsN.fromBitstring
                ([immediate'15,immediate'14,immediate'13,immediate'12,
                  immediate'11,immediate'10,immediate'9,immediate'8,
                  immediate'7,immediate'6,immediate'5,immediate'4,
                  immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
      (false,
       (false,
        (true,
         (true,
          (true,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Load
        (LWU(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
             (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
              BitsN.fromBitstring
                ([immediate'15,immediate'14,immediate'13,immediate'12,
                  immediate'11,immediate'10,immediate'9,immediate'8,
                  immediate'7,immediate'6,immediate'5,immediate'4,
                  immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
      (false,
       (true,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Store
        (SB(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
      (false,
       (true,
        (false,
         (false,
          (true,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Store
        (SH(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
      (false,
       (true,
        (false,
         (true,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Store
        (SWL(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
             (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
              BitsN.fromBitstring
                ([immediate'15,immediate'14,immediate'13,immediate'12,
                  immediate'11,immediate'10,immediate'9,immediate'8,
                  immediate'7,immediate'6,immediate'5,immediate'4,
                  immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
      (false,
       (true,
        (false,
         (true,
          (true,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Store
        (SW(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
      (false,
       (true,
        (true,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Store
        (SDL(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
             (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
              BitsN.fromBitstring
                ([immediate'15,immediate'14,immediate'13,immediate'12,
                  immediate'11,immediate'10,immediate'9,immediate'8,
                  immediate'7,immediate'6,immediate'5,immediate'4,
                  immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
      (false,
       (true,
        (true,
         (false,
          (true,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Store
        (SDR(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
             (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
              BitsN.fromBitstring
                ([immediate'15,immediate'14,immediate'13,immediate'12,
                  immediate'11,immediate'10,immediate'9,immediate'8,
                  immediate'7,immediate'6,immediate'5,immediate'4,
                  immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
      (false,
       (true,
        (true,
         (true,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Store
        (SWR(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
             (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
              BitsN.fromBitstring
                ([immediate'15,immediate'14,immediate'13,immediate'12,
                  immediate'11,immediate'10,immediate'9,immediate'8,
                  immediate'7,immediate'6,immediate'5,immediate'4,
                  immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
      (true,
       (false,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Load
        (LL(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
      (true,
       (false,
        (true,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Load
        (LLD(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
             (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
              BitsN.fromBitstring
                ([immediate'15,immediate'14,immediate'13,immediate'12,
                  immediate'11,immediate'10,immediate'9,immediate'8,
                  immediate'7,immediate'6,immediate'5,immediate'4,
                  immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
      (true,
       (false,
        (true,
         (true,
          (true,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Load
        (LD(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
      (true,
       (true,
        (false,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Store
        (SC(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
      (true,
       (true,
        (true,
         (false,
          (false,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Store
        (SCD(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
             (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
              BitsN.fromBitstring
                ([immediate'15,immediate'14,immediate'13,immediate'12,
                  immediate'11,immediate'10,immediate'9,immediate'8,
                  immediate'7,immediate'6,immediate'5,immediate'4,
                  immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
      (true,
       (true,
        (true,
         (true,
          (true,
           (rs'4,
            (rs'3,
             (rs'2,
              (rs'1,
               (rs'0,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      Store
        (SD(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
      (false,
       (true,
        (true,
         (true,
          (true,
           (base'4,
            (base'3,
             (base'2,
              (base'1,
               (base'0,
                (opn'4,
                 (opn'3,
                  (opn'2,
                   (opn'1,
                    (opn'0,
                     (immediate'15,
                      (immediate'14,
                       (immediate'13,
                        (immediate'12,
                         (immediate'11,
                          (immediate'10,
                           (immediate'9,
                            (immediate'8,
                             (immediate'7,
                              (immediate'6,
                               (immediate'5,
                                (immediate'4,
                                 (immediate'3,
                                  (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
      CACHE
        (BitsN.fromBitstring([base'4,base'3,base'2,base'1,base'0],5),
         (BitsN.fromBitstring([opn'4,opn'3,opn'2,opn'1,opn'0],5),
          BitsN.fromBitstring
            ([immediate'15,immediate'14,immediate'13,immediate'12,
              immediate'11,immediate'10,immediate'9,immediate'8,
              immediate'7,immediate'6,immediate'5,immediate'4,immediate'3,
              immediate'2,immediate'1,immediate'0],16)))
   | (false,
      (true,
       (true,
        (true,
         (true,
          (true,
           (false,
            (false,
             (false,
              (false,
               (false,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (true,(true,(true,(false,(true,true))))))))))))))))))))))))))))))) =>
      RDHWR
        (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
         BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))
   | (false,
        (true,
         (false,
          (false,
           (false,
            (false,
             (true,
              (false,
               (false,
                (false,
                 (false,
                  (false,
                   (false,
                    (false,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,
                              (false,
                               (false,
                                (false,
                                 (true,
                                  (false,(false,(false,(false,false))))))))))))))))))))))))))))))) =>
        WAIT
   | (false,
      (true,
       (false,
        (false,
         (true,
          (false,
           (v'25,
            (v'24,
             (v'23,
              (v'22,
               (v'21,
                (v'20,
                 (v'19,
                  (v'18,
                   (v'17,
                    (v'16,
                     (v'15,
                      (v'14,
                       (v'13,
                        (v'12,
                         (v'11,
                          (v'10,
                           (v'9,
                            (v'8,
                             (v'7,(v'6,(v'5,(v'4,(v'3,(v'2,(v'1,v'0))))))))))))))))))))))))))))))) =>
      COP2Decode
        (BitsN.fromBitstring
           ([v'25,v'24,v'23,v'22,v'21,v'20,v'19,v'18,v'17,v'16,v'15,v'14,
             v'13,v'12,v'11,v'10,v'9,v'8,v'7,v'6,v'5,v'4,v'3,v'2,v'1,v'0],
            26))
   | (true,
      (true,
       (false,
        (false,
         (true,
          (false,
           (v'25,
            (v'24,
             (v'23,
              (v'22,
               (v'21,
                (v'20,
                 (v'19,
                  (v'18,
                   (v'17,
                    (v'16,
                     (v'15,
                      (v'14,
                       (v'13,
                        (v'12,
                         (v'11,
                          (v'10,
                           (v'9,
                            (v'8,
                             (v'7,(v'6,(v'5,(v'4,(v'3,(v'2,(v'1,v'0))))))))))))))))))))))))))))))) =>
      LWC2Decode
        (BitsN.fromBitstring
           ([v'25,v'24,v'23,v'22,v'21,v'20,v'19,v'18,v'17,v'16,v'15,v'14,
             v'13,v'12,v'11,v'10,v'9,v'8,v'7,v'6,v'5,v'4,v'3,v'2,v'1,v'0],
            26))
   | (true,
      (true,
       (false,
        (true,
         (true,
          (false,
           (v'25,
            (v'24,
             (v'23,
              (v'22,
               (v'21,
                (v'20,
                 (v'19,
                  (v'18,
                   (v'17,
                    (v'16,
                     (v'15,
                      (v'14,
                       (v'13,
                        (v'12,
                         (v'11,
                          (v'10,
                           (v'9,
                            (v'8,
                             (v'7,(v'6,(v'5,(v'4,(v'3,(v'2,(v'1,v'0))))))))))))))))))))))))))))))) =>
      LDC2Decode
        (BitsN.fromBitstring
           ([v'25,v'24,v'23,v'22,v'21,v'20,v'19,v'18,v'17,v'16,v'15,v'14,
             v'13,v'12,v'11,v'10,v'9,v'8,v'7,v'6,v'5,v'4,v'3,v'2,v'1,v'0],
            26))
   | (true,
      (true,
       (true,
        (false,
         (true,
          (false,
           (v'25,
            (v'24,
             (v'23,
              (v'22,
               (v'21,
                (v'20,
                 (v'19,
                  (v'18,
                   (v'17,
                    (v'16,
                     (v'15,
                      (v'14,
                       (v'13,
                        (v'12,
                         (v'11,
                          (v'10,
                           (v'9,
                            (v'8,
                             (v'7,(v'6,(v'5,(v'4,(v'3,(v'2,(v'1,v'0))))))))))))))))))))))))))))))) =>
      SWC2Decode
        (BitsN.fromBitstring
           ([v'25,v'24,v'23,v'22,v'21,v'20,v'19,v'18,v'17,v'16,v'15,v'14,
             v'13,v'12,v'11,v'10,v'9,v'8,v'7,v'6,v'5,v'4,v'3,v'2,v'1,v'0],
            26))
   | (true,
      (true,
       (true,
        (true,
         (true,
          (false,
           (v'25,
            (v'24,
             (v'23,
              (v'22,
               (v'21,
                (v'20,
                 (v'19,
                  (v'18,
                   (v'17,
                    (v'16,
                     (v'15,
                      (v'14,
                       (v'13,
                        (v'12,
                         (v'11,
                          (v'10,
                           (v'9,
                            (v'8,
                             (v'7,(v'6,(v'5,(v'4,(v'3,(v'2,(v'1,v'0))))))))))))))))))))))))))))))) =>
      SDC2Decode
        (BitsN.fromBitstring
           ([v'25,v'24,v'23,v'22,v'21,v'20,v'19,v'18,v'17,v'16,v'15,v'14,
             v'13,v'12,v'11,v'10,v'9,v'8,v'7,v'6,v'5,v'4,v'3,v'2,v'1,v'0],
            26))
   | _ => ReservedInstruction;

fun COP2InstructionToString i = "default COP2 instruction";

fun LWC2InstructionToString i = "default LWC2 instruction";

fun LDC2InstructionToString i = "default LDC2 instruction";

fun SWC2InstructionToString i = "default SWC2 instruction";

fun SDC2InstructionToString i = "default SDC2 instruction";

fun COP2Encode i = BitsN.@@(BitsN.B(0x12,6),BitsN.B(0x0,26));

fun LWC2Encode i = BitsN.@@(BitsN.B(0x32,6),BitsN.B(0x0,26));

fun LDC2Encode i = BitsN.@@(BitsN.B(0x36,6),BitsN.B(0x0,26));

fun SWC2Encode i = BitsN.@@(BitsN.B(0x3A,6),BitsN.B(0x0,26));

fun SDC2Encode i = BitsN.@@(BitsN.B(0x3E,6),BitsN.B(0x0,26));

fun instructionToString i =
  case i of
     Shift(SLL(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x0,5)))) => "nop"
   | Shift(SLL(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x1,5)))) => "ssnop"
   | Shift(SLL(rt,(rd,imm5))) => op2ri 5 ("sll",(rd,(rt,imm5)))
   | Shift(SRL(rt,(rd,imm5))) => op2ri 5 ("srl",(rd,(rt,imm5)))
   | Shift(SRA(rt,(rd,imm5))) => op2ri 5 ("sra",(rd,(rt,imm5)))
   | Shift(SLLV(rs,(rt,rd))) => op3r("sllv",(rd,(rt,rs)))
   | Shift(SRLV(rs,(rt,rd))) => op3r("srlv",(rd,(rt,rs)))
   | Shift(SRAV(rs,(rt,rd))) => op3r("srav",(rd,(rt,rs)))
   | Branch(JR rs) => op1r("jr",rs)
   | Branch(JALR(rs,rd)) => op2r("jalr",(rd,rs))
   | MultDiv(MFHI rd) => op1r("mfhi",rd)
   | MultDiv(MTHI rd) => op1r("mthi",rd)
   | MultDiv(MFLO rs) => op1r("mflo",rs)
   | MultDiv(MTLO rs) => op1r("mtlo",rs)
   | Shift(DSLLV(rs,(rt,rd))) => op3r("dsllv",(rd,(rt,rs)))
   | Shift(DSRLV(rs,(rt,rd))) => op3r("dsrlv",(rd,(rt,rs)))
   | Shift(DSRAV(rs,(rt,rd))) => op3r("dsrav",(rd,(rt,rs)))
   | MultDiv(MADD(rs,rt)) => op2r("madd",(rs,rt))
   | MultDiv(MADDU(rs,rt)) => op2r("maddu",(rs,rt))
   | MultDiv(MSUB(rs,rt)) => op2r("msub",(rs,rt))
   | MultDiv(MSUBU(rs,rt)) => op2r("msubu",(rs,rt))
   | MultDiv(MUL(rs,(rt,rd))) => op3r("mul",(rd,(rs,rt)))
   | MultDiv(MULT(rs,rt)) => op2r("mult",(rs,rt))
   | MultDiv(MULTU(rs,rt)) => op2r("multu",(rs,rt))
   | MultDiv(DIV(rs,rt)) => op2r("div",(rs,rt))
   | MultDiv(DIVU(rs,rt)) => op2r("divu",(rs,rt))
   | MultDiv(DMULT(rs,rt)) => op2r("dmult",(rs,rt))
   | MultDiv(DMULTU(rs,rt)) => op2r("dmultu",(rs,rt))
   | MultDiv(DDIV(rs,rt)) => op2r("ddiv",(rs,rt))
   | MultDiv(DDIVU(rs,rt)) => op2r("ddivu",(rs,rt))
   | ArithR(MOVN(rs,(rt,rd))) => op3r("movn",(rd,(rs,rt)))
   | ArithR(MOVZ(rs,(rt,rd))) => op3r("movz",(rd,(rs,rt)))
   | ArithR(ADD(rs,(rt,rd))) => op3r("add",(rd,(rs,rt)))
   | ArithR(ADDU(rs,(rt,rd))) => op3r("addu",(rd,(rs,rt)))
   | ArithR(SUB(rs,(rt,rd))) => op3r("sub",(rd,(rs,rt)))
   | ArithR(SUBU(rs,(rt,rd))) => op3r("subu",(rd,(rs,rt)))
   | ArithR(AND(rs,(rt,rd))) => op3r("and",(rd,(rs,rt)))
   | ArithR(OR(rs,(rt,rd))) => op3r("or",(rd,(rs,rt)))
   | ArithR(XOR(rs,(rt,rd))) => op3r("xor",(rd,(rs,rt)))
   | ArithR(NOR(rs,(rt,rd))) => op3r("nor",(rd,(rs,rt)))
   | ArithR(SLT(rs,(rt,rd))) => op3r("slt",(rd,(rs,rt)))
   | ArithR(SLTU(rs,(rt,rd))) => op3r("sltu",(rd,(rs,rt)))
   | ArithR(DADD(rs,(rt,rd))) => op3r("dadd",(rd,(rs,rt)))
   | ArithR(DADDU(rs,(rt,rd))) => op3r("daddu",(rd,(rs,rt)))
   | ArithR(DSUB(rs,(rt,rd))) => op3r("dsub",(rd,(rs,rt)))
   | ArithR(DSUBU(rs,(rt,rd))) => op3r("dsubu",(rd,(rs,rt)))
   | Trap(TGE(rs,rt)) => op2r("tge",(rs,rt))
   | Trap(TGEU(rs,rt)) => op2r("tgeu",(rs,rt))
   | Trap(TLT(rs,rt)) => op2r("tlt",(rs,rt))
   | Trap(TLTU(rs,rt)) => op2r("tltu",(rs,rt))
   | Trap(TEQ(rs,rt)) => op2r("teq",(rs,rt))
   | Trap(TNE(rs,rt)) => op2r("tne",(rs,rt))
   | Shift(DSLL(rt,(rd,imm5))) => op2ri 5 ("dsll",(rd,(rt,imm5)))
   | Shift(DSRL(rt,(rd,imm5))) => op2ri 5 ("dsrl",(rd,(rt,imm5)))
   | Shift(DSRA(rt,(rd,imm5))) => op2ri 5 ("dsra",(rd,(rt,imm5)))
   | Shift(DSLL32(rt,(rd,imm5))) => op2ri 5 ("dsll32",(rd,(rt,imm5)))
   | Shift(DSRL32(rt,(rd,imm5))) => op2ri 5 ("dsrl32",(rd,(rt,imm5)))
   | Shift(DSRA32(rt,(rd,imm5))) => op2ri 5 ("dsra32",(rd,(rt,imm5)))
   | Branch(BLTZ(rs,imm)) => op1ri 16 ("bltz",(rs,imm))
   | Branch(BGEZ(rs,imm)) => op1ri 16 ("bgez",(rs,imm))
   | Branch(BLTZL(rs,imm)) => op1ri 16 ("bltzl",(rs,imm))
   | Branch(BGEZL(rs,imm)) => op1ri 16 ("bgezl",(rs,imm))
   | Trap(TGEI(rs,imm)) => op1ri 16 ("tgei",(rs,imm))
   | Trap(TGEIU(rs,imm)) => op1ri 16 ("tgeiu",(rs,imm))
   | Trap(TLTI(rs,imm)) => op1ri 16 ("tlti",(rs,imm))
   | Trap(TLTIU(rs,imm)) => op1ri 16 ("tltiu",(rs,imm))
   | Trap(TEQI(rs,imm)) => op1ri 16 ("teqi",(rs,imm))
   | Trap(TNEI(rs,imm)) => op1ri 16 ("tnei",(rs,imm))
   | Branch(BLTZAL(rs,imm)) => op1ri 16 ("bltzal",(rs,imm))
   | Branch(BGEZAL(rs,imm)) => op1ri 16 ("bgezal",(rs,imm))
   | Branch(BLTZALL(rs,imm)) => op1ri 16 ("bltzall",(rs,imm))
   | Branch(BGEZALL(rs,imm)) => op1ri 16 ("bgezall",(rs,imm))
   | Branch(J imm) => op1i 26 ("j",imm)
   | Branch(JAL imm) => op1i 26 ("jal",imm)
   | CP(MFC0(rt,(rd,sel))) => op2roi 3 ("mfc0",(rt,(rd,sel)))
   | CP(DMFC0(rt,(rd,sel))) => op2roi 3 ("dmfc0",(rt,(rd,sel)))
   | CP(MTC0(rt,(rd,sel))) => op2roi 3 ("mtc0",(rt,(rd,sel)))
   | CP(DMTC0(rt,(rd,sel))) => op2roi 3 ("dmtc0",(rt,(rd,sel)))
   | Branch(BEQ(BitsN.B(0x0,5),(BitsN.B(0x0,5),imm))) => op1i 16 ("b",imm)
   | Branch(BEQ(rs,(rt,imm))) => op2ri 16 ("beq",(rs,(rt,imm)))
   | Branch(BNE(rs,(rt,imm))) => op2ri 16 ("bne",(rs,(rt,imm)))
   | Branch(BLEZ(rs,imm)) => op1ri 16 ("blez",(rs,imm))
   | Branch(BGTZ(rs,imm)) => op1ri 16 ("bgtz",(rs,imm))
   | ArithI(ADDI(rs,(rt,imm))) => op2ri 16 ("addi",(rt,(rs,imm)))
   | ArithI(ADDIU(rs,(rt,imm))) => op2ri 16 ("addiu",(rt,(rs,imm)))
   | ArithI(SLTI(rs,(rt,imm))) => op2ri 16 ("slti",(rt,(rs,imm)))
   | ArithI(SLTIU(rs,(rt,imm))) => op2ri 16 ("sltiu",(rt,(rs,imm)))
   | ArithI(ANDI(rs,(rt,imm))) => op2ri 16 ("andi",(rt,(rs,imm)))
   | ArithI(ORI(rs,(rt,imm))) => op2ri 16 ("ori",(rt,(rs,imm)))
   | ArithI(XORI(rs,(rt,imm))) => op2ri 16 ("xori",(rt,(rs,imm)))
   | ArithI(LUI(rt,imm)) => op1ri 16 ("lui",(rt,imm))
   | Branch(BEQL(rs,(rt,imm))) => op2ri 16 ("beql",(rs,(rt,imm)))
   | Branch(BNEL(rs,(rt,imm))) => op2ri 16 ("bnel",(rs,(rt,imm)))
   | Branch(BLEZL(rs,imm)) => op1ri 16 ("blezl",(rs,imm))
   | Branch(BGTZL(rs,imm)) => op1ri 16 ("bgtzl",(rs,imm))
   | ArithI(DADDI(rs,(rt,imm))) => op2ri 16 ("daddi",(rt,(rs,imm)))
   | ArithI(DADDIU(rs,(rt,imm))) => op2ri 16 ("daddiu",(rt,(rs,imm)))
   | Load(LDL(rs,(rt,imm))) => opmem 16 ("ldl",(rt,(rs,imm)))
   | Load(LDR(rs,(rt,imm))) => opmem 16 ("ldr",(rt,(rs,imm)))
   | Load(LB(rs,(rt,imm))) => opmem 16 ("lb",(rt,(rs,imm)))
   | Load(LH(rs,(rt,imm))) => opmem 16 ("lh",(rt,(rs,imm)))
   | Load(LWL(rs,(rt,imm))) => opmem 16 ("lwl",(rt,(rs,imm)))
   | Load(LW(rs,(rt,imm))) => opmem 16 ("lw",(rt,(rs,imm)))
   | Load(LBU(rs,(rt,imm))) => opmem 16 ("lbu",(rt,(rs,imm)))
   | Load(LHU(rs,(rt,imm))) => opmem 16 ("lhu",(rt,(rs,imm)))
   | Load(LWR(rs,(rt,imm))) => opmem 16 ("lwr",(rt,(rs,imm)))
   | Load(LWU(rs,(rt,imm))) => opmem 16 ("lwu",(rt,(rs,imm)))
   | Store(SB(rs,(rt,imm))) => opmem 16 ("sb",(rt,(rs,imm)))
   | Store(SH(rs,(rt,imm))) => opmem 16 ("sh",(rt,(rs,imm)))
   | Store(SWL(rs,(rt,imm))) => opmem 16 ("swl",(rt,(rs,imm)))
   | Store(SW(rs,(rt,imm))) => opmem 16 ("sw",(rt,(rs,imm)))
   | Store(SDL(rs,(rt,imm))) => opmem 16 ("sdl",(rt,(rs,imm)))
   | Store(SDR(rs,(rt,imm))) => opmem 16 ("sdr",(rt,(rs,imm)))
   | Store(SWR(rs,(rt,imm))) => opmem 16 ("swr",(rt,(rs,imm)))
   | Load(LL(rs,(rt,imm))) => opmem 16 ("ll",(rt,(rs,imm)))
   | Load(LLD(rs,(rt,imm))) => opmem 16 ("lld",(rt,(rs,imm)))
   | Load(LD(rs,(rt,imm))) => opmem 16 ("ld",(rt,(rs,imm)))
   | Store(SC(rs,(rt,imm))) => opmem 16 ("sc",(rt,(rs,imm)))
   | Store(SCD(rs,(rt,imm))) => opmem 16 ("scd",(rt,(rs,imm)))
   | Store(SD(rs,(rt,imm))) => opmem 16 ("sd",(rt,(rs,imm)))
   | CACHE(rs,(opn,imm)) => opmem 16 ("cache",(opn,(rs,imm)))
   | SYSCALL => "syscall"
   | BREAK => "break"
   | SYNC imm5 => ("sync ") ^ (BitsN.toHexString imm5)
   | TLBR => "tlbr"
   | TLBWI => "tlbwi"
   | TLBWR => "tlbwr"
   | TLBP => "tlbp"
   | ERET => "eret"
   | RDHWR(rt,rd) => op2r("rdhwr",(rt,rd))
   | WAIT => "wait"
   | COP2 _ => COP2InstructionToString i
   | LWC2 _ => LWC2InstructionToString i
   | LDC2 _ => LDC2InstructionToString i
   | SWC2 _ => SWC2InstructionToString i
   | SDC2 _ => SDC2InstructionToString i
   | Unpredictable => "???"
   | ReservedInstruction => "???";

fun Encode i =
  case i of
     Shift(SLL(rt,(rd,imm5))) =>
      form1(BitsN.B(0x0,5),(rt,(rd,(imm5,BitsN.B(0x0,6)))))
   | Shift(SRL(rt,(rd,imm5))) =>
      form1(BitsN.B(0x0,5),(rt,(rd,(imm5,BitsN.B(0x2,6)))))
   | Shift(SRA(rt,(rd,imm5))) =>
      form1(BitsN.B(0x0,5),(rt,(rd,(imm5,BitsN.B(0x3,6)))))
   | Shift(SLLV(rs,(rt,rd))) =>
      form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x4,6)))))
   | Shift(SRLV(rs,(rt,rd))) =>
      form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x6,6)))))
   | Shift(SRAV(rs,(rt,rd))) =>
      form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x7,6)))))
   | Branch(JR rs) =>
      form1
        (rs,
         (BitsN.B(0x0,5),(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x8,6)))))
   | Branch(JALR(rs,rd)) =>
      form1(rs,(BitsN.B(0x0,5),(rd,(BitsN.B(0x0,5),BitsN.B(0x9,6)))))
   | MultDiv(MFHI rd) =>
      form1
        (BitsN.B(0x0,5),
         (BitsN.B(0x0,5),(rd,(BitsN.B(0x0,5),BitsN.B(0x10,6)))))
   | MultDiv(MTHI rd) =>
      form1
        (BitsN.B(0x0,5),
         (BitsN.B(0x0,5),(rd,(BitsN.B(0x0,5),BitsN.B(0x11,6)))))
   | MultDiv(MFLO rs) =>
      form1
        (rs,
         (BitsN.B(0x0,5),(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x12,6)))))
   | MultDiv(MTLO rs) =>
      form1
        (rs,
         (BitsN.B(0x0,5),(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x13,6)))))
   | Shift(DSLLV(rs,(rt,rd))) =>
      form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x14,6)))))
   | Shift(DSRLV(rs,(rt,rd))) =>
      form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x16,6)))))
   | Shift(DSRAV(rs,(rt,rd))) =>
      form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x17,6)))))
   | MultDiv(MADD(rs,rt)) =>
      form5(rs,(rt,(BitsN.B(0x0,5),BitsN.B(0x0,6))))
   | MultDiv(MADDU(rs,rt)) =>
      form5(rs,(rt,(BitsN.B(0x0,5),BitsN.B(0x1,6))))
   | MultDiv(MSUB(rs,rt)) =>
      form5(rs,(rt,(BitsN.B(0x0,5),BitsN.B(0x4,6))))
   | MultDiv(MSUBU(rs,rt)) =>
      form5(rs,(rt,(BitsN.B(0x0,5),BitsN.B(0x5,6))))
   | MultDiv(MUL(rs,(rt,rd))) => form5(rs,(rt,(rd,BitsN.B(0x2,6))))
   | MultDiv(MULT(rs,rt)) =>
      form1(rs,(rt,(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x18,6)))))
   | MultDiv(MULTU(rs,rt)) =>
      form1(rs,(rt,(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x19,6)))))
   | MultDiv(DIV(rs,rt)) =>
      form1(rs,(rt,(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x1A,6)))))
   | MultDiv(DIVU(rs,rt)) =>
      form1(rs,(rt,(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x1B,6)))))
   | MultDiv(DMULT(rs,rt)) =>
      form1(rs,(rt,(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x1C,6)))))
   | MultDiv(DMULTU(rs,rt)) =>
      form1(rs,(rt,(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x1D,6)))))
   | MultDiv(DDIV(rs,rt)) =>
      form1(rs,(rt,(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x1E,6)))))
   | MultDiv(DDIVU(rs,rt)) =>
      form1(rs,(rt,(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x1F,6)))))
   | ArithR(MOVZ(rs,(rt,rd))) =>
      form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0xA,6)))))
   | ArithR(MOVN(rs,(rt,rd))) =>
      form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0xB,6)))))
   | ArithR(ADD(rs,(rt,rd))) =>
      form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x20,6)))))
   | ArithR(ADDU(rs,(rt,rd))) =>
      form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x21,6)))))
   | ArithR(SUB(rs,(rt,rd))) =>
      form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x22,6)))))
   | ArithR(SUBU(rs,(rt,rd))) =>
      form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x23,6)))))
   | ArithR(AND(rs,(rt,rd))) =>
      form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x24,6)))))
   | ArithR(OR(rs,(rt,rd))) =>
      form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x25,6)))))
   | ArithR(XOR(rs,(rt,rd))) =>
      form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x26,6)))))
   | ArithR(NOR(rs,(rt,rd))) =>
      form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x27,6)))))
   | ArithR(SLT(rs,(rt,rd))) =>
      form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x2A,6)))))
   | ArithR(SLTU(rs,(rt,rd))) =>
      form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x2B,6)))))
   | ArithR(DADD(rs,(rt,rd))) =>
      form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x2C,6)))))
   | ArithR(DADDU(rs,(rt,rd))) =>
      form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x2D,6)))))
   | ArithR(DSUB(rs,(rt,rd))) =>
      form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x2E,6)))))
   | ArithR(DSUBU(rs,(rt,rd))) =>
      form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x2F,6)))))
   | Trap(TGE(rs,rt)) =>
      form1(rs,(rt,(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x30,6)))))
   | Trap(TGEU(rs,rt)) =>
      form1(rs,(rt,(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x31,6)))))
   | Trap(TLT(rs,rt)) =>
      form1(rs,(rt,(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x32,6)))))
   | Trap(TLTU(rs,rt)) =>
      form1(rs,(rt,(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x33,6)))))
   | Trap(TEQ(rs,rt)) =>
      form1(rs,(rt,(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x34,6)))))
   | Trap(TNE(rs,rt)) =>
      form1(rs,(rt,(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x36,6)))))
   | Shift(DSLL(rt,(rd,imm5))) =>
      form1(BitsN.B(0x0,5),(rt,(rd,(imm5,BitsN.B(0x38,6)))))
   | Shift(DSRL(rt,(rd,imm5))) =>
      form1(BitsN.B(0x0,5),(rt,(rd,(imm5,BitsN.B(0x3A,6)))))
   | Shift(DSRA(rt,(rd,imm5))) =>
      form1(BitsN.B(0x0,5),(rt,(rd,(imm5,BitsN.B(0x3B,6)))))
   | Shift(DSLL32(rt,(rd,imm5))) =>
      form1(BitsN.B(0x0,5),(rt,(rd,(imm5,BitsN.B(0x3C,6)))))
   | Shift(DSRL32(rt,(rd,imm5))) =>
      form1(BitsN.B(0x0,5),(rt,(rd,(imm5,BitsN.B(0x3E,6)))))
   | Shift(DSRA32(rt,(rd,imm5))) =>
      form1(BitsN.B(0x0,5),(rt,(rd,(imm5,BitsN.B(0x3F,6)))))
   | Branch(BLTZ(rs,imm)) => form2(rs,(BitsN.B(0x0,5),imm))
   | Branch(BGEZ(rs,imm)) => form2(rs,(BitsN.B(0x1,5),imm))
   | Branch(BLTZL(rs,imm)) => form2(rs,(BitsN.B(0x2,5),imm))
   | Branch(BGEZL(rs,imm)) => form2(rs,(BitsN.B(0x3,5),imm))
   | Trap(TGEI(rs,imm)) => form2(rs,(BitsN.B(0x8,5),imm))
   | Trap(TGEIU(rs,imm)) => form2(rs,(BitsN.B(0x9,5),imm))
   | Trap(TLTI(rs,imm)) => form2(rs,(BitsN.B(0xA,5),imm))
   | Trap(TLTIU(rs,imm)) => form2(rs,(BitsN.B(0xB,5),imm))
   | Trap(TEQI(rs,imm)) => form2(rs,(BitsN.B(0xC,5),imm))
   | Trap(TNEI(rs,imm)) => form2(rs,(BitsN.B(0xE,5),imm))
   | Branch(BLTZAL(rs,imm)) => form2(rs,(BitsN.B(0x10,5),imm))
   | Branch(BGEZAL(rs,imm)) => form2(rs,(BitsN.B(0x11,5),imm))
   | Branch(BLTZALL(rs,imm)) => form2(rs,(BitsN.B(0x12,5),imm))
   | Branch(BGEZALL(rs,imm)) => form2(rs,(BitsN.B(0x13,5),imm))
   | Branch(J imm) => BitsN.@@(BitsN.B(0x2,6),imm)
   | Branch(JAL imm) => BitsN.@@(BitsN.B(0x3,6),imm)
   | CP(MFC0(rt,(rd,sel))) => form3(BitsN.B(0x0,5),(rt,(rd,sel)))
   | CP(DMFC0(rt,(rd,sel))) => form3(BitsN.B(0x1,5),(rt,(rd,sel)))
   | CP(MTC0(rt,(rd,sel))) => form3(BitsN.B(0x4,5),(rt,(rd,sel)))
   | CP(DMTC0(rt,(rd,sel))) => form3(BitsN.B(0x5,5),(rt,(rd,sel)))
   | Branch(BEQ(rs,(rt,imm))) => form4(BitsN.B(0x4,6),(rs,(rt,imm)))
   | Branch(BNE(rs,(rt,imm))) => form4(BitsN.B(0x5,6),(rs,(rt,imm)))
   | Branch(BLEZ(rs,imm)) =>
      form4(BitsN.B(0x6,6),(rs,(BitsN.B(0x0,5),imm)))
   | Branch(BGTZ(rs,imm)) =>
      form4(BitsN.B(0x7,6),(rs,(BitsN.B(0x0,5),imm)))
   | ArithI(ADDI(rs,(rt,imm))) => form4(BitsN.B(0x8,6),(rs,(rt,imm)))
   | ArithI(ADDIU(rs,(rt,imm))) => form4(BitsN.B(0x9,6),(rs,(rt,imm)))
   | ArithI(SLTI(rs,(rt,imm))) => form4(BitsN.B(0xA,6),(rs,(rt,imm)))
   | ArithI(SLTIU(rs,(rt,imm))) => form4(BitsN.B(0xB,6),(rs,(rt,imm)))
   | ArithI(ANDI(rs,(rt,imm))) => form4(BitsN.B(0xC,6),(rs,(rt,imm)))
   | ArithI(ORI(rs,(rt,imm))) => form4(BitsN.B(0xD,6),(rs,(rt,imm)))
   | ArithI(XORI(rs,(rt,imm))) => form4(BitsN.B(0xE,6),(rs,(rt,imm)))
   | ArithI(LUI(rt,imm)) =>
      form4(BitsN.B(0xF,6),(BitsN.B(0x0,5),(rt,imm)))
   | Branch(BEQL(rs,(rt,imm))) => form4(BitsN.B(0x14,6),(rs,(rt,imm)))
   | Branch(BNEL(rs,(rt,imm))) => form4(BitsN.B(0x15,6),(rs,(rt,imm)))
   | Branch(BLEZL(rs,imm)) =>
      form4(BitsN.B(0x16,6),(rs,(BitsN.B(0x0,5),imm)))
   | Branch(BGTZL(rs,imm)) =>
      form4(BitsN.B(0x17,6),(rs,(BitsN.B(0x0,5),imm)))
   | ArithI(DADDI(rs,(rt,imm))) => form4(BitsN.B(0x18,6),(rs,(rt,imm)))
   | ArithI(DADDIU(rs,(rt,imm))) => form4(BitsN.B(0x19,6),(rs,(rt,imm)))
   | Load(LDL(rs,(rt,imm))) => form4(BitsN.B(0x1A,6),(rs,(rt,imm)))
   | Load(LDR(rs,(rt,imm))) => form4(BitsN.B(0x1B,6),(rs,(rt,imm)))
   | Load(LB(rs,(rt,imm))) => form4(BitsN.B(0x20,6),(rs,(rt,imm)))
   | Load(LH(rs,(rt,imm))) => form4(BitsN.B(0x21,6),(rs,(rt,imm)))
   | Load(LWL(rs,(rt,imm))) => form4(BitsN.B(0x22,6),(rs,(rt,imm)))
   | Load(LW(rs,(rt,imm))) => form4(BitsN.B(0x23,6),(rs,(rt,imm)))
   | Load(LBU(rs,(rt,imm))) => form4(BitsN.B(0x24,6),(rs,(rt,imm)))
   | Load(LHU(rs,(rt,imm))) => form4(BitsN.B(0x25,6),(rs,(rt,imm)))
   | Load(LWR(rs,(rt,imm))) => form4(BitsN.B(0x26,6),(rs,(rt,imm)))
   | Load(LWU(rs,(rt,imm))) => form4(BitsN.B(0x27,6),(rs,(rt,imm)))
   | Store(SB(rs,(rt,imm))) => form4(BitsN.B(0x28,6),(rs,(rt,imm)))
   | Store(SH(rs,(rt,imm))) => form4(BitsN.B(0x29,6),(rs,(rt,imm)))
   | Store(SWL(rs,(rt,imm))) => form4(BitsN.B(0x2A,6),(rs,(rt,imm)))
   | Store(SW(rs,(rt,imm))) => form4(BitsN.B(0x2B,6),(rs,(rt,imm)))
   | Store(SDL(rs,(rt,imm))) => form4(BitsN.B(0x2C,6),(rs,(rt,imm)))
   | Store(SDR(rs,(rt,imm))) => form4(BitsN.B(0x2D,6),(rs,(rt,imm)))
   | Store(SWR(rs,(rt,imm))) => form4(BitsN.B(0x2E,6),(rs,(rt,imm)))
   | Load(LL(rs,(rt,imm))) => form4(BitsN.B(0x30,6),(rs,(rt,imm)))
   | Load(LLD(rs,(rt,imm))) => form4(BitsN.B(0x34,6),(rs,(rt,imm)))
   | Load(LD(rs,(rt,imm))) => form4(BitsN.B(0x37,6),(rs,(rt,imm)))
   | Store(SC(rs,(rt,imm))) => form4(BitsN.B(0x38,6),(rs,(rt,imm)))
   | Store(SCD(rs,(rt,imm))) => form4(BitsN.B(0x3C,6),(rs,(rt,imm)))
   | Store(SD(rs,(rt,imm))) => form4(BitsN.B(0x3F,6),(rs,(rt,imm)))
   | CACHE(rs,(opn,imm)) => form4(BitsN.B(0x2F,6),(rs,(opn,imm)))
   | SYSCALL => BitsN.fromNat(BitsN.toNat(BitsN.B(0xC,6)),32)
   | BREAK => BitsN.fromNat(BitsN.toNat(BitsN.B(0xD,6)),32)
   | SYNC imm5 =>
      BitsN.fromNat(BitsN.toNat(BitsN.@@(imm5,BitsN.B(0xF,6))),32)
   | TLBR => BitsN.B(0x42000001,32)
   | TLBWI => BitsN.B(0x42000002,32)
   | TLBWR => BitsN.B(0x42000006,32)
   | TLBP => BitsN.B(0x42000008,32)
   | ERET => BitsN.B(0x42000018,32)
   | RDHWR(rt,rd) => form6(rt,(rd,BitsN.B(0x3B,6)))
   | WAIT => BitsN.B(0x42000020,32)
   | COP2 _ => COP2Encode i
   | LWC2 _ => LWC2Encode i
   | LDC2 _ => LDC2Encode i
   | SWC2 _ => SWC2Encode i
   | SDC2 _ => SDC2Encode i
   | Unpredictable => BitsN.B(0x7F00000,32)
   | ReservedInstruction => BitsN.B(0x0,32);

fun log_instruction (w,inst) =
  String.concat
    ["instr ",BitsN.toHexString (!procID)," ",Nat.toString (!instCnt)," ",
     hex64(PC ())," : ",hex32 w,"   ",instructionToString inst];

fun Next () =
  ( clear_logs ()
  ; case Fetch () of
       Option.SOME w =>
        let
          val inst = Decode w
        in
          ( mark_log(1,log_instruction(w,inst)); Run inst )
        end
     | NONE => ()
  ; case (BranchDelay (),BranchTo ()) of
       (NONE,NONE) => write'PC(BitsN.+(PC (),BitsN.B(0x4,64)))
     | (NONE,Option.SOME(true,addr)) =>
        ( write'BranchDelay(Option.SOME NONE)
        ; write'BranchTo NONE
        ; write'PC addr
        )
     | (NONE,Option.SOME(false,addr)) =>
        ( write'BranchDelay(Option.SOME(Option.SOME addr))
        ; write'BranchTo NONE
        ; write'PC(BitsN.+(PC (),BitsN.B(0x4,64)))
        )
     | (Option.SOME NONE,NONE) =>
          ( write'BranchDelay NONE
          ; write'PC(BitsN.+(PC (),BitsN.B(0x4,64)))
          )
     | (Option.SOME(Option.SOME addr),NONE) =>
        ( write'BranchDelay NONE; write'PC addr )
     | _ => raise UNPREDICTABLE ("Branch follows branch")
  ; write'exceptionSignalled false
  ; let
      val x = CP0 ()
    in
      write'CP0
        (CP0_Count_rupd(x,BitsN.+((#Count)(CP0 ()),BitsN.B(0x1,32))))
    end
  );

val hasCP2 = false

fun COP2Init () = ();

fun initTLB () =
  let
    val e = ref {ASID = BitsN.B(0x0,8), C0 = BitsN.B(0x0,3),
       C1 = BitsN.B(0x0,3), D0 = false, D1 = false, G = false,
       Mask = BitsN.B(0x0,12), PFN0 = BitsN.B(0x0,28),
       PFN1 = BitsN.B(0x0,28), R = BitsN.B(0x0,2), V0 = false, V1 = false,
       VPN2 = BitsN.B(0x0,27)}
  in
    ( e := (TLBEntry_R_rupd((!e),BitsN.B(0x2,2))); (!e) )
  end;

fun initMips (pc,uart) =
  ( let
      val x = CP0 ()
      val x0 = (#Config) x
    in
      write'CP0(CP0_Config_rupd(x,ConfigRegister_M_rupd(x0,true)))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config) x
    in
      write'CP0(CP0_Config_rupd(x,ConfigRegister_BE_rupd(x0,true)))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config) x
    in
      write'CP0
        (CP0_Config_rupd(x,ConfigRegister_MT_rupd(x0,BitsN.B(0x1,3))))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config) x
    in
      write'CP0
        (CP0_Config_rupd(x,ConfigRegister_AR_rupd(x0,BitsN.B(0x0,3))))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config) x
    in
      write'CP0
        (CP0_Config_rupd(x,ConfigRegister_AT_rupd(x0,BitsN.B(0x2,2))))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config1) x
    in
      write'CP0(CP0_Config1_rupd(x,ConfigRegister1_M_rupd(x0,true)))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config1) x
    in
      write'CP0
        (CP0_Config1_rupd
           (x,ConfigRegister1_MMUSize_rupd(x0,BitsN.B(0xF,6))))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config1) x
    in
      write'CP0
        (CP0_Config1_rupd(x,ConfigRegister1_IS_rupd(x0,BitsN.B(0x3,3))))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config1) x
    in
      write'CP0
        (CP0_Config1_rupd(x,ConfigRegister1_IL_rupd(x0,BitsN.B(0x4,3))))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config1) x
    in
      write'CP0
        (CP0_Config1_rupd(x,ConfigRegister1_IA_rupd(x0,BitsN.B(0x0,3))))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config1) x
    in
      write'CP0
        (CP0_Config1_rupd(x,ConfigRegister1_DS_rupd(x0,BitsN.B(0x3,3))))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config1) x
    in
      write'CP0
        (CP0_Config1_rupd(x,ConfigRegister1_DL_rupd(x0,BitsN.B(0x4,3))))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config1) x
    in
      write'CP0
        (CP0_Config1_rupd(x,ConfigRegister1_DA_rupd(x0,BitsN.B(0x0,3))))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config1) x
    in
      write'CP0(CP0_Config1_rupd(x,ConfigRegister1_C2_rupd(x0,hasCP2)))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config1) x
    in
      write'CP0(CP0_Config1_rupd(x,ConfigRegister1_MD_rupd(x0,false)))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config1) x
    in
      write'CP0(CP0_Config1_rupd(x,ConfigRegister1_PCR_rupd(x0,false)))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config1) x
    in
      write'CP0(CP0_Config1_rupd(x,ConfigRegister1_WR_rupd(x0,false)))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config1) x
    in
      write'CP0(CP0_Config1_rupd(x,ConfigRegister1_CA_rupd(x0,false)))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config1) x
    in
      write'CP0(CP0_Config1_rupd(x,ConfigRegister1_EP_rupd(x0,false)))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config1) x
    in
      write'CP0(CP0_Config1_rupd(x,ConfigRegister1_FP_rupd(x0,false)))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config2) x
    in
      write'CP0(CP0_Config2_rupd(x,ConfigRegister2_M_rupd(x0,true)))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config2) x
    in
      write'CP0
        (CP0_Config2_rupd(x,ConfigRegister2_TU_rupd(x0,BitsN.B(0x0,3))))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config2) x
    in
      write'CP0
        (CP0_Config2_rupd(x,ConfigRegister2_TS_rupd(x0,BitsN.B(0x0,4))))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config2) x
    in
      write'CP0
        (CP0_Config2_rupd(x,ConfigRegister2_TL_rupd(x0,BitsN.B(0x0,4))))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config2) x
    in
      write'CP0
        (CP0_Config2_rupd(x,ConfigRegister2_TA_rupd(x0,BitsN.B(0x0,4))))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config2) x
    in
      write'CP0
        (CP0_Config2_rupd(x,ConfigRegister2_SU_rupd(x0,BitsN.B(0x3,4))))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config2) x
    in
      write'CP0
        (CP0_Config2_rupd(x,ConfigRegister2_SS_rupd(x0,BitsN.B(0x8,4))))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config2) x
    in
      write'CP0
        (CP0_Config2_rupd(x,ConfigRegister2_SL_rupd(x0,BitsN.B(0x4,4))))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config2) x
    in
      write'CP0
        (CP0_Config2_rupd(x,ConfigRegister2_SA_rupd(x0,BitsN.B(0x0,4))))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config3) x
    in
      write'CP0(CP0_Config3_rupd(x,ConfigRegister3_M_rupd(x0,true)))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config3) x
    in
      write'CP0(CP0_Config3_rupd(x,ConfigRegister3_ULRI_rupd(x0,true)))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config3) x
    in
      write'CP0(CP0_Config3_rupd(x,ConfigRegister3_DSPP_rupd(x0,false)))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config3) x
    in
      write'CP0(CP0_Config3_rupd(x,ConfigRegister3_LPA_rupd(x0,false)))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config3) x
    in
      write'CP0(CP0_Config3_rupd(x,ConfigRegister3_VEIC_rupd(x0,false)))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config3) x
    in
      write'CP0(CP0_Config3_rupd(x,ConfigRegister3_VInt_rupd(x0,false)))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config3) x
    in
      write'CP0(CP0_Config3_rupd(x,ConfigRegister3_SP_rupd(x0,false)))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config3) x
    in
      write'CP0(CP0_Config3_rupd(x,ConfigRegister3_MT_rupd(x0,false)))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config3) x
    in
      write'CP0(CP0_Config3_rupd(x,ConfigRegister3_SM_rupd(x0,false)))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config3) x
    in
      write'CP0(CP0_Config3_rupd(x,ConfigRegister3_TL_rupd(x0,false)))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config6) x
    in
      write'CP0
        (CP0_Config6_rupd
           (x,ConfigRegister6_TLBSize_rupd(x0,BitsN.B(0x8F,16))))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Config6) x
    in
      write'CP0(CP0_Config6_rupd(x,ConfigRegister6_LTLB_rupd(x0,false)))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Status) x
    in
      write'CP0
        (CP0_Status_rupd(x,write'reg'StatusRegister(x0,BitsN.B(0x0,32))))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Status) x
    in
      write'CP0(CP0_Status_rupd(x,StatusRegister_BEV_rupd(x0,true)))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Status) x
    in
      write'CP0
        (CP0_Status_rupd(x,StatusRegister_KSU_rupd(x0,BitsN.B(0x0,2))))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Status) x
    in
      write'CP0(CP0_Status_rupd(x,StatusRegister_EXL_rupd(x0,false)))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Status) x
    in
      write'CP0(CP0_Status_rupd(x,StatusRegister_ERL_rupd(x0,false)))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Status) x
    in
      write'CP0(CP0_Status_rupd(x,StatusRegister_KX_rupd(x0,true)))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Status) x
    in
      write'CP0(CP0_Status_rupd(x,StatusRegister_SX_rupd(x0,true)))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Status) x
    in
      write'CP0(CP0_Status_rupd(x,StatusRegister_UX_rupd(x0,true)))
    end
  ; let val x = CP0 () in write'CP0(CP0_Count_rupd(x,BitsN.B(0x0,32))) end
  ; let
      val x = CP0 ()
    in
      write'CP0(CP0_Compare_rupd(x,BitsN.B(0x0,32)))
    end
  ; let
      val x = CP0 ()
    in
      write'CP0(CP0_PRId_rupd(x,BitsN.B(0x400,32)))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Index) x
    in
      write'CP0(CP0_Index_rupd(x,Index_P_rupd(x0,false)))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Index) x
    in
      write'CP0(CP0_Index_rupd(x,Index_Index_rupd(x0,BitsN.B(0x0,8))))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Random) x
    in
      write'CP0
        (CP0_Random_rupd
           (x,Random_Random_rupd(x0,BitsN.fromNat(Nat.-(TLBEntries,1),8))))
    end
  ; let
      val x = CP0 ()
      val x0 = (#Wired) x
    in
      write'CP0(CP0_Wired_rupd(x,Wired_Wired_rupd(x0,BitsN.B(0x0,8))))
    end
  ; let
      val x = CP0 ()
      val x0 = (#HWREna) x
    in
      write'CP0(CP0_HWREna_rupd(x,write'reg'HWREna(x0,BitsN.B(0x0,32))))
    end
  ; L3.for
      (0,127,
       fn i =>
         let
           val x = BitsN.fromNat(i,4)
         in
           write'TLB_assoc(initTLB (),x)
         end)
  ; write'BranchDelay NONE
  ; write'BranchTo NONE
  ; write'LLbit NONE
  ; write'hi NONE
  ; write'lo NONE
  ; write'PC(BitsN.fromNat(pc,64))
  ; COP2Init ()
  ; done := false
  ; L3.for
      (0,31,
       fn i =>
         let
           val x = BitsN.fromNat(i,5)
         in
           write'gpr(BitsN.B(0xAAAAAAAAAAAAAAAA,64),x)
         end)
  ; PIC_initialise(Nat.+(2139111424,Nat.*(BitsN.toNat (!procID),16384)))
  ; if (!procID) = (BitsN.B(0x0,8))
      then ( JTAG_UART_initialise uart; InitMEM () )
    else ()
  );

end